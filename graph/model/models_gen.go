// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Additive struct {
	Name       string  `json:"name"`
	GramsPerKg float64 `json:"gramsPerKg"`
}

type AdditiveValue struct {
	Additive   *Additive `json:"additive"`
	Percentage float64   `json:"percentage"`
	Weight     float64   `json:"weight"`
}

type BalanceSheet struct {
	Year         int                         `json:"year"`
	Assets       []*BalanceSheetAsset        `json:"assets"`
	Liabilities  []*BalanceSheetLiability    `json:"liabilities"`
	OwnersEquity []*BalanceSheetOwnersEquity `json:"ownersEquity"`
}

type BalanceSheetAsset struct {
	Current []*BalanceSheetValue `json:"current"`
	Ppe     []*BalanceSheetValue `json:"ppe"`
}

type BalanceSheetLiability struct {
	Current []*BalanceSheetValue `json:"current"`
}

type BalanceSheetOwnersEquity struct {
	Current []*BalanceSheetValue `json:"current"`
}

type BalanceSheetValue struct {
	Name  string `json:"name"`
	Value int    `json:"value"`
}

type CreateRecipe struct {
	Lye              Lye     `json:"lye"`
	LipidWeight      float64 `json:"lipidWeight"`
	LyeConcentration float64 `json:"lyeConcentration"`
	LyeDiscount      float64 `json:"lyeDiscount"`
}

type Fragrance struct {
	Name       string  `json:"name"`
	GramsPerKg float64 `json:"gramsPerKg"`
}

type FragranceValue struct {
	Fragrance  *Fragrance `json:"fragrance"`
	Percentage float64    `json:"percentage"`
	Weight     float64    `json:"weight"`
}

type JournalEntry struct {
	Date        string        `json:"date"`
	Description string        `json:"description"`
	Annotation  string        `json:"annotation"`
	Tags        []string      `json:"tags"`
	Debits      []*JournalRow `json:"debits"`
	Credits     []*JournalRow `json:"credits"`
	Notes       string        `json:"notes"`
}

type JournalRow struct {
	Account string `json:"account"`
	Type    string `json:"type"`
	Amount  int    `json:"amount"`
}

type Lipid struct {
	Name          string  `json:"name"`
	Type          string  `json:"type"`
	Naoh          float64 `json:"naoh"`
	Koh           float64 `json:"koh"`
	InciName      string  `json:"inciName"`
	GramsPerLiter float64 `json:"gramsPerLiter"`
}

type LipidValue struct {
	Lipid      *Lipid  `json:"lipid"`
	Percentage float64 `json:"percentage"`
	Weight     float64 `json:"weight"`
}

type Recipe struct {
	Name        string             `json:"name"`
	Lipids      []*LipidValue      `json:"lipids"`
	Additives   []*AdditiveValue   `json:"additives"`
	LipidWeight float64            `json:"lipidWeight"`
	Water       float64            `json:"water"`
	Naoh        float64            `json:"naoh"`
	Fragrances  []*FragranceValue  `json:"fragrances"`
	Discount    float64            `json:"discount"`
	WaterRatio  float64            `json:"waterRatio"`
	Quality     *RecipeQuality     `json:"quality"`
	Composition *RecipeComposition `json:"composition"`
}

type RecipeComposition struct {
	Lauric     int `json:"lauric"`
	Myristic   int `json:"myristic"`
	Palmitic   int `json:"palmitic"`
	Stearic    int `json:"stearic"`
	Ricinoleic int `json:"ricinoleic"`
	Oleic      int `json:"oleic"`
	Linoleic   int `json:"linoleic"`
	Linolenic  int `json:"linolenic"`
}

type RecipeQuality struct {
	Hardness     int `json:"hardness"`
	Cleansing    int `json:"cleansing"`
	Conditioning int `json:"conditioning"`
	Bubbly       int `json:"bubbly"`
	Creamy       int `json:"creamy"`
	Iodine       int `json:"iodine"`
	Ins          int `json:"ins"`
}

type Lye string

const (
	LyeNaOh Lye = "NaOH"
	LyeKoh  Lye = "KOH"
)

var AllLye = []Lye{
	LyeNaOh,
	LyeKoh,
}

func (e Lye) IsValid() bool {
	switch e {
	case LyeNaOh, LyeKoh:
		return true
	}
	return false
}

func (e Lye) String() string {
	return string(e)
}

func (e *Lye) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Lye(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Lye", str)
	}
	return nil
}

func (e Lye) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
