// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SoapFragranceinventory is an object representing the database table.
type SoapFragranceinventory struct {
	ID           int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt    time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt    null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	PurchaseDate time.Time `boil:"purchase_date" json:"purchase_date" toml:"purchase_date" yaml:"purchase_date"`
	ExpiryDate   time.Time `boil:"expiry_date" json:"expiry_date" toml:"expiry_date" yaml:"expiry_date"`
	Cost         float64   `boil:"cost" json:"cost" toml:"cost" yaml:"cost"`
	Weight       float64   `boil:"weight" json:"weight" toml:"weight" yaml:"weight"`
	FragranceID  int       `boil:"fragrance_id" json:"fragrance_id" toml:"fragrance_id" yaml:"fragrance_id"`
	SupplierID   int       `boil:"supplier_id" json:"supplier_id" toml:"supplier_id" yaml:"supplier_id"`

	R *soapFragranceinventoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L soapFragranceinventoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SoapFragranceinventoryColumns = struct {
	ID           string
	CreatedAt    string
	UpdatedAt    string
	DeletedAt    string
	PurchaseDate string
	ExpiryDate   string
	Cost         string
	Weight       string
	FragranceID  string
	SupplierID   string
}{
	ID:           "id",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
	DeletedAt:    "deleted_at",
	PurchaseDate: "purchase_date",
	ExpiryDate:   "expiry_date",
	Cost:         "cost",
	Weight:       "weight",
	FragranceID:  "fragrance_id",
	SupplierID:   "supplier_id",
}

// Generated where

var SoapFragranceinventoryWhere = struct {
	ID           whereHelperint
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
	DeletedAt    whereHelpernull_Time
	PurchaseDate whereHelpertime_Time
	ExpiryDate   whereHelpertime_Time
	Cost         whereHelperfloat64
	Weight       whereHelperfloat64
	FragranceID  whereHelperint
	SupplierID   whereHelperint
}{
	ID:           whereHelperint{field: "\"soap_fragranceinventory\".\"id\""},
	CreatedAt:    whereHelpertime_Time{field: "\"soap_fragranceinventory\".\"created_at\""},
	UpdatedAt:    whereHelpertime_Time{field: "\"soap_fragranceinventory\".\"updated_at\""},
	DeletedAt:    whereHelpernull_Time{field: "\"soap_fragranceinventory\".\"deleted_at\""},
	PurchaseDate: whereHelpertime_Time{field: "\"soap_fragranceinventory\".\"purchase_date\""},
	ExpiryDate:   whereHelpertime_Time{field: "\"soap_fragranceinventory\".\"expiry_date\""},
	Cost:         whereHelperfloat64{field: "\"soap_fragranceinventory\".\"cost\""},
	Weight:       whereHelperfloat64{field: "\"soap_fragranceinventory\".\"weight\""},
	FragranceID:  whereHelperint{field: "\"soap_fragranceinventory\".\"fragrance_id\""},
	SupplierID:   whereHelperint{field: "\"soap_fragranceinventory\".\"supplier_id\""},
}

// SoapFragranceinventoryRels is where relationship names are stored.
var SoapFragranceinventoryRels = struct {
	Fragrance string
	Supplier  string
}{
	Fragrance: "Fragrance",
	Supplier:  "Supplier",
}

// soapFragranceinventoryR is where relationships are stored.
type soapFragranceinventoryR struct {
	Fragrance *SoapFragrance `boil:"Fragrance" json:"Fragrance" toml:"Fragrance" yaml:"Fragrance"`
	Supplier  *SoapSupplier  `boil:"Supplier" json:"Supplier" toml:"Supplier" yaml:"Supplier"`
}

// NewStruct creates a new relationship struct
func (*soapFragranceinventoryR) NewStruct() *soapFragranceinventoryR {
	return &soapFragranceinventoryR{}
}

// soapFragranceinventoryL is where Load methods for each relationship are stored.
type soapFragranceinventoryL struct{}

var (
	soapFragranceinventoryAllColumns            = []string{"id", "created_at", "updated_at", "deleted_at", "purchase_date", "expiry_date", "cost", "weight", "fragrance_id", "supplier_id"}
	soapFragranceinventoryColumnsWithoutDefault = []string{"created_at", "updated_at", "deleted_at", "purchase_date", "expiry_date", "cost", "weight", "fragrance_id", "supplier_id"}
	soapFragranceinventoryColumnsWithDefault    = []string{"id"}
	soapFragranceinventoryPrimaryKeyColumns     = []string{"id"}
)

type (
	// SoapFragranceinventorySlice is an alias for a slice of pointers to SoapFragranceinventory.
	// This should generally be used opposed to []SoapFragranceinventory.
	SoapFragranceinventorySlice []*SoapFragranceinventory
	// SoapFragranceinventoryHook is the signature for custom SoapFragranceinventory hook methods
	SoapFragranceinventoryHook func(context.Context, boil.ContextExecutor, *SoapFragranceinventory) error

	soapFragranceinventoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	soapFragranceinventoryType                 = reflect.TypeOf(&SoapFragranceinventory{})
	soapFragranceinventoryMapping              = queries.MakeStructMapping(soapFragranceinventoryType)
	soapFragranceinventoryPrimaryKeyMapping, _ = queries.BindMapping(soapFragranceinventoryType, soapFragranceinventoryMapping, soapFragranceinventoryPrimaryKeyColumns)
	soapFragranceinventoryInsertCacheMut       sync.RWMutex
	soapFragranceinventoryInsertCache          = make(map[string]insertCache)
	soapFragranceinventoryUpdateCacheMut       sync.RWMutex
	soapFragranceinventoryUpdateCache          = make(map[string]updateCache)
	soapFragranceinventoryUpsertCacheMut       sync.RWMutex
	soapFragranceinventoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var soapFragranceinventoryBeforeInsertHooks []SoapFragranceinventoryHook
var soapFragranceinventoryBeforeUpdateHooks []SoapFragranceinventoryHook
var soapFragranceinventoryBeforeDeleteHooks []SoapFragranceinventoryHook
var soapFragranceinventoryBeforeUpsertHooks []SoapFragranceinventoryHook

var soapFragranceinventoryAfterInsertHooks []SoapFragranceinventoryHook
var soapFragranceinventoryAfterSelectHooks []SoapFragranceinventoryHook
var soapFragranceinventoryAfterUpdateHooks []SoapFragranceinventoryHook
var soapFragranceinventoryAfterDeleteHooks []SoapFragranceinventoryHook
var soapFragranceinventoryAfterUpsertHooks []SoapFragranceinventoryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SoapFragranceinventory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapFragranceinventoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SoapFragranceinventory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapFragranceinventoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SoapFragranceinventory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapFragranceinventoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SoapFragranceinventory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapFragranceinventoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SoapFragranceinventory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapFragranceinventoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SoapFragranceinventory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapFragranceinventoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SoapFragranceinventory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapFragranceinventoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SoapFragranceinventory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapFragranceinventoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SoapFragranceinventory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapFragranceinventoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSoapFragranceinventoryHook registers your hook function for all future operations.
func AddSoapFragranceinventoryHook(hookPoint boil.HookPoint, soapFragranceinventoryHook SoapFragranceinventoryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		soapFragranceinventoryBeforeInsertHooks = append(soapFragranceinventoryBeforeInsertHooks, soapFragranceinventoryHook)
	case boil.BeforeUpdateHook:
		soapFragranceinventoryBeforeUpdateHooks = append(soapFragranceinventoryBeforeUpdateHooks, soapFragranceinventoryHook)
	case boil.BeforeDeleteHook:
		soapFragranceinventoryBeforeDeleteHooks = append(soapFragranceinventoryBeforeDeleteHooks, soapFragranceinventoryHook)
	case boil.BeforeUpsertHook:
		soapFragranceinventoryBeforeUpsertHooks = append(soapFragranceinventoryBeforeUpsertHooks, soapFragranceinventoryHook)
	case boil.AfterInsertHook:
		soapFragranceinventoryAfterInsertHooks = append(soapFragranceinventoryAfterInsertHooks, soapFragranceinventoryHook)
	case boil.AfterSelectHook:
		soapFragranceinventoryAfterSelectHooks = append(soapFragranceinventoryAfterSelectHooks, soapFragranceinventoryHook)
	case boil.AfterUpdateHook:
		soapFragranceinventoryAfterUpdateHooks = append(soapFragranceinventoryAfterUpdateHooks, soapFragranceinventoryHook)
	case boil.AfterDeleteHook:
		soapFragranceinventoryAfterDeleteHooks = append(soapFragranceinventoryAfterDeleteHooks, soapFragranceinventoryHook)
	case boil.AfterUpsertHook:
		soapFragranceinventoryAfterUpsertHooks = append(soapFragranceinventoryAfterUpsertHooks, soapFragranceinventoryHook)
	}
}

// One returns a single soapFragranceinventory record from the query.
func (q soapFragranceinventoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SoapFragranceinventory, error) {
	o := &SoapFragranceinventory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for soap_fragranceinventory")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SoapFragranceinventory records from the query.
func (q soapFragranceinventoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (SoapFragranceinventorySlice, error) {
	var o []*SoapFragranceinventory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SoapFragranceinventory slice")
	}

	if len(soapFragranceinventoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SoapFragranceinventory records in the query.
func (q soapFragranceinventoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count soap_fragranceinventory rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q soapFragranceinventoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if soap_fragranceinventory exists")
	}

	return count > 0, nil
}

// Fragrance pointed to by the foreign key.
func (o *SoapFragranceinventory) Fragrance(mods ...qm.QueryMod) soapFragranceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FragranceID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := SoapFragrances(queryMods...)
	queries.SetFrom(query.Query, "\"soap_fragrance\"")

	return query
}

// Supplier pointed to by the foreign key.
func (o *SoapFragranceinventory) Supplier(mods ...qm.QueryMod) soapSupplierQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SupplierID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := SoapSuppliers(queryMods...)
	queries.SetFrom(query.Query, "\"soap_supplier\"")

	return query
}

// LoadFragrance allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (soapFragranceinventoryL) LoadFragrance(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSoapFragranceinventory interface{}, mods queries.Applicator) error {
	var slice []*SoapFragranceinventory
	var object *SoapFragranceinventory

	if singular {
		object = maybeSoapFragranceinventory.(*SoapFragranceinventory)
	} else {
		slice = *maybeSoapFragranceinventory.(*[]*SoapFragranceinventory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &soapFragranceinventoryR{}
		}
		args = append(args, object.FragranceID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &soapFragranceinventoryR{}
			}

			for _, a := range args {
				if a == obj.FragranceID {
					continue Outer
				}
			}

			args = append(args, obj.FragranceID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`soap_fragrance`),
		qm.WhereIn(`soap_fragrance.id in ?`, args...),
		qmhelper.WhereIsNull(`soap_fragrance.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SoapFragrance")
	}

	var resultSlice []*SoapFragrance
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SoapFragrance")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for soap_fragrance")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for soap_fragrance")
	}

	if len(soapFragranceinventoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Fragrance = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FragranceID == foreign.ID {
				local.R.Fragrance = foreign
				break
			}
		}
	}

	return nil
}

// LoadSupplier allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (soapFragranceinventoryL) LoadSupplier(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSoapFragranceinventory interface{}, mods queries.Applicator) error {
	var slice []*SoapFragranceinventory
	var object *SoapFragranceinventory

	if singular {
		object = maybeSoapFragranceinventory.(*SoapFragranceinventory)
	} else {
		slice = *maybeSoapFragranceinventory.(*[]*SoapFragranceinventory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &soapFragranceinventoryR{}
		}
		args = append(args, object.SupplierID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &soapFragranceinventoryR{}
			}

			for _, a := range args {
				if a == obj.SupplierID {
					continue Outer
				}
			}

			args = append(args, obj.SupplierID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`soap_supplier`),
		qm.WhereIn(`soap_supplier.id in ?`, args...),
		qmhelper.WhereIsNull(`soap_supplier.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SoapSupplier")
	}

	var resultSlice []*SoapSupplier
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SoapSupplier")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for soap_supplier")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for soap_supplier")
	}

	if len(soapFragranceinventoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Supplier = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SupplierID == foreign.ID {
				local.R.Supplier = foreign
				break
			}
		}
	}

	return nil
}

// SetFragrance of the soapFragranceinventory to the related item.
// Sets o.R.Fragrance to related.
// Adds o to related.R.FragranceSoapFragranceinventories.
func (o *SoapFragranceinventory) SetFragrance(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SoapFragrance) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"soap_fragranceinventory\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"fragrance_id"}),
		strmangle.WhereClause("\"", "\"", 2, soapFragranceinventoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FragranceID = related.ID
	if o.R == nil {
		o.R = &soapFragranceinventoryR{
			Fragrance: related,
		}
	} else {
		o.R.Fragrance = related
	}

	if related.R == nil {
		related.R = &soapFragranceR{
			FragranceSoapFragranceinventories: SoapFragranceinventorySlice{o},
		}
	} else {
		related.R.FragranceSoapFragranceinventories = append(related.R.FragranceSoapFragranceinventories, o)
	}

	return nil
}

// SetSupplier of the soapFragranceinventory to the related item.
// Sets o.R.Supplier to related.
// Adds o to related.R.SupplierSoapFragranceinventories.
func (o *SoapFragranceinventory) SetSupplier(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SoapSupplier) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"soap_fragranceinventory\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"supplier_id"}),
		strmangle.WhereClause("\"", "\"", 2, soapFragranceinventoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SupplierID = related.ID
	if o.R == nil {
		o.R = &soapFragranceinventoryR{
			Supplier: related,
		}
	} else {
		o.R.Supplier = related
	}

	if related.R == nil {
		related.R = &soapSupplierR{
			SupplierSoapFragranceinventories: SoapFragranceinventorySlice{o},
		}
	} else {
		related.R.SupplierSoapFragranceinventories = append(related.R.SupplierSoapFragranceinventories, o)
	}

	return nil
}

// SoapFragranceinventories retrieves all the records using an executor.
func SoapFragranceinventories(mods ...qm.QueryMod) soapFragranceinventoryQuery {
	mods = append(mods, qm.From("\"soap_fragranceinventory\""), qmhelper.WhereIsNull("\"soap_fragranceinventory\".\"deleted_at\""))
	return soapFragranceinventoryQuery{NewQuery(mods...)}
}

// FindSoapFragranceinventory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSoapFragranceinventory(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*SoapFragranceinventory, error) {
	soapFragranceinventoryObj := &SoapFragranceinventory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"soap_fragranceinventory\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, soapFragranceinventoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from soap_fragranceinventory")
	}

	return soapFragranceinventoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SoapFragranceinventory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no soap_fragranceinventory provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(soapFragranceinventoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	soapFragranceinventoryInsertCacheMut.RLock()
	cache, cached := soapFragranceinventoryInsertCache[key]
	soapFragranceinventoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			soapFragranceinventoryAllColumns,
			soapFragranceinventoryColumnsWithDefault,
			soapFragranceinventoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(soapFragranceinventoryType, soapFragranceinventoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(soapFragranceinventoryType, soapFragranceinventoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"soap_fragranceinventory\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"soap_fragranceinventory\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into soap_fragranceinventory")
	}

	if !cached {
		soapFragranceinventoryInsertCacheMut.Lock()
		soapFragranceinventoryInsertCache[key] = cache
		soapFragranceinventoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SoapFragranceinventory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SoapFragranceinventory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	soapFragranceinventoryUpdateCacheMut.RLock()
	cache, cached := soapFragranceinventoryUpdateCache[key]
	soapFragranceinventoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			soapFragranceinventoryAllColumns,
			soapFragranceinventoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update soap_fragranceinventory, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"soap_fragranceinventory\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, soapFragranceinventoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(soapFragranceinventoryType, soapFragranceinventoryMapping, append(wl, soapFragranceinventoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update soap_fragranceinventory row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for soap_fragranceinventory")
	}

	if !cached {
		soapFragranceinventoryUpdateCacheMut.Lock()
		soapFragranceinventoryUpdateCache[key] = cache
		soapFragranceinventoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q soapFragranceinventoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for soap_fragranceinventory")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for soap_fragranceinventory")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SoapFragranceinventorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), soapFragranceinventoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"soap_fragranceinventory\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, soapFragranceinventoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in soapFragranceinventory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all soapFragranceinventory")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SoapFragranceinventory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no soap_fragranceinventory provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(soapFragranceinventoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	soapFragranceinventoryUpsertCacheMut.RLock()
	cache, cached := soapFragranceinventoryUpsertCache[key]
	soapFragranceinventoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			soapFragranceinventoryAllColumns,
			soapFragranceinventoryColumnsWithDefault,
			soapFragranceinventoryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			soapFragranceinventoryAllColumns,
			soapFragranceinventoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert soap_fragranceinventory, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(soapFragranceinventoryPrimaryKeyColumns))
			copy(conflict, soapFragranceinventoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"soap_fragranceinventory\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(soapFragranceinventoryType, soapFragranceinventoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(soapFragranceinventoryType, soapFragranceinventoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert soap_fragranceinventory")
	}

	if !cached {
		soapFragranceinventoryUpsertCacheMut.Lock()
		soapFragranceinventoryUpsertCache[key] = cache
		soapFragranceinventoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SoapFragranceinventory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SoapFragranceinventory) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SoapFragranceinventory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), soapFragranceinventoryPrimaryKeyMapping)
		sql = "DELETE FROM \"soap_fragranceinventory\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"soap_fragranceinventory\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(soapFragranceinventoryType, soapFragranceinventoryMapping, append(wl, soapFragranceinventoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from soap_fragranceinventory")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for soap_fragranceinventory")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q soapFragranceinventoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no soapFragranceinventoryQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from soap_fragranceinventory")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for soap_fragranceinventory")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SoapFragranceinventorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(soapFragranceinventoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), soapFragranceinventoryPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"soap_fragranceinventory\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, soapFragranceinventoryPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), soapFragranceinventoryPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"soap_fragranceinventory\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, soapFragranceinventoryPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from soapFragranceinventory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for soap_fragranceinventory")
	}

	if len(soapFragranceinventoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SoapFragranceinventory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSoapFragranceinventory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SoapFragranceinventorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SoapFragranceinventorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), soapFragranceinventoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"soap_fragranceinventory\".* FROM \"soap_fragranceinventory\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, soapFragranceinventoryPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SoapFragranceinventorySlice")
	}

	*o = slice

	return nil
}

// SoapFragranceinventoryExists checks if the SoapFragranceinventory row exists.
func SoapFragranceinventoryExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"soap_fragranceinventory\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if soap_fragranceinventory exists")
	}

	return exists, nil
}
