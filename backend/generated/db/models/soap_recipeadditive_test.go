// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSoapRecipeadditives(t *testing.T) {
	t.Parallel()

	query := SoapRecipeadditives()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSoapRecipeadditivesSoftDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipeadditive{}
	if err = randomize.Struct(seed, o, soapRecipeadditiveDBTypes, true, soapRecipeadditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipeadditive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapRecipeadditives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapRecipeadditivesQuerySoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipeadditive{}
	if err = randomize.Struct(seed, o, soapRecipeadditiveDBTypes, true, soapRecipeadditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipeadditive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SoapRecipeadditives().DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapRecipeadditives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapRecipeadditivesSliceSoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipeadditive{}
	if err = randomize.Struct(seed, o, soapRecipeadditiveDBTypes, true, soapRecipeadditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipeadditive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SoapRecipeadditiveSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapRecipeadditives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapRecipeadditivesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipeadditive{}
	if err = randomize.Struct(seed, o, soapRecipeadditiveDBTypes, true, soapRecipeadditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipeadditive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapRecipeadditives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapRecipeadditivesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipeadditive{}
	if err = randomize.Struct(seed, o, soapRecipeadditiveDBTypes, true, soapRecipeadditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipeadditive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SoapRecipeadditives().DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapRecipeadditives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapRecipeadditivesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipeadditive{}
	if err = randomize.Struct(seed, o, soapRecipeadditiveDBTypes, true, soapRecipeadditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipeadditive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SoapRecipeadditiveSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapRecipeadditives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapRecipeadditivesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipeadditive{}
	if err = randomize.Struct(seed, o, soapRecipeadditiveDBTypes, true, soapRecipeadditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipeadditive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SoapRecipeadditiveExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if SoapRecipeadditive exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SoapRecipeadditiveExists to return true, but got false.")
	}
}

func testSoapRecipeadditivesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipeadditive{}
	if err = randomize.Struct(seed, o, soapRecipeadditiveDBTypes, true, soapRecipeadditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipeadditive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	soapRecipeadditiveFound, err := FindSoapRecipeadditive(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if soapRecipeadditiveFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSoapRecipeadditivesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipeadditive{}
	if err = randomize.Struct(seed, o, soapRecipeadditiveDBTypes, true, soapRecipeadditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipeadditive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SoapRecipeadditives().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSoapRecipeadditivesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipeadditive{}
	if err = randomize.Struct(seed, o, soapRecipeadditiveDBTypes, true, soapRecipeadditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipeadditive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SoapRecipeadditives().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSoapRecipeadditivesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	soapRecipeadditiveOne := &SoapRecipeadditive{}
	soapRecipeadditiveTwo := &SoapRecipeadditive{}
	if err = randomize.Struct(seed, soapRecipeadditiveOne, soapRecipeadditiveDBTypes, false, soapRecipeadditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipeadditive struct: %s", err)
	}
	if err = randomize.Struct(seed, soapRecipeadditiveTwo, soapRecipeadditiveDBTypes, false, soapRecipeadditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipeadditive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = soapRecipeadditiveOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = soapRecipeadditiveTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SoapRecipeadditives().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSoapRecipeadditivesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	soapRecipeadditiveOne := &SoapRecipeadditive{}
	soapRecipeadditiveTwo := &SoapRecipeadditive{}
	if err = randomize.Struct(seed, soapRecipeadditiveOne, soapRecipeadditiveDBTypes, false, soapRecipeadditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipeadditive struct: %s", err)
	}
	if err = randomize.Struct(seed, soapRecipeadditiveTwo, soapRecipeadditiveDBTypes, false, soapRecipeadditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipeadditive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = soapRecipeadditiveOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = soapRecipeadditiveTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapRecipeadditives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func soapRecipeadditiveBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapRecipeadditive) error {
	*o = SoapRecipeadditive{}
	return nil
}

func soapRecipeadditiveAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapRecipeadditive) error {
	*o = SoapRecipeadditive{}
	return nil
}

func soapRecipeadditiveAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *SoapRecipeadditive) error {
	*o = SoapRecipeadditive{}
	return nil
}

func soapRecipeadditiveBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SoapRecipeadditive) error {
	*o = SoapRecipeadditive{}
	return nil
}

func soapRecipeadditiveAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SoapRecipeadditive) error {
	*o = SoapRecipeadditive{}
	return nil
}

func soapRecipeadditiveBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SoapRecipeadditive) error {
	*o = SoapRecipeadditive{}
	return nil
}

func soapRecipeadditiveAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SoapRecipeadditive) error {
	*o = SoapRecipeadditive{}
	return nil
}

func soapRecipeadditiveBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapRecipeadditive) error {
	*o = SoapRecipeadditive{}
	return nil
}

func soapRecipeadditiveAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapRecipeadditive) error {
	*o = SoapRecipeadditive{}
	return nil
}

func testSoapRecipeadditivesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &SoapRecipeadditive{}
	o := &SoapRecipeadditive{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, soapRecipeadditiveDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SoapRecipeadditive object: %s", err)
	}

	AddSoapRecipeadditiveHook(boil.BeforeInsertHook, soapRecipeadditiveBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	soapRecipeadditiveBeforeInsertHooks = []SoapRecipeadditiveHook{}

	AddSoapRecipeadditiveHook(boil.AfterInsertHook, soapRecipeadditiveAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	soapRecipeadditiveAfterInsertHooks = []SoapRecipeadditiveHook{}

	AddSoapRecipeadditiveHook(boil.AfterSelectHook, soapRecipeadditiveAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	soapRecipeadditiveAfterSelectHooks = []SoapRecipeadditiveHook{}

	AddSoapRecipeadditiveHook(boil.BeforeUpdateHook, soapRecipeadditiveBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	soapRecipeadditiveBeforeUpdateHooks = []SoapRecipeadditiveHook{}

	AddSoapRecipeadditiveHook(boil.AfterUpdateHook, soapRecipeadditiveAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	soapRecipeadditiveAfterUpdateHooks = []SoapRecipeadditiveHook{}

	AddSoapRecipeadditiveHook(boil.BeforeDeleteHook, soapRecipeadditiveBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	soapRecipeadditiveBeforeDeleteHooks = []SoapRecipeadditiveHook{}

	AddSoapRecipeadditiveHook(boil.AfterDeleteHook, soapRecipeadditiveAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	soapRecipeadditiveAfterDeleteHooks = []SoapRecipeadditiveHook{}

	AddSoapRecipeadditiveHook(boil.BeforeUpsertHook, soapRecipeadditiveBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	soapRecipeadditiveBeforeUpsertHooks = []SoapRecipeadditiveHook{}

	AddSoapRecipeadditiveHook(boil.AfterUpsertHook, soapRecipeadditiveAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	soapRecipeadditiveAfterUpsertHooks = []SoapRecipeadditiveHook{}
}

func testSoapRecipeadditivesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipeadditive{}
	if err = randomize.Struct(seed, o, soapRecipeadditiveDBTypes, true, soapRecipeadditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipeadditive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapRecipeadditives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSoapRecipeadditivesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipeadditive{}
	if err = randomize.Struct(seed, o, soapRecipeadditiveDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SoapRecipeadditive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(soapRecipeadditiveColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := SoapRecipeadditives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSoapRecipeadditiveToManyAdditiveSoapRecipes(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SoapRecipeadditive
	var b, c SoapRecipe

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soapRecipeadditiveDBTypes, true, soapRecipeadditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipeadditive struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, soapRecipeDBTypes, false, soapRecipeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, soapRecipeDBTypes, false, soapRecipeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.AdditivesID = a.ID
	c.AdditivesID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.AdditiveSoapRecipes().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.AdditivesID == b.AdditivesID {
			bFound = true
		}
		if v.AdditivesID == c.AdditivesID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SoapRecipeadditiveSlice{&a}
	if err = a.L.LoadAdditiveSoapRecipes(ctx, tx, false, (*[]*SoapRecipeadditive)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AdditiveSoapRecipes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.AdditiveSoapRecipes = nil
	if err = a.L.LoadAdditiveSoapRecipes(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AdditiveSoapRecipes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSoapRecipeadditiveToManyAddOpAdditiveSoapRecipes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SoapRecipeadditive
	var b, c, d, e SoapRecipe

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soapRecipeadditiveDBTypes, false, strmangle.SetComplement(soapRecipeadditivePrimaryKeyColumns, soapRecipeadditiveColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SoapRecipe{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, soapRecipeDBTypes, false, strmangle.SetComplement(soapRecipePrimaryKeyColumns, soapRecipeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SoapRecipe{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAdditiveSoapRecipes(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.AdditivesID {
			t.Error("foreign key was wrong value", a.ID, first.AdditivesID)
		}
		if a.ID != second.AdditivesID {
			t.Error("foreign key was wrong value", a.ID, second.AdditivesID)
		}

		if first.R.Additive != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Additive != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.AdditiveSoapRecipes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.AdditiveSoapRecipes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AdditiveSoapRecipes().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSoapRecipeadditiveToOneSoapAdditiveUsingAdditive(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SoapRecipeadditive
	var foreign SoapAdditive

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, soapRecipeadditiveDBTypes, false, soapRecipeadditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipeadditive struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, soapAdditiveDBTypes, false, soapAdditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditive struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AdditiveID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Additive().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SoapRecipeadditiveSlice{&local}
	if err = local.L.LoadAdditive(ctx, tx, false, (*[]*SoapRecipeadditive)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Additive == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Additive = nil
	if err = local.L.LoadAdditive(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Additive == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSoapRecipeadditiveToOneSetOpSoapAdditiveUsingAdditive(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SoapRecipeadditive
	var b, c SoapAdditive

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soapRecipeadditiveDBTypes, false, strmangle.SetComplement(soapRecipeadditivePrimaryKeyColumns, soapRecipeadditiveColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, soapAdditiveDBTypes, false, strmangle.SetComplement(soapAdditivePrimaryKeyColumns, soapAdditiveColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, soapAdditiveDBTypes, false, strmangle.SetComplement(soapAdditivePrimaryKeyColumns, soapAdditiveColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SoapAdditive{&b, &c} {
		err = a.SetAdditive(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Additive != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AdditiveSoapRecipeadditives[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AdditiveID != x.ID {
			t.Error("foreign key was wrong value", a.AdditiveID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AdditiveID))
		reflect.Indirect(reflect.ValueOf(&a.AdditiveID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.AdditiveID != x.ID {
			t.Error("foreign key was wrong value", a.AdditiveID, x.ID)
		}
	}
}

func testSoapRecipeadditivesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipeadditive{}
	if err = randomize.Struct(seed, o, soapRecipeadditiveDBTypes, true, soapRecipeadditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipeadditive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSoapRecipeadditivesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipeadditive{}
	if err = randomize.Struct(seed, o, soapRecipeadditiveDBTypes, true, soapRecipeadditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipeadditive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SoapRecipeadditiveSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSoapRecipeadditivesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipeadditive{}
	if err = randomize.Struct(seed, o, soapRecipeadditiveDBTypes, true, soapRecipeadditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipeadditive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SoapRecipeadditives().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	soapRecipeadditiveDBTypes = map[string]string{`CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `ID`: `character varying`, `Percentage`: `double precision`, `Weight`: `double precision`, `Cost`: `double precision`, `AdditiveID`: `integer`}
	_                         = bytes.MinRead
)

func testSoapRecipeadditivesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(soapRecipeadditivePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(soapRecipeadditiveAllColumns) == len(soapRecipeadditivePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipeadditive{}
	if err = randomize.Struct(seed, o, soapRecipeadditiveDBTypes, true, soapRecipeadditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipeadditive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapRecipeadditives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, soapRecipeadditiveDBTypes, true, soapRecipeadditivePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SoapRecipeadditive struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSoapRecipeadditivesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(soapRecipeadditiveAllColumns) == len(soapRecipeadditivePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipeadditive{}
	if err = randomize.Struct(seed, o, soapRecipeadditiveDBTypes, true, soapRecipeadditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipeadditive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapRecipeadditives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, soapRecipeadditiveDBTypes, true, soapRecipeadditivePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SoapRecipeadditive struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(soapRecipeadditiveAllColumns, soapRecipeadditivePrimaryKeyColumns) {
		fields = soapRecipeadditiveAllColumns
	} else {
		fields = strmangle.SetComplement(
			soapRecipeadditiveAllColumns,
			soapRecipeadditivePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SoapRecipeadditiveSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSoapRecipeadditivesUpsert(t *testing.T) {
	t.Parallel()

	if len(soapRecipeadditiveAllColumns) == len(soapRecipeadditivePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SoapRecipeadditive{}
	if err = randomize.Struct(seed, &o, soapRecipeadditiveDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SoapRecipeadditive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SoapRecipeadditive: %s", err)
	}

	count, err := SoapRecipeadditives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, soapRecipeadditiveDBTypes, false, soapRecipeadditivePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SoapRecipeadditive struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SoapRecipeadditive: %s", err)
	}

	count, err = SoapRecipeadditives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
