// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Recipe is an object representing the database table.
type Recipe struct {
	CreatedAt    time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt    null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	ID           string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name         string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Lipidweight  float64   `boil:"lipidweight" json:"lipidweight" toml:"lipidweight" yaml:"lipidweight"`
	Cost         float64   `boil:"cost" json:"cost" toml:"cost" yaml:"cost"`
	Note         string    `boil:"note" json:"note" toml:"note" yaml:"note"`
	AdditivesID  string    `boil:"additives_id" json:"additives_id" toml:"additives_id" yaml:"additives_id"`
	FragrancesID string    `boil:"fragrances_id" json:"fragrances_id" toml:"fragrances_id" yaml:"fragrances_id"`
	LipidsID     string    `boil:"lipids_id" json:"lipids_id" toml:"lipids_id" yaml:"lipids_id"`
	LyeID        string    `boil:"lye_id" json:"lye_id" toml:"lye_id" yaml:"lye_id"`

	R *recipeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L recipeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RecipeColumns = struct {
	CreatedAt    string
	UpdatedAt    string
	DeletedAt    string
	ID           string
	Name         string
	Lipidweight  string
	Cost         string
	Note         string
	AdditivesID  string
	FragrancesID string
	LipidsID     string
	LyeID        string
}{
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
	DeletedAt:    "deleted_at",
	ID:           "id",
	Name:         "name",
	Lipidweight:  "lipidweight",
	Cost:         "cost",
	Note:         "note",
	AdditivesID:  "additives_id",
	FragrancesID: "fragrances_id",
	LipidsID:     "lipids_id",
	LyeID:        "lye_id",
}

// Generated where

var RecipeWhere = struct {
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
	DeletedAt    whereHelpernull_Time
	ID           whereHelperstring
	Name         whereHelperstring
	Lipidweight  whereHelperfloat64
	Cost         whereHelperfloat64
	Note         whereHelperstring
	AdditivesID  whereHelperstring
	FragrancesID whereHelperstring
	LipidsID     whereHelperstring
	LyeID        whereHelperstring
}{
	CreatedAt:    whereHelpertime_Time{field: "\"recipe\".\"created_at\""},
	UpdatedAt:    whereHelpertime_Time{field: "\"recipe\".\"updated_at\""},
	DeletedAt:    whereHelpernull_Time{field: "\"recipe\".\"deleted_at\""},
	ID:           whereHelperstring{field: "\"recipe\".\"id\""},
	Name:         whereHelperstring{field: "\"recipe\".\"name\""},
	Lipidweight:  whereHelperfloat64{field: "\"recipe\".\"lipidweight\""},
	Cost:         whereHelperfloat64{field: "\"recipe\".\"cost\""},
	Note:         whereHelperstring{field: "\"recipe\".\"note\""},
	AdditivesID:  whereHelperstring{field: "\"recipe\".\"additives_id\""},
	FragrancesID: whereHelperstring{field: "\"recipe\".\"fragrances_id\""},
	LipidsID:     whereHelperstring{field: "\"recipe\".\"lipids_id\""},
	LyeID:        whereHelperstring{field: "\"recipe\".\"lye_id\""},
}

// RecipeRels is where relationship names are stored.
var RecipeRels = struct {
	Additive  string
	Fragrance string
	Lipid     string
	Lye       string
}{
	Additive:  "Additive",
	Fragrance: "Fragrance",
	Lipid:     "Lipid",
	Lye:       "Lye",
}

// recipeR is where relationships are stored.
type recipeR struct {
	Additive  *RecipeAdditive  `boil:"Additive" json:"Additive" toml:"Additive" yaml:"Additive"`
	Fragrance *RecipeFragrance `boil:"Fragrance" json:"Fragrance" toml:"Fragrance" yaml:"Fragrance"`
	Lipid     *RecipeLipid     `boil:"Lipid" json:"Lipid" toml:"Lipid" yaml:"Lipid"`
	Lye       *RecipeLye       `boil:"Lye" json:"Lye" toml:"Lye" yaml:"Lye"`
}

// NewStruct creates a new relationship struct
func (*recipeR) NewStruct() *recipeR {
	return &recipeR{}
}

// recipeL is where Load methods for each relationship are stored.
type recipeL struct{}

var (
	recipeAllColumns            = []string{"created_at", "updated_at", "deleted_at", "id", "name", "lipidweight", "cost", "note", "additives_id", "fragrances_id", "lipids_id", "lye_id"}
	recipeColumnsWithoutDefault = []string{"created_at", "updated_at", "deleted_at", "id", "name", "lipidweight", "cost", "note", "additives_id", "fragrances_id", "lipids_id", "lye_id"}
	recipeColumnsWithDefault    = []string{}
	recipePrimaryKeyColumns     = []string{"id"}
)

type (
	// RecipeSlice is an alias for a slice of pointers to Recipe.
	// This should generally be used opposed to []Recipe.
	RecipeSlice []*Recipe
	// RecipeHook is the signature for custom Recipe hook methods
	RecipeHook func(context.Context, boil.ContextExecutor, *Recipe) error

	recipeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	recipeType                 = reflect.TypeOf(&Recipe{})
	recipeMapping              = queries.MakeStructMapping(recipeType)
	recipePrimaryKeyMapping, _ = queries.BindMapping(recipeType, recipeMapping, recipePrimaryKeyColumns)
	recipeInsertCacheMut       sync.RWMutex
	recipeInsertCache          = make(map[string]insertCache)
	recipeUpdateCacheMut       sync.RWMutex
	recipeUpdateCache          = make(map[string]updateCache)
	recipeUpsertCacheMut       sync.RWMutex
	recipeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var recipeBeforeInsertHooks []RecipeHook
var recipeBeforeUpdateHooks []RecipeHook
var recipeBeforeDeleteHooks []RecipeHook
var recipeBeforeUpsertHooks []RecipeHook

var recipeAfterInsertHooks []RecipeHook
var recipeAfterSelectHooks []RecipeHook
var recipeAfterUpdateHooks []RecipeHook
var recipeAfterDeleteHooks []RecipeHook
var recipeAfterUpsertHooks []RecipeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Recipe) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Recipe) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Recipe) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Recipe) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Recipe) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Recipe) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Recipe) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Recipe) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Recipe) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRecipeHook registers your hook function for all future operations.
func AddRecipeHook(hookPoint boil.HookPoint, recipeHook RecipeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		recipeBeforeInsertHooks = append(recipeBeforeInsertHooks, recipeHook)
	case boil.BeforeUpdateHook:
		recipeBeforeUpdateHooks = append(recipeBeforeUpdateHooks, recipeHook)
	case boil.BeforeDeleteHook:
		recipeBeforeDeleteHooks = append(recipeBeforeDeleteHooks, recipeHook)
	case boil.BeforeUpsertHook:
		recipeBeforeUpsertHooks = append(recipeBeforeUpsertHooks, recipeHook)
	case boil.AfterInsertHook:
		recipeAfterInsertHooks = append(recipeAfterInsertHooks, recipeHook)
	case boil.AfterSelectHook:
		recipeAfterSelectHooks = append(recipeAfterSelectHooks, recipeHook)
	case boil.AfterUpdateHook:
		recipeAfterUpdateHooks = append(recipeAfterUpdateHooks, recipeHook)
	case boil.AfterDeleteHook:
		recipeAfterDeleteHooks = append(recipeAfterDeleteHooks, recipeHook)
	case boil.AfterUpsertHook:
		recipeAfterUpsertHooks = append(recipeAfterUpsertHooks, recipeHook)
	}
}

// One returns a single recipe record from the query.
func (q recipeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Recipe, error) {
	o := &Recipe{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for recipe")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Recipe records from the query.
func (q recipeQuery) All(ctx context.Context, exec boil.ContextExecutor) (RecipeSlice, error) {
	var o []*Recipe

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Recipe slice")
	}

	if len(recipeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Recipe records in the query.
func (q recipeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count recipe rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q recipeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if recipe exists")
	}

	return count > 0, nil
}

// Additive pointed to by the foreign key.
func (o *Recipe) Additive(mods ...qm.QueryMod) recipeAdditiveQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AdditivesID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := RecipeAdditives(queryMods...)
	queries.SetFrom(query.Query, "\"recipe_additive\"")

	return query
}

// Fragrance pointed to by the foreign key.
func (o *Recipe) Fragrance(mods ...qm.QueryMod) recipeFragranceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FragrancesID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := RecipeFragrances(queryMods...)
	queries.SetFrom(query.Query, "\"recipe_fragrance\"")

	return query
}

// Lipid pointed to by the foreign key.
func (o *Recipe) Lipid(mods ...qm.QueryMod) recipeLipidQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LipidsID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := RecipeLipids(queryMods...)
	queries.SetFrom(query.Query, "\"recipe_lipid\"")

	return query
}

// Lye pointed to by the foreign key.
func (o *Recipe) Lye(mods ...qm.QueryMod) recipeLyeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LyeID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := RecipeLyes(queryMods...)
	queries.SetFrom(query.Query, "\"recipe_lye\"")

	return query
}

// LoadAdditive allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (recipeL) LoadAdditive(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecipe interface{}, mods queries.Applicator) error {
	var slice []*Recipe
	var object *Recipe

	if singular {
		object = maybeRecipe.(*Recipe)
	} else {
		slice = *maybeRecipe.(*[]*Recipe)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &recipeR{}
		}
		args = append(args, object.AdditivesID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recipeR{}
			}

			for _, a := range args {
				if a == obj.AdditivesID {
					continue Outer
				}
			}

			args = append(args, obj.AdditivesID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`recipe_additive`),
		qm.WhereIn(`recipe_additive.id in ?`, args...),
		qmhelper.WhereIsNull(`recipe_additive.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RecipeAdditive")
	}

	var resultSlice []*RecipeAdditive
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RecipeAdditive")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for recipe_additive")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for recipe_additive")
	}

	if len(recipeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Additive = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AdditivesID == foreign.ID {
				local.R.Additive = foreign
				break
			}
		}
	}

	return nil
}

// LoadFragrance allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (recipeL) LoadFragrance(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecipe interface{}, mods queries.Applicator) error {
	var slice []*Recipe
	var object *Recipe

	if singular {
		object = maybeRecipe.(*Recipe)
	} else {
		slice = *maybeRecipe.(*[]*Recipe)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &recipeR{}
		}
		args = append(args, object.FragrancesID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recipeR{}
			}

			for _, a := range args {
				if a == obj.FragrancesID {
					continue Outer
				}
			}

			args = append(args, obj.FragrancesID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`recipe_fragrance`),
		qm.WhereIn(`recipe_fragrance.id in ?`, args...),
		qmhelper.WhereIsNull(`recipe_fragrance.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RecipeFragrance")
	}

	var resultSlice []*RecipeFragrance
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RecipeFragrance")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for recipe_fragrance")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for recipe_fragrance")
	}

	if len(recipeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Fragrance = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FragrancesID == foreign.ID {
				local.R.Fragrance = foreign
				break
			}
		}
	}

	return nil
}

// LoadLipid allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (recipeL) LoadLipid(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecipe interface{}, mods queries.Applicator) error {
	var slice []*Recipe
	var object *Recipe

	if singular {
		object = maybeRecipe.(*Recipe)
	} else {
		slice = *maybeRecipe.(*[]*Recipe)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &recipeR{}
		}
		args = append(args, object.LipidsID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recipeR{}
			}

			for _, a := range args {
				if a == obj.LipidsID {
					continue Outer
				}
			}

			args = append(args, obj.LipidsID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`recipe_lipid`),
		qm.WhereIn(`recipe_lipid.id in ?`, args...),
		qmhelper.WhereIsNull(`recipe_lipid.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RecipeLipid")
	}

	var resultSlice []*RecipeLipid
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RecipeLipid")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for recipe_lipid")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for recipe_lipid")
	}

	if len(recipeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Lipid = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LipidsID == foreign.ID {
				local.R.Lipid = foreign
				break
			}
		}
	}

	return nil
}

// LoadLye allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (recipeL) LoadLye(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecipe interface{}, mods queries.Applicator) error {
	var slice []*Recipe
	var object *Recipe

	if singular {
		object = maybeRecipe.(*Recipe)
	} else {
		slice = *maybeRecipe.(*[]*Recipe)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &recipeR{}
		}
		args = append(args, object.LyeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recipeR{}
			}

			for _, a := range args {
				if a == obj.LyeID {
					continue Outer
				}
			}

			args = append(args, obj.LyeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`recipe_lye`),
		qm.WhereIn(`recipe_lye.id in ?`, args...),
		qmhelper.WhereIsNull(`recipe_lye.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RecipeLye")
	}

	var resultSlice []*RecipeLye
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RecipeLye")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for recipe_lye")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for recipe_lye")
	}

	if len(recipeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Lye = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LyeID == foreign.ID {
				local.R.Lye = foreign
				break
			}
		}
	}

	return nil
}

// SetAdditive of the recipe to the related item.
// Sets o.R.Additive to related.
// Adds o to related.R.AdditiveRecipes.
func (o *Recipe) SetAdditive(ctx context.Context, exec boil.ContextExecutor, insert bool, related *RecipeAdditive) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"recipe\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"additives_id"}),
		strmangle.WhereClause("\"", "\"", 2, recipePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AdditivesID = related.ID
	if o.R == nil {
		o.R = &recipeR{
			Additive: related,
		}
	} else {
		o.R.Additive = related
	}

	if related.R == nil {
		related.R = &recipeAdditiveR{
			AdditiveRecipes: RecipeSlice{o},
		}
	} else {
		related.R.AdditiveRecipes = append(related.R.AdditiveRecipes, o)
	}

	return nil
}

// SetFragrance of the recipe to the related item.
// Sets o.R.Fragrance to related.
// Adds o to related.R.FragranceRecipes.
func (o *Recipe) SetFragrance(ctx context.Context, exec boil.ContextExecutor, insert bool, related *RecipeFragrance) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"recipe\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"fragrances_id"}),
		strmangle.WhereClause("\"", "\"", 2, recipePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FragrancesID = related.ID
	if o.R == nil {
		o.R = &recipeR{
			Fragrance: related,
		}
	} else {
		o.R.Fragrance = related
	}

	if related.R == nil {
		related.R = &recipeFragranceR{
			FragranceRecipes: RecipeSlice{o},
		}
	} else {
		related.R.FragranceRecipes = append(related.R.FragranceRecipes, o)
	}

	return nil
}

// SetLipid of the recipe to the related item.
// Sets o.R.Lipid to related.
// Adds o to related.R.LipidRecipes.
func (o *Recipe) SetLipid(ctx context.Context, exec boil.ContextExecutor, insert bool, related *RecipeLipid) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"recipe\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"lipids_id"}),
		strmangle.WhereClause("\"", "\"", 2, recipePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LipidsID = related.ID
	if o.R == nil {
		o.R = &recipeR{
			Lipid: related,
		}
	} else {
		o.R.Lipid = related
	}

	if related.R == nil {
		related.R = &recipeLipidR{
			LipidRecipes: RecipeSlice{o},
		}
	} else {
		related.R.LipidRecipes = append(related.R.LipidRecipes, o)
	}

	return nil
}

// SetLye of the recipe to the related item.
// Sets o.R.Lye to related.
// Adds o to related.R.LyeRecipes.
func (o *Recipe) SetLye(ctx context.Context, exec boil.ContextExecutor, insert bool, related *RecipeLye) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"recipe\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"lye_id"}),
		strmangle.WhereClause("\"", "\"", 2, recipePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LyeID = related.ID
	if o.R == nil {
		o.R = &recipeR{
			Lye: related,
		}
	} else {
		o.R.Lye = related
	}

	if related.R == nil {
		related.R = &recipeLyeR{
			LyeRecipes: RecipeSlice{o},
		}
	} else {
		related.R.LyeRecipes = append(related.R.LyeRecipes, o)
	}

	return nil
}

// Recipes retrieves all the records using an executor.
func Recipes(mods ...qm.QueryMod) recipeQuery {
	mods = append(mods, qm.From("\"recipe\""), qmhelper.WhereIsNull("\"recipe\".\"deleted_at\""))
	return recipeQuery{NewQuery(mods...)}
}

// FindRecipe retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRecipe(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Recipe, error) {
	recipeObj := &Recipe{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"recipe\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, recipeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from recipe")
	}

	return recipeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Recipe) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no recipe provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recipeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	recipeInsertCacheMut.RLock()
	cache, cached := recipeInsertCache[key]
	recipeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			recipeAllColumns,
			recipeColumnsWithDefault,
			recipeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(recipeType, recipeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(recipeType, recipeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"recipe\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"recipe\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into recipe")
	}

	if !cached {
		recipeInsertCacheMut.Lock()
		recipeInsertCache[key] = cache
		recipeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Recipe.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Recipe) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	recipeUpdateCacheMut.RLock()
	cache, cached := recipeUpdateCache[key]
	recipeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			recipeAllColumns,
			recipePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update recipe, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"recipe\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, recipePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(recipeType, recipeMapping, append(wl, recipePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update recipe row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for recipe")
	}

	if !cached {
		recipeUpdateCacheMut.Lock()
		recipeUpdateCache[key] = cache
		recipeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q recipeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for recipe")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for recipe")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RecipeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recipePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"recipe\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, recipePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in recipe slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all recipe")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Recipe) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no recipe provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recipeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	recipeUpsertCacheMut.RLock()
	cache, cached := recipeUpsertCache[key]
	recipeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			recipeAllColumns,
			recipeColumnsWithDefault,
			recipeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			recipeAllColumns,
			recipePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert recipe, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(recipePrimaryKeyColumns))
			copy(conflict, recipePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"recipe\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(recipeType, recipeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(recipeType, recipeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert recipe")
	}

	if !cached {
		recipeUpsertCacheMut.Lock()
		recipeUpsertCache[key] = cache
		recipeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Recipe record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Recipe) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Recipe provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), recipePrimaryKeyMapping)
		sql = "DELETE FROM \"recipe\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"recipe\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(recipeType, recipeMapping, append(wl, recipePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from recipe")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for recipe")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q recipeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no recipeQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from recipe")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for recipe")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RecipeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(recipeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recipePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"recipe\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, recipePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recipePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"recipe\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, recipePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from recipe slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for recipe")
	}

	if len(recipeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Recipe) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRecipe(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RecipeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RecipeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recipePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"recipe\".* FROM \"recipe\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, recipePrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RecipeSlice")
	}

	*o = slice

	return nil
}

// RecipeExists checks if the Recipe row exists.
func RecipeExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"recipe\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if recipe exists")
	}

	return exists, nil
}
