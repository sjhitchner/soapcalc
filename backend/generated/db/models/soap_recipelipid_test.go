// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSoapRecipelipids(t *testing.T) {
	t.Parallel()

	query := SoapRecipelipids()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSoapRecipelipidsSoftDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipelipid{}
	if err = randomize.Struct(seed, o, soapRecipelipidDBTypes, true, soapRecipelipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapRecipelipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapRecipelipidsQuerySoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipelipid{}
	if err = randomize.Struct(seed, o, soapRecipelipidDBTypes, true, soapRecipelipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SoapRecipelipids().DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapRecipelipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapRecipelipidsSliceSoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipelipid{}
	if err = randomize.Struct(seed, o, soapRecipelipidDBTypes, true, soapRecipelipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SoapRecipelipidSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapRecipelipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapRecipelipidsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipelipid{}
	if err = randomize.Struct(seed, o, soapRecipelipidDBTypes, true, soapRecipelipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapRecipelipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapRecipelipidsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipelipid{}
	if err = randomize.Struct(seed, o, soapRecipelipidDBTypes, true, soapRecipelipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SoapRecipelipids().DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapRecipelipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapRecipelipidsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipelipid{}
	if err = randomize.Struct(seed, o, soapRecipelipidDBTypes, true, soapRecipelipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SoapRecipelipidSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapRecipelipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapRecipelipidsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipelipid{}
	if err = randomize.Struct(seed, o, soapRecipelipidDBTypes, true, soapRecipelipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SoapRecipelipidExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if SoapRecipelipid exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SoapRecipelipidExists to return true, but got false.")
	}
}

func testSoapRecipelipidsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipelipid{}
	if err = randomize.Struct(seed, o, soapRecipelipidDBTypes, true, soapRecipelipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	soapRecipelipidFound, err := FindSoapRecipelipid(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if soapRecipelipidFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSoapRecipelipidsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipelipid{}
	if err = randomize.Struct(seed, o, soapRecipelipidDBTypes, true, soapRecipelipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SoapRecipelipids().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSoapRecipelipidsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipelipid{}
	if err = randomize.Struct(seed, o, soapRecipelipidDBTypes, true, soapRecipelipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SoapRecipelipids().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSoapRecipelipidsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	soapRecipelipidOne := &SoapRecipelipid{}
	soapRecipelipidTwo := &SoapRecipelipid{}
	if err = randomize.Struct(seed, soapRecipelipidOne, soapRecipelipidDBTypes, false, soapRecipelipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelipid struct: %s", err)
	}
	if err = randomize.Struct(seed, soapRecipelipidTwo, soapRecipelipidDBTypes, false, soapRecipelipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = soapRecipelipidOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = soapRecipelipidTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SoapRecipelipids().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSoapRecipelipidsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	soapRecipelipidOne := &SoapRecipelipid{}
	soapRecipelipidTwo := &SoapRecipelipid{}
	if err = randomize.Struct(seed, soapRecipelipidOne, soapRecipelipidDBTypes, false, soapRecipelipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelipid struct: %s", err)
	}
	if err = randomize.Struct(seed, soapRecipelipidTwo, soapRecipelipidDBTypes, false, soapRecipelipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = soapRecipelipidOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = soapRecipelipidTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapRecipelipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func soapRecipelipidBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapRecipelipid) error {
	*o = SoapRecipelipid{}
	return nil
}

func soapRecipelipidAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapRecipelipid) error {
	*o = SoapRecipelipid{}
	return nil
}

func soapRecipelipidAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *SoapRecipelipid) error {
	*o = SoapRecipelipid{}
	return nil
}

func soapRecipelipidBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SoapRecipelipid) error {
	*o = SoapRecipelipid{}
	return nil
}

func soapRecipelipidAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SoapRecipelipid) error {
	*o = SoapRecipelipid{}
	return nil
}

func soapRecipelipidBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SoapRecipelipid) error {
	*o = SoapRecipelipid{}
	return nil
}

func soapRecipelipidAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SoapRecipelipid) error {
	*o = SoapRecipelipid{}
	return nil
}

func soapRecipelipidBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapRecipelipid) error {
	*o = SoapRecipelipid{}
	return nil
}

func soapRecipelipidAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapRecipelipid) error {
	*o = SoapRecipelipid{}
	return nil
}

func testSoapRecipelipidsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &SoapRecipelipid{}
	o := &SoapRecipelipid{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, soapRecipelipidDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SoapRecipelipid object: %s", err)
	}

	AddSoapRecipelipidHook(boil.BeforeInsertHook, soapRecipelipidBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	soapRecipelipidBeforeInsertHooks = []SoapRecipelipidHook{}

	AddSoapRecipelipidHook(boil.AfterInsertHook, soapRecipelipidAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	soapRecipelipidAfterInsertHooks = []SoapRecipelipidHook{}

	AddSoapRecipelipidHook(boil.AfterSelectHook, soapRecipelipidAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	soapRecipelipidAfterSelectHooks = []SoapRecipelipidHook{}

	AddSoapRecipelipidHook(boil.BeforeUpdateHook, soapRecipelipidBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	soapRecipelipidBeforeUpdateHooks = []SoapRecipelipidHook{}

	AddSoapRecipelipidHook(boil.AfterUpdateHook, soapRecipelipidAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	soapRecipelipidAfterUpdateHooks = []SoapRecipelipidHook{}

	AddSoapRecipelipidHook(boil.BeforeDeleteHook, soapRecipelipidBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	soapRecipelipidBeforeDeleteHooks = []SoapRecipelipidHook{}

	AddSoapRecipelipidHook(boil.AfterDeleteHook, soapRecipelipidAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	soapRecipelipidAfterDeleteHooks = []SoapRecipelipidHook{}

	AddSoapRecipelipidHook(boil.BeforeUpsertHook, soapRecipelipidBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	soapRecipelipidBeforeUpsertHooks = []SoapRecipelipidHook{}

	AddSoapRecipelipidHook(boil.AfterUpsertHook, soapRecipelipidAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	soapRecipelipidAfterUpsertHooks = []SoapRecipelipidHook{}
}

func testSoapRecipelipidsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipelipid{}
	if err = randomize.Struct(seed, o, soapRecipelipidDBTypes, true, soapRecipelipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapRecipelipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSoapRecipelipidsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipelipid{}
	if err = randomize.Struct(seed, o, soapRecipelipidDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SoapRecipelipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(soapRecipelipidColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := SoapRecipelipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSoapRecipelipidToManyLipidSoapRecipes(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SoapRecipelipid
	var b, c SoapRecipe

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soapRecipelipidDBTypes, true, soapRecipelipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelipid struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, soapRecipeDBTypes, false, soapRecipeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, soapRecipeDBTypes, false, soapRecipeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.LipidsID = a.ID
	c.LipidsID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.LipidSoapRecipes().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.LipidsID == b.LipidsID {
			bFound = true
		}
		if v.LipidsID == c.LipidsID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SoapRecipelipidSlice{&a}
	if err = a.L.LoadLipidSoapRecipes(ctx, tx, false, (*[]*SoapRecipelipid)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.LipidSoapRecipes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.LipidSoapRecipes = nil
	if err = a.L.LoadLipidSoapRecipes(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.LipidSoapRecipes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSoapRecipelipidToManyAddOpLipidSoapRecipes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SoapRecipelipid
	var b, c, d, e SoapRecipe

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soapRecipelipidDBTypes, false, strmangle.SetComplement(soapRecipelipidPrimaryKeyColumns, soapRecipelipidColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SoapRecipe{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, soapRecipeDBTypes, false, strmangle.SetComplement(soapRecipePrimaryKeyColumns, soapRecipeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SoapRecipe{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddLipidSoapRecipes(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.LipidsID {
			t.Error("foreign key was wrong value", a.ID, first.LipidsID)
		}
		if a.ID != second.LipidsID {
			t.Error("foreign key was wrong value", a.ID, second.LipidsID)
		}

		if first.R.Lipid != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Lipid != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.LipidSoapRecipes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.LipidSoapRecipes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.LipidSoapRecipes().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSoapRecipelipidToOneSoapLipidUsingLipid(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SoapRecipelipid
	var foreign SoapLipid

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, soapRecipelipidDBTypes, false, soapRecipelipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelipid struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, soapLipidDBTypes, false, soapLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipid struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.LipidID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Lipid().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SoapRecipelipidSlice{&local}
	if err = local.L.LoadLipid(ctx, tx, false, (*[]*SoapRecipelipid)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Lipid == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Lipid = nil
	if err = local.L.LoadLipid(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Lipid == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSoapRecipelipidToOneSetOpSoapLipidUsingLipid(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SoapRecipelipid
	var b, c SoapLipid

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soapRecipelipidDBTypes, false, strmangle.SetComplement(soapRecipelipidPrimaryKeyColumns, soapRecipelipidColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, soapLipidDBTypes, false, strmangle.SetComplement(soapLipidPrimaryKeyColumns, soapLipidColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, soapLipidDBTypes, false, strmangle.SetComplement(soapLipidPrimaryKeyColumns, soapLipidColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SoapLipid{&b, &c} {
		err = a.SetLipid(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Lipid != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.LipidSoapRecipelipids[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.LipidID != x.ID {
			t.Error("foreign key was wrong value", a.LipidID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.LipidID))
		reflect.Indirect(reflect.ValueOf(&a.LipidID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.LipidID != x.ID {
			t.Error("foreign key was wrong value", a.LipidID, x.ID)
		}
	}
}

func testSoapRecipelipidsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipelipid{}
	if err = randomize.Struct(seed, o, soapRecipelipidDBTypes, true, soapRecipelipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSoapRecipelipidsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipelipid{}
	if err = randomize.Struct(seed, o, soapRecipelipidDBTypes, true, soapRecipelipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SoapRecipelipidSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSoapRecipelipidsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipelipid{}
	if err = randomize.Struct(seed, o, soapRecipelipidDBTypes, true, soapRecipelipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SoapRecipelipids().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	soapRecipelipidDBTypes = map[string]string{`CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `ID`: `character varying`, `Percentage`: `double precision`, `Weight`: `double precision`, `Cost`: `double precision`, `LipidID`: `integer`}
	_                      = bytes.MinRead
)

func testSoapRecipelipidsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(soapRecipelipidPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(soapRecipelipidAllColumns) == len(soapRecipelipidPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipelipid{}
	if err = randomize.Struct(seed, o, soapRecipelipidDBTypes, true, soapRecipelipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapRecipelipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, soapRecipelipidDBTypes, true, soapRecipelipidPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelipid struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSoapRecipelipidsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(soapRecipelipidAllColumns) == len(soapRecipelipidPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipelipid{}
	if err = randomize.Struct(seed, o, soapRecipelipidDBTypes, true, soapRecipelipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapRecipelipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, soapRecipelipidDBTypes, true, soapRecipelipidPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelipid struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(soapRecipelipidAllColumns, soapRecipelipidPrimaryKeyColumns) {
		fields = soapRecipelipidAllColumns
	} else {
		fields = strmangle.SetComplement(
			soapRecipelipidAllColumns,
			soapRecipelipidPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SoapRecipelipidSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSoapRecipelipidsUpsert(t *testing.T) {
	t.Parallel()

	if len(soapRecipelipidAllColumns) == len(soapRecipelipidPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SoapRecipelipid{}
	if err = randomize.Struct(seed, &o, soapRecipelipidDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SoapRecipelipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SoapRecipelipid: %s", err)
	}

	count, err := SoapRecipelipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, soapRecipelipidDBTypes, false, soapRecipelipidPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelipid struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SoapRecipelipid: %s", err)
	}

	count, err = SoapRecipelipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
