// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSoapLyeinventories(t *testing.T) {
	t.Parallel()

	query := SoapLyeinventories()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSoapLyeinventoriesSoftDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLyeinventory{}
	if err = randomize.Struct(seed, o, soapLyeinventoryDBTypes, true, soapLyeinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLyeinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapLyeinventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapLyeinventoriesQuerySoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLyeinventory{}
	if err = randomize.Struct(seed, o, soapLyeinventoryDBTypes, true, soapLyeinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLyeinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SoapLyeinventories().DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapLyeinventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapLyeinventoriesSliceSoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLyeinventory{}
	if err = randomize.Struct(seed, o, soapLyeinventoryDBTypes, true, soapLyeinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLyeinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SoapLyeinventorySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapLyeinventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapLyeinventoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLyeinventory{}
	if err = randomize.Struct(seed, o, soapLyeinventoryDBTypes, true, soapLyeinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLyeinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapLyeinventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapLyeinventoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLyeinventory{}
	if err = randomize.Struct(seed, o, soapLyeinventoryDBTypes, true, soapLyeinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLyeinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SoapLyeinventories().DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapLyeinventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapLyeinventoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLyeinventory{}
	if err = randomize.Struct(seed, o, soapLyeinventoryDBTypes, true, soapLyeinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLyeinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SoapLyeinventorySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapLyeinventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapLyeinventoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLyeinventory{}
	if err = randomize.Struct(seed, o, soapLyeinventoryDBTypes, true, soapLyeinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLyeinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SoapLyeinventoryExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if SoapLyeinventory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SoapLyeinventoryExists to return true, but got false.")
	}
}

func testSoapLyeinventoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLyeinventory{}
	if err = randomize.Struct(seed, o, soapLyeinventoryDBTypes, true, soapLyeinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLyeinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	soapLyeinventoryFound, err := FindSoapLyeinventory(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if soapLyeinventoryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSoapLyeinventoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLyeinventory{}
	if err = randomize.Struct(seed, o, soapLyeinventoryDBTypes, true, soapLyeinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLyeinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SoapLyeinventories().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSoapLyeinventoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLyeinventory{}
	if err = randomize.Struct(seed, o, soapLyeinventoryDBTypes, true, soapLyeinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLyeinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SoapLyeinventories().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSoapLyeinventoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	soapLyeinventoryOne := &SoapLyeinventory{}
	soapLyeinventoryTwo := &SoapLyeinventory{}
	if err = randomize.Struct(seed, soapLyeinventoryOne, soapLyeinventoryDBTypes, false, soapLyeinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLyeinventory struct: %s", err)
	}
	if err = randomize.Struct(seed, soapLyeinventoryTwo, soapLyeinventoryDBTypes, false, soapLyeinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLyeinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = soapLyeinventoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = soapLyeinventoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SoapLyeinventories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSoapLyeinventoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	soapLyeinventoryOne := &SoapLyeinventory{}
	soapLyeinventoryTwo := &SoapLyeinventory{}
	if err = randomize.Struct(seed, soapLyeinventoryOne, soapLyeinventoryDBTypes, false, soapLyeinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLyeinventory struct: %s", err)
	}
	if err = randomize.Struct(seed, soapLyeinventoryTwo, soapLyeinventoryDBTypes, false, soapLyeinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLyeinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = soapLyeinventoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = soapLyeinventoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapLyeinventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func soapLyeinventoryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapLyeinventory) error {
	*o = SoapLyeinventory{}
	return nil
}

func soapLyeinventoryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapLyeinventory) error {
	*o = SoapLyeinventory{}
	return nil
}

func soapLyeinventoryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *SoapLyeinventory) error {
	*o = SoapLyeinventory{}
	return nil
}

func soapLyeinventoryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SoapLyeinventory) error {
	*o = SoapLyeinventory{}
	return nil
}

func soapLyeinventoryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SoapLyeinventory) error {
	*o = SoapLyeinventory{}
	return nil
}

func soapLyeinventoryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SoapLyeinventory) error {
	*o = SoapLyeinventory{}
	return nil
}

func soapLyeinventoryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SoapLyeinventory) error {
	*o = SoapLyeinventory{}
	return nil
}

func soapLyeinventoryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapLyeinventory) error {
	*o = SoapLyeinventory{}
	return nil
}

func soapLyeinventoryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapLyeinventory) error {
	*o = SoapLyeinventory{}
	return nil
}

func testSoapLyeinventoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &SoapLyeinventory{}
	o := &SoapLyeinventory{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, soapLyeinventoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SoapLyeinventory object: %s", err)
	}

	AddSoapLyeinventoryHook(boil.BeforeInsertHook, soapLyeinventoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	soapLyeinventoryBeforeInsertHooks = []SoapLyeinventoryHook{}

	AddSoapLyeinventoryHook(boil.AfterInsertHook, soapLyeinventoryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	soapLyeinventoryAfterInsertHooks = []SoapLyeinventoryHook{}

	AddSoapLyeinventoryHook(boil.AfterSelectHook, soapLyeinventoryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	soapLyeinventoryAfterSelectHooks = []SoapLyeinventoryHook{}

	AddSoapLyeinventoryHook(boil.BeforeUpdateHook, soapLyeinventoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	soapLyeinventoryBeforeUpdateHooks = []SoapLyeinventoryHook{}

	AddSoapLyeinventoryHook(boil.AfterUpdateHook, soapLyeinventoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	soapLyeinventoryAfterUpdateHooks = []SoapLyeinventoryHook{}

	AddSoapLyeinventoryHook(boil.BeforeDeleteHook, soapLyeinventoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	soapLyeinventoryBeforeDeleteHooks = []SoapLyeinventoryHook{}

	AddSoapLyeinventoryHook(boil.AfterDeleteHook, soapLyeinventoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	soapLyeinventoryAfterDeleteHooks = []SoapLyeinventoryHook{}

	AddSoapLyeinventoryHook(boil.BeforeUpsertHook, soapLyeinventoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	soapLyeinventoryBeforeUpsertHooks = []SoapLyeinventoryHook{}

	AddSoapLyeinventoryHook(boil.AfterUpsertHook, soapLyeinventoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	soapLyeinventoryAfterUpsertHooks = []SoapLyeinventoryHook{}
}

func testSoapLyeinventoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLyeinventory{}
	if err = randomize.Struct(seed, o, soapLyeinventoryDBTypes, true, soapLyeinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLyeinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapLyeinventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSoapLyeinventoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLyeinventory{}
	if err = randomize.Struct(seed, o, soapLyeinventoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SoapLyeinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(soapLyeinventoryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := SoapLyeinventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSoapLyeinventoryToManyLyeSoapLyeinventories(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SoapLyeinventory
	var b, c SoapLyeinventory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soapLyeinventoryDBTypes, true, soapLyeinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLyeinventory struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, soapLyeinventoryDBTypes, false, soapLyeinventoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, soapLyeinventoryDBTypes, false, soapLyeinventoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.LyeID = a.ID
	c.LyeID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.LyeSoapLyeinventories().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.LyeID == b.LyeID {
			bFound = true
		}
		if v.LyeID == c.LyeID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SoapLyeinventorySlice{&a}
	if err = a.L.LoadLyeSoapLyeinventories(ctx, tx, false, (*[]*SoapLyeinventory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.LyeSoapLyeinventories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.LyeSoapLyeinventories = nil
	if err = a.L.LoadLyeSoapLyeinventories(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.LyeSoapLyeinventories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSoapLyeinventoryToManyAddOpLyeSoapLyeinventories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SoapLyeinventory
	var b, c, d, e SoapLyeinventory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soapLyeinventoryDBTypes, false, strmangle.SetComplement(soapLyeinventoryPrimaryKeyColumns, soapLyeinventoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SoapLyeinventory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, soapLyeinventoryDBTypes, false, strmangle.SetComplement(soapLyeinventoryPrimaryKeyColumns, soapLyeinventoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SoapLyeinventory{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddLyeSoapLyeinventories(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.LyeID {
			t.Error("foreign key was wrong value", a.ID, first.LyeID)
		}
		if a.ID != second.LyeID {
			t.Error("foreign key was wrong value", a.ID, second.LyeID)
		}

		if first.R.Lye != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Lye != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.LyeSoapLyeinventories[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.LyeSoapLyeinventories[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.LyeSoapLyeinventories().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSoapLyeinventoryToOneSoapLyeinventoryUsingLye(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SoapLyeinventory
	var foreign SoapLyeinventory

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, soapLyeinventoryDBTypes, false, soapLyeinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLyeinventory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, soapLyeinventoryDBTypes, false, soapLyeinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLyeinventory struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.LyeID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Lye().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SoapLyeinventorySlice{&local}
	if err = local.L.LoadLye(ctx, tx, false, (*[]*SoapLyeinventory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Lye == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Lye = nil
	if err = local.L.LoadLye(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Lye == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSoapLyeinventoryToOneSoapSupplierUsingSupplier(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SoapLyeinventory
	var foreign SoapSupplier

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, soapLyeinventoryDBTypes, false, soapLyeinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLyeinventory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, soapSupplierDBTypes, false, soapSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapSupplier struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.SupplierID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Supplier().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SoapLyeinventorySlice{&local}
	if err = local.L.LoadSupplier(ctx, tx, false, (*[]*SoapLyeinventory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Supplier == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Supplier = nil
	if err = local.L.LoadSupplier(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Supplier == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSoapLyeinventoryToOneSetOpSoapLyeinventoryUsingLye(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SoapLyeinventory
	var b, c SoapLyeinventory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soapLyeinventoryDBTypes, false, strmangle.SetComplement(soapLyeinventoryPrimaryKeyColumns, soapLyeinventoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, soapLyeinventoryDBTypes, false, strmangle.SetComplement(soapLyeinventoryPrimaryKeyColumns, soapLyeinventoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, soapLyeinventoryDBTypes, false, strmangle.SetComplement(soapLyeinventoryPrimaryKeyColumns, soapLyeinventoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SoapLyeinventory{&b, &c} {
		err = a.SetLye(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Lye != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.LyeSoapLyeinventories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.LyeID != x.ID {
			t.Error("foreign key was wrong value", a.LyeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.LyeID))
		reflect.Indirect(reflect.ValueOf(&a.LyeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.LyeID != x.ID {
			t.Error("foreign key was wrong value", a.LyeID, x.ID)
		}
	}
}
func testSoapLyeinventoryToOneSetOpSoapSupplierUsingSupplier(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SoapLyeinventory
	var b, c SoapSupplier

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soapLyeinventoryDBTypes, false, strmangle.SetComplement(soapLyeinventoryPrimaryKeyColumns, soapLyeinventoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, soapSupplierDBTypes, false, strmangle.SetComplement(soapSupplierPrimaryKeyColumns, soapSupplierColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, soapSupplierDBTypes, false, strmangle.SetComplement(soapSupplierPrimaryKeyColumns, soapSupplierColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SoapSupplier{&b, &c} {
		err = a.SetSupplier(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Supplier != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SupplierSoapLyeinventories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SupplierID != x.ID {
			t.Error("foreign key was wrong value", a.SupplierID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SupplierID))
		reflect.Indirect(reflect.ValueOf(&a.SupplierID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SupplierID != x.ID {
			t.Error("foreign key was wrong value", a.SupplierID, x.ID)
		}
	}
}

func testSoapLyeinventoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLyeinventory{}
	if err = randomize.Struct(seed, o, soapLyeinventoryDBTypes, true, soapLyeinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLyeinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSoapLyeinventoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLyeinventory{}
	if err = randomize.Struct(seed, o, soapLyeinventoryDBTypes, true, soapLyeinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLyeinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SoapLyeinventorySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSoapLyeinventoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLyeinventory{}
	if err = randomize.Struct(seed, o, soapLyeinventoryDBTypes, true, soapLyeinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLyeinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SoapLyeinventories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	soapLyeinventoryDBTypes = map[string]string{`ID`: `integer`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `PurchaseDate`: `timestamp with time zone`, `ExpiryDate`: `timestamp with time zone`, `Cost`: `double precision`, `Weight`: `double precision`, `LyeID`: `integer`, `SupplierID`: `integer`}
	_                       = bytes.MinRead
)

func testSoapLyeinventoriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(soapLyeinventoryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(soapLyeinventoryAllColumns) == len(soapLyeinventoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SoapLyeinventory{}
	if err = randomize.Struct(seed, o, soapLyeinventoryDBTypes, true, soapLyeinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLyeinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapLyeinventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, soapLyeinventoryDBTypes, true, soapLyeinventoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SoapLyeinventory struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSoapLyeinventoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(soapLyeinventoryAllColumns) == len(soapLyeinventoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SoapLyeinventory{}
	if err = randomize.Struct(seed, o, soapLyeinventoryDBTypes, true, soapLyeinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLyeinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapLyeinventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, soapLyeinventoryDBTypes, true, soapLyeinventoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SoapLyeinventory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(soapLyeinventoryAllColumns, soapLyeinventoryPrimaryKeyColumns) {
		fields = soapLyeinventoryAllColumns
	} else {
		fields = strmangle.SetComplement(
			soapLyeinventoryAllColumns,
			soapLyeinventoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SoapLyeinventorySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSoapLyeinventoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(soapLyeinventoryAllColumns) == len(soapLyeinventoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SoapLyeinventory{}
	if err = randomize.Struct(seed, &o, soapLyeinventoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SoapLyeinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SoapLyeinventory: %s", err)
	}

	count, err := SoapLyeinventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, soapLyeinventoryDBTypes, false, soapLyeinventoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SoapLyeinventory struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SoapLyeinventory: %s", err)
	}

	count, err = SoapLyeinventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
