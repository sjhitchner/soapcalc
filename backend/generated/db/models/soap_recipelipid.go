// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SoapRecipelipid is an object representing the database table.
type SoapRecipelipid struct {
	CreatedAt  time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt  time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt  null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	ID         string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Percentage float64   `boil:"percentage" json:"percentage" toml:"percentage" yaml:"percentage"`
	Weight     float64   `boil:"weight" json:"weight" toml:"weight" yaml:"weight"`
	Cost       float64   `boil:"cost" json:"cost" toml:"cost" yaml:"cost"`
	LipidID    int       `boil:"lipid_id" json:"lipid_id" toml:"lipid_id" yaml:"lipid_id"`

	R *soapRecipelipidR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L soapRecipelipidL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SoapRecipelipidColumns = struct {
	CreatedAt  string
	UpdatedAt  string
	DeletedAt  string
	ID         string
	Percentage string
	Weight     string
	Cost       string
	LipidID    string
}{
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
	DeletedAt:  "deleted_at",
	ID:         "id",
	Percentage: "percentage",
	Weight:     "weight",
	Cost:       "cost",
	LipidID:    "lipid_id",
}

// Generated where

var SoapRecipelipidWhere = struct {
	CreatedAt  whereHelpertime_Time
	UpdatedAt  whereHelpertime_Time
	DeletedAt  whereHelpernull_Time
	ID         whereHelperstring
	Percentage whereHelperfloat64
	Weight     whereHelperfloat64
	Cost       whereHelperfloat64
	LipidID    whereHelperint
}{
	CreatedAt:  whereHelpertime_Time{field: "\"soap_recipelipid\".\"created_at\""},
	UpdatedAt:  whereHelpertime_Time{field: "\"soap_recipelipid\".\"updated_at\""},
	DeletedAt:  whereHelpernull_Time{field: "\"soap_recipelipid\".\"deleted_at\""},
	ID:         whereHelperstring{field: "\"soap_recipelipid\".\"id\""},
	Percentage: whereHelperfloat64{field: "\"soap_recipelipid\".\"percentage\""},
	Weight:     whereHelperfloat64{field: "\"soap_recipelipid\".\"weight\""},
	Cost:       whereHelperfloat64{field: "\"soap_recipelipid\".\"cost\""},
	LipidID:    whereHelperint{field: "\"soap_recipelipid\".\"lipid_id\""},
}

// SoapRecipelipidRels is where relationship names are stored.
var SoapRecipelipidRels = struct {
	Lipid            string
	LipidSoapRecipes string
}{
	Lipid:            "Lipid",
	LipidSoapRecipes: "LipidSoapRecipes",
}

// soapRecipelipidR is where relationships are stored.
type soapRecipelipidR struct {
	Lipid            *SoapLipid      `boil:"Lipid" json:"Lipid" toml:"Lipid" yaml:"Lipid"`
	LipidSoapRecipes SoapRecipeSlice `boil:"LipidSoapRecipes" json:"LipidSoapRecipes" toml:"LipidSoapRecipes" yaml:"LipidSoapRecipes"`
}

// NewStruct creates a new relationship struct
func (*soapRecipelipidR) NewStruct() *soapRecipelipidR {
	return &soapRecipelipidR{}
}

// soapRecipelipidL is where Load methods for each relationship are stored.
type soapRecipelipidL struct{}

var (
	soapRecipelipidAllColumns            = []string{"created_at", "updated_at", "deleted_at", "id", "percentage", "weight", "cost", "lipid_id"}
	soapRecipelipidColumnsWithoutDefault = []string{"created_at", "updated_at", "deleted_at", "id", "percentage", "weight", "cost", "lipid_id"}
	soapRecipelipidColumnsWithDefault    = []string{}
	soapRecipelipidPrimaryKeyColumns     = []string{"id"}
)

type (
	// SoapRecipelipidSlice is an alias for a slice of pointers to SoapRecipelipid.
	// This should generally be used opposed to []SoapRecipelipid.
	SoapRecipelipidSlice []*SoapRecipelipid
	// SoapRecipelipidHook is the signature for custom SoapRecipelipid hook methods
	SoapRecipelipidHook func(context.Context, boil.ContextExecutor, *SoapRecipelipid) error

	soapRecipelipidQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	soapRecipelipidType                 = reflect.TypeOf(&SoapRecipelipid{})
	soapRecipelipidMapping              = queries.MakeStructMapping(soapRecipelipidType)
	soapRecipelipidPrimaryKeyMapping, _ = queries.BindMapping(soapRecipelipidType, soapRecipelipidMapping, soapRecipelipidPrimaryKeyColumns)
	soapRecipelipidInsertCacheMut       sync.RWMutex
	soapRecipelipidInsertCache          = make(map[string]insertCache)
	soapRecipelipidUpdateCacheMut       sync.RWMutex
	soapRecipelipidUpdateCache          = make(map[string]updateCache)
	soapRecipelipidUpsertCacheMut       sync.RWMutex
	soapRecipelipidUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var soapRecipelipidBeforeInsertHooks []SoapRecipelipidHook
var soapRecipelipidBeforeUpdateHooks []SoapRecipelipidHook
var soapRecipelipidBeforeDeleteHooks []SoapRecipelipidHook
var soapRecipelipidBeforeUpsertHooks []SoapRecipelipidHook

var soapRecipelipidAfterInsertHooks []SoapRecipelipidHook
var soapRecipelipidAfterSelectHooks []SoapRecipelipidHook
var soapRecipelipidAfterUpdateHooks []SoapRecipelipidHook
var soapRecipelipidAfterDeleteHooks []SoapRecipelipidHook
var soapRecipelipidAfterUpsertHooks []SoapRecipelipidHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SoapRecipelipid) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapRecipelipidBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SoapRecipelipid) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapRecipelipidBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SoapRecipelipid) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapRecipelipidBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SoapRecipelipid) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapRecipelipidBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SoapRecipelipid) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapRecipelipidAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SoapRecipelipid) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapRecipelipidAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SoapRecipelipid) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapRecipelipidAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SoapRecipelipid) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapRecipelipidAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SoapRecipelipid) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapRecipelipidAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSoapRecipelipidHook registers your hook function for all future operations.
func AddSoapRecipelipidHook(hookPoint boil.HookPoint, soapRecipelipidHook SoapRecipelipidHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		soapRecipelipidBeforeInsertHooks = append(soapRecipelipidBeforeInsertHooks, soapRecipelipidHook)
	case boil.BeforeUpdateHook:
		soapRecipelipidBeforeUpdateHooks = append(soapRecipelipidBeforeUpdateHooks, soapRecipelipidHook)
	case boil.BeforeDeleteHook:
		soapRecipelipidBeforeDeleteHooks = append(soapRecipelipidBeforeDeleteHooks, soapRecipelipidHook)
	case boil.BeforeUpsertHook:
		soapRecipelipidBeforeUpsertHooks = append(soapRecipelipidBeforeUpsertHooks, soapRecipelipidHook)
	case boil.AfterInsertHook:
		soapRecipelipidAfterInsertHooks = append(soapRecipelipidAfterInsertHooks, soapRecipelipidHook)
	case boil.AfterSelectHook:
		soapRecipelipidAfterSelectHooks = append(soapRecipelipidAfterSelectHooks, soapRecipelipidHook)
	case boil.AfterUpdateHook:
		soapRecipelipidAfterUpdateHooks = append(soapRecipelipidAfterUpdateHooks, soapRecipelipidHook)
	case boil.AfterDeleteHook:
		soapRecipelipidAfterDeleteHooks = append(soapRecipelipidAfterDeleteHooks, soapRecipelipidHook)
	case boil.AfterUpsertHook:
		soapRecipelipidAfterUpsertHooks = append(soapRecipelipidAfterUpsertHooks, soapRecipelipidHook)
	}
}

// One returns a single soapRecipelipid record from the query.
func (q soapRecipelipidQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SoapRecipelipid, error) {
	o := &SoapRecipelipid{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for soap_recipelipid")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SoapRecipelipid records from the query.
func (q soapRecipelipidQuery) All(ctx context.Context, exec boil.ContextExecutor) (SoapRecipelipidSlice, error) {
	var o []*SoapRecipelipid

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SoapRecipelipid slice")
	}

	if len(soapRecipelipidAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SoapRecipelipid records in the query.
func (q soapRecipelipidQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count soap_recipelipid rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q soapRecipelipidQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if soap_recipelipid exists")
	}

	return count > 0, nil
}

// Lipid pointed to by the foreign key.
func (o *SoapRecipelipid) Lipid(mods ...qm.QueryMod) soapLipidQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LipidID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := SoapLipids(queryMods...)
	queries.SetFrom(query.Query, "\"soap_lipid\"")

	return query
}

// LipidSoapRecipes retrieves all the soap_recipe's SoapRecipes with an executor via lipids_id column.
func (o *SoapRecipelipid) LipidSoapRecipes(mods ...qm.QueryMod) soapRecipeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"soap_recipe\".\"lipids_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"soap_recipe\".\"deleted_at\""),
	)

	query := SoapRecipes(queryMods...)
	queries.SetFrom(query.Query, "\"soap_recipe\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"soap_recipe\".*"})
	}

	return query
}

// LoadLipid allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (soapRecipelipidL) LoadLipid(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSoapRecipelipid interface{}, mods queries.Applicator) error {
	var slice []*SoapRecipelipid
	var object *SoapRecipelipid

	if singular {
		object = maybeSoapRecipelipid.(*SoapRecipelipid)
	} else {
		slice = *maybeSoapRecipelipid.(*[]*SoapRecipelipid)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &soapRecipelipidR{}
		}
		args = append(args, object.LipidID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &soapRecipelipidR{}
			}

			for _, a := range args {
				if a == obj.LipidID {
					continue Outer
				}
			}

			args = append(args, obj.LipidID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`soap_lipid`),
		qm.WhereIn(`soap_lipid.id in ?`, args...),
		qmhelper.WhereIsNull(`soap_lipid.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SoapLipid")
	}

	var resultSlice []*SoapLipid
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SoapLipid")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for soap_lipid")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for soap_lipid")
	}

	if len(soapRecipelipidAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Lipid = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LipidID == foreign.ID {
				local.R.Lipid = foreign
				break
			}
		}
	}

	return nil
}

// LoadLipidSoapRecipes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (soapRecipelipidL) LoadLipidSoapRecipes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSoapRecipelipid interface{}, mods queries.Applicator) error {
	var slice []*SoapRecipelipid
	var object *SoapRecipelipid

	if singular {
		object = maybeSoapRecipelipid.(*SoapRecipelipid)
	} else {
		slice = *maybeSoapRecipelipid.(*[]*SoapRecipelipid)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &soapRecipelipidR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &soapRecipelipidR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`soap_recipe`),
		qm.WhereIn(`soap_recipe.lipids_id in ?`, args...),
		qmhelper.WhereIsNull(`soap_recipe.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load soap_recipe")
	}

	var resultSlice []*SoapRecipe
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice soap_recipe")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on soap_recipe")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for soap_recipe")
	}

	if len(soapRecipeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.LipidSoapRecipes = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.LipidsID {
				local.R.LipidSoapRecipes = append(local.R.LipidSoapRecipes, foreign)
				break
			}
		}
	}

	return nil
}

// SetLipid of the soapRecipelipid to the related item.
// Sets o.R.Lipid to related.
// Adds o to related.R.LipidSoapRecipelipids.
func (o *SoapRecipelipid) SetLipid(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SoapLipid) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"soap_recipelipid\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"lipid_id"}),
		strmangle.WhereClause("\"", "\"", 2, soapRecipelipidPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LipidID = related.ID
	if o.R == nil {
		o.R = &soapRecipelipidR{
			Lipid: related,
		}
	} else {
		o.R.Lipid = related
	}

	if related.R == nil {
		related.R = &soapLipidR{
			LipidSoapRecipelipids: SoapRecipelipidSlice{o},
		}
	} else {
		related.R.LipidSoapRecipelipids = append(related.R.LipidSoapRecipelipids, o)
	}

	return nil
}

// AddLipidSoapRecipes adds the given related objects to the existing relationships
// of the soap_recipelipid, optionally inserting them as new records.
// Appends related to o.R.LipidSoapRecipes.
// Sets related.R.Lipid appropriately.
func (o *SoapRecipelipid) AddLipidSoapRecipes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SoapRecipe) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.LipidsID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"soap_recipe\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"lipids_id"}),
				strmangle.WhereClause("\"", "\"", 2, soapRecipePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.LipidsID = o.ID
		}
	}

	if o.R == nil {
		o.R = &soapRecipelipidR{
			LipidSoapRecipes: related,
		}
	} else {
		o.R.LipidSoapRecipes = append(o.R.LipidSoapRecipes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &soapRecipeR{
				Lipid: o,
			}
		} else {
			rel.R.Lipid = o
		}
	}
	return nil
}

// SoapRecipelipids retrieves all the records using an executor.
func SoapRecipelipids(mods ...qm.QueryMod) soapRecipelipidQuery {
	mods = append(mods, qm.From("\"soap_recipelipid\""), qmhelper.WhereIsNull("\"soap_recipelipid\".\"deleted_at\""))
	return soapRecipelipidQuery{NewQuery(mods...)}
}

// FindSoapRecipelipid retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSoapRecipelipid(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*SoapRecipelipid, error) {
	soapRecipelipidObj := &SoapRecipelipid{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"soap_recipelipid\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, soapRecipelipidObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from soap_recipelipid")
	}

	return soapRecipelipidObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SoapRecipelipid) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no soap_recipelipid provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(soapRecipelipidColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	soapRecipelipidInsertCacheMut.RLock()
	cache, cached := soapRecipelipidInsertCache[key]
	soapRecipelipidInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			soapRecipelipidAllColumns,
			soapRecipelipidColumnsWithDefault,
			soapRecipelipidColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(soapRecipelipidType, soapRecipelipidMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(soapRecipelipidType, soapRecipelipidMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"soap_recipelipid\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"soap_recipelipid\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into soap_recipelipid")
	}

	if !cached {
		soapRecipelipidInsertCacheMut.Lock()
		soapRecipelipidInsertCache[key] = cache
		soapRecipelipidInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SoapRecipelipid.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SoapRecipelipid) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	soapRecipelipidUpdateCacheMut.RLock()
	cache, cached := soapRecipelipidUpdateCache[key]
	soapRecipelipidUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			soapRecipelipidAllColumns,
			soapRecipelipidPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update soap_recipelipid, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"soap_recipelipid\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, soapRecipelipidPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(soapRecipelipidType, soapRecipelipidMapping, append(wl, soapRecipelipidPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update soap_recipelipid row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for soap_recipelipid")
	}

	if !cached {
		soapRecipelipidUpdateCacheMut.Lock()
		soapRecipelipidUpdateCache[key] = cache
		soapRecipelipidUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q soapRecipelipidQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for soap_recipelipid")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for soap_recipelipid")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SoapRecipelipidSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), soapRecipelipidPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"soap_recipelipid\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, soapRecipelipidPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in soapRecipelipid slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all soapRecipelipid")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SoapRecipelipid) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no soap_recipelipid provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(soapRecipelipidColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	soapRecipelipidUpsertCacheMut.RLock()
	cache, cached := soapRecipelipidUpsertCache[key]
	soapRecipelipidUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			soapRecipelipidAllColumns,
			soapRecipelipidColumnsWithDefault,
			soapRecipelipidColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			soapRecipelipidAllColumns,
			soapRecipelipidPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert soap_recipelipid, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(soapRecipelipidPrimaryKeyColumns))
			copy(conflict, soapRecipelipidPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"soap_recipelipid\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(soapRecipelipidType, soapRecipelipidMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(soapRecipelipidType, soapRecipelipidMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert soap_recipelipid")
	}

	if !cached {
		soapRecipelipidUpsertCacheMut.Lock()
		soapRecipelipidUpsertCache[key] = cache
		soapRecipelipidUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SoapRecipelipid record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SoapRecipelipid) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SoapRecipelipid provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), soapRecipelipidPrimaryKeyMapping)
		sql = "DELETE FROM \"soap_recipelipid\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"soap_recipelipid\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(soapRecipelipidType, soapRecipelipidMapping, append(wl, soapRecipelipidPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from soap_recipelipid")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for soap_recipelipid")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q soapRecipelipidQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no soapRecipelipidQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from soap_recipelipid")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for soap_recipelipid")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SoapRecipelipidSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(soapRecipelipidBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), soapRecipelipidPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"soap_recipelipid\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, soapRecipelipidPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), soapRecipelipidPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"soap_recipelipid\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, soapRecipelipidPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from soapRecipelipid slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for soap_recipelipid")
	}

	if len(soapRecipelipidAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SoapRecipelipid) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSoapRecipelipid(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SoapRecipelipidSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SoapRecipelipidSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), soapRecipelipidPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"soap_recipelipid\".* FROM \"soap_recipelipid\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, soapRecipelipidPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SoapRecipelipidSlice")
	}

	*o = slice

	return nil
}

// SoapRecipelipidExists checks if the SoapRecipelipid row exists.
func SoapRecipelipidExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"soap_recipelipid\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if soap_recipelipid exists")
	}

	return exists, nil
}
