// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSoapAdditives(t *testing.T) {
	t.Parallel()

	query := SoapAdditives()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSoapAdditivesSoftDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapAdditive{}
	if err = randomize.Struct(seed, o, soapAdditiveDBTypes, true, soapAdditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapAdditives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapAdditivesQuerySoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapAdditive{}
	if err = randomize.Struct(seed, o, soapAdditiveDBTypes, true, soapAdditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SoapAdditives().DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapAdditives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapAdditivesSliceSoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapAdditive{}
	if err = randomize.Struct(seed, o, soapAdditiveDBTypes, true, soapAdditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SoapAdditiveSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapAdditives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapAdditivesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapAdditive{}
	if err = randomize.Struct(seed, o, soapAdditiveDBTypes, true, soapAdditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapAdditives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapAdditivesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapAdditive{}
	if err = randomize.Struct(seed, o, soapAdditiveDBTypes, true, soapAdditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SoapAdditives().DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapAdditives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapAdditivesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapAdditive{}
	if err = randomize.Struct(seed, o, soapAdditiveDBTypes, true, soapAdditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SoapAdditiveSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapAdditives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapAdditivesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapAdditive{}
	if err = randomize.Struct(seed, o, soapAdditiveDBTypes, true, soapAdditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SoapAdditiveExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if SoapAdditive exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SoapAdditiveExists to return true, but got false.")
	}
}

func testSoapAdditivesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapAdditive{}
	if err = randomize.Struct(seed, o, soapAdditiveDBTypes, true, soapAdditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	soapAdditiveFound, err := FindSoapAdditive(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if soapAdditiveFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSoapAdditivesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapAdditive{}
	if err = randomize.Struct(seed, o, soapAdditiveDBTypes, true, soapAdditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SoapAdditives().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSoapAdditivesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapAdditive{}
	if err = randomize.Struct(seed, o, soapAdditiveDBTypes, true, soapAdditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SoapAdditives().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSoapAdditivesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	soapAdditiveOne := &SoapAdditive{}
	soapAdditiveTwo := &SoapAdditive{}
	if err = randomize.Struct(seed, soapAdditiveOne, soapAdditiveDBTypes, false, soapAdditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditive struct: %s", err)
	}
	if err = randomize.Struct(seed, soapAdditiveTwo, soapAdditiveDBTypes, false, soapAdditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = soapAdditiveOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = soapAdditiveTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SoapAdditives().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSoapAdditivesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	soapAdditiveOne := &SoapAdditive{}
	soapAdditiveTwo := &SoapAdditive{}
	if err = randomize.Struct(seed, soapAdditiveOne, soapAdditiveDBTypes, false, soapAdditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditive struct: %s", err)
	}
	if err = randomize.Struct(seed, soapAdditiveTwo, soapAdditiveDBTypes, false, soapAdditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = soapAdditiveOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = soapAdditiveTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapAdditives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func soapAdditiveBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapAdditive) error {
	*o = SoapAdditive{}
	return nil
}

func soapAdditiveAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapAdditive) error {
	*o = SoapAdditive{}
	return nil
}

func soapAdditiveAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *SoapAdditive) error {
	*o = SoapAdditive{}
	return nil
}

func soapAdditiveBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SoapAdditive) error {
	*o = SoapAdditive{}
	return nil
}

func soapAdditiveAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SoapAdditive) error {
	*o = SoapAdditive{}
	return nil
}

func soapAdditiveBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SoapAdditive) error {
	*o = SoapAdditive{}
	return nil
}

func soapAdditiveAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SoapAdditive) error {
	*o = SoapAdditive{}
	return nil
}

func soapAdditiveBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapAdditive) error {
	*o = SoapAdditive{}
	return nil
}

func soapAdditiveAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapAdditive) error {
	*o = SoapAdditive{}
	return nil
}

func testSoapAdditivesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &SoapAdditive{}
	o := &SoapAdditive{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, soapAdditiveDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SoapAdditive object: %s", err)
	}

	AddSoapAdditiveHook(boil.BeforeInsertHook, soapAdditiveBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	soapAdditiveBeforeInsertHooks = []SoapAdditiveHook{}

	AddSoapAdditiveHook(boil.AfterInsertHook, soapAdditiveAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	soapAdditiveAfterInsertHooks = []SoapAdditiveHook{}

	AddSoapAdditiveHook(boil.AfterSelectHook, soapAdditiveAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	soapAdditiveAfterSelectHooks = []SoapAdditiveHook{}

	AddSoapAdditiveHook(boil.BeforeUpdateHook, soapAdditiveBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	soapAdditiveBeforeUpdateHooks = []SoapAdditiveHook{}

	AddSoapAdditiveHook(boil.AfterUpdateHook, soapAdditiveAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	soapAdditiveAfterUpdateHooks = []SoapAdditiveHook{}

	AddSoapAdditiveHook(boil.BeforeDeleteHook, soapAdditiveBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	soapAdditiveBeforeDeleteHooks = []SoapAdditiveHook{}

	AddSoapAdditiveHook(boil.AfterDeleteHook, soapAdditiveAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	soapAdditiveAfterDeleteHooks = []SoapAdditiveHook{}

	AddSoapAdditiveHook(boil.BeforeUpsertHook, soapAdditiveBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	soapAdditiveBeforeUpsertHooks = []SoapAdditiveHook{}

	AddSoapAdditiveHook(boil.AfterUpsertHook, soapAdditiveAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	soapAdditiveAfterUpsertHooks = []SoapAdditiveHook{}
}

func testSoapAdditivesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapAdditive{}
	if err = randomize.Struct(seed, o, soapAdditiveDBTypes, true, soapAdditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapAdditives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSoapAdditivesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapAdditive{}
	if err = randomize.Struct(seed, o, soapAdditiveDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SoapAdditive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(soapAdditiveColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := SoapAdditives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSoapAdditiveToManyAdditiveSoapAdditiveinventories(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SoapAdditive
	var b, c SoapAdditiveinventory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soapAdditiveDBTypes, true, soapAdditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditive struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, soapAdditiveinventoryDBTypes, false, soapAdditiveinventoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, soapAdditiveinventoryDBTypes, false, soapAdditiveinventoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.AdditiveID = a.ID
	c.AdditiveID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.AdditiveSoapAdditiveinventories().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.AdditiveID == b.AdditiveID {
			bFound = true
		}
		if v.AdditiveID == c.AdditiveID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SoapAdditiveSlice{&a}
	if err = a.L.LoadAdditiveSoapAdditiveinventories(ctx, tx, false, (*[]*SoapAdditive)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AdditiveSoapAdditiveinventories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.AdditiveSoapAdditiveinventories = nil
	if err = a.L.LoadAdditiveSoapAdditiveinventories(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AdditiveSoapAdditiveinventories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSoapAdditiveToManyAdditiveSoapRecipeadditives(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SoapAdditive
	var b, c SoapRecipeadditive

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soapAdditiveDBTypes, true, soapAdditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditive struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, soapRecipeadditiveDBTypes, false, soapRecipeadditiveColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, soapRecipeadditiveDBTypes, false, soapRecipeadditiveColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.AdditiveID = a.ID
	c.AdditiveID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.AdditiveSoapRecipeadditives().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.AdditiveID == b.AdditiveID {
			bFound = true
		}
		if v.AdditiveID == c.AdditiveID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SoapAdditiveSlice{&a}
	if err = a.L.LoadAdditiveSoapRecipeadditives(ctx, tx, false, (*[]*SoapAdditive)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AdditiveSoapRecipeadditives); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.AdditiveSoapRecipeadditives = nil
	if err = a.L.LoadAdditiveSoapRecipeadditives(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AdditiveSoapRecipeadditives); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSoapAdditiveToManyAddOpAdditiveSoapAdditiveinventories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SoapAdditive
	var b, c, d, e SoapAdditiveinventory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soapAdditiveDBTypes, false, strmangle.SetComplement(soapAdditivePrimaryKeyColumns, soapAdditiveColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SoapAdditiveinventory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, soapAdditiveinventoryDBTypes, false, strmangle.SetComplement(soapAdditiveinventoryPrimaryKeyColumns, soapAdditiveinventoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SoapAdditiveinventory{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAdditiveSoapAdditiveinventories(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.AdditiveID {
			t.Error("foreign key was wrong value", a.ID, first.AdditiveID)
		}
		if a.ID != second.AdditiveID {
			t.Error("foreign key was wrong value", a.ID, second.AdditiveID)
		}

		if first.R.Additive != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Additive != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.AdditiveSoapAdditiveinventories[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.AdditiveSoapAdditiveinventories[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AdditiveSoapAdditiveinventories().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSoapAdditiveToManyAddOpAdditiveSoapRecipeadditives(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SoapAdditive
	var b, c, d, e SoapRecipeadditive

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soapAdditiveDBTypes, false, strmangle.SetComplement(soapAdditivePrimaryKeyColumns, soapAdditiveColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SoapRecipeadditive{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, soapRecipeadditiveDBTypes, false, strmangle.SetComplement(soapRecipeadditivePrimaryKeyColumns, soapRecipeadditiveColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SoapRecipeadditive{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAdditiveSoapRecipeadditives(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.AdditiveID {
			t.Error("foreign key was wrong value", a.ID, first.AdditiveID)
		}
		if a.ID != second.AdditiveID {
			t.Error("foreign key was wrong value", a.ID, second.AdditiveID)
		}

		if first.R.Additive != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Additive != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.AdditiveSoapRecipeadditives[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.AdditiveSoapRecipeadditives[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AdditiveSoapRecipeadditives().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSoapAdditivesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapAdditive{}
	if err = randomize.Struct(seed, o, soapAdditiveDBTypes, true, soapAdditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSoapAdditivesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapAdditive{}
	if err = randomize.Struct(seed, o, soapAdditiveDBTypes, true, soapAdditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SoapAdditiveSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSoapAdditivesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapAdditive{}
	if err = randomize.Struct(seed, o, soapAdditiveDBTypes, true, soapAdditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SoapAdditives().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	soapAdditiveDBTypes = map[string]string{`ID`: `integer`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `Name`: `character varying`}
	_                   = bytes.MinRead
)

func testSoapAdditivesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(soapAdditivePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(soapAdditiveAllColumns) == len(soapAdditivePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SoapAdditive{}
	if err = randomize.Struct(seed, o, soapAdditiveDBTypes, true, soapAdditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapAdditives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, soapAdditiveDBTypes, true, soapAdditivePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SoapAdditive struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSoapAdditivesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(soapAdditiveAllColumns) == len(soapAdditivePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SoapAdditive{}
	if err = randomize.Struct(seed, o, soapAdditiveDBTypes, true, soapAdditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapAdditives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, soapAdditiveDBTypes, true, soapAdditivePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SoapAdditive struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(soapAdditiveAllColumns, soapAdditivePrimaryKeyColumns) {
		fields = soapAdditiveAllColumns
	} else {
		fields = strmangle.SetComplement(
			soapAdditiveAllColumns,
			soapAdditivePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SoapAdditiveSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSoapAdditivesUpsert(t *testing.T) {
	t.Parallel()

	if len(soapAdditiveAllColumns) == len(soapAdditivePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SoapAdditive{}
	if err = randomize.Struct(seed, &o, soapAdditiveDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SoapAdditive struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SoapAdditive: %s", err)
	}

	count, err := SoapAdditives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, soapAdditiveDBTypes, false, soapAdditivePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SoapAdditive struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SoapAdditive: %s", err)
	}

	count, err = SoapAdditives().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
