// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSoapLipids(t *testing.T) {
	t.Parallel()

	query := SoapLipids()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSoapLipidsSoftDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLipid{}
	if err = randomize.Struct(seed, o, soapLipidDBTypes, true, soapLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapLipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapLipidsQuerySoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLipid{}
	if err = randomize.Struct(seed, o, soapLipidDBTypes, true, soapLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SoapLipids().DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapLipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapLipidsSliceSoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLipid{}
	if err = randomize.Struct(seed, o, soapLipidDBTypes, true, soapLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SoapLipidSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapLipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapLipidsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLipid{}
	if err = randomize.Struct(seed, o, soapLipidDBTypes, true, soapLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapLipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapLipidsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLipid{}
	if err = randomize.Struct(seed, o, soapLipidDBTypes, true, soapLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SoapLipids().DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapLipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapLipidsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLipid{}
	if err = randomize.Struct(seed, o, soapLipidDBTypes, true, soapLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SoapLipidSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapLipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapLipidsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLipid{}
	if err = randomize.Struct(seed, o, soapLipidDBTypes, true, soapLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SoapLipidExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if SoapLipid exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SoapLipidExists to return true, but got false.")
	}
}

func testSoapLipidsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLipid{}
	if err = randomize.Struct(seed, o, soapLipidDBTypes, true, soapLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	soapLipidFound, err := FindSoapLipid(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if soapLipidFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSoapLipidsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLipid{}
	if err = randomize.Struct(seed, o, soapLipidDBTypes, true, soapLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SoapLipids().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSoapLipidsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLipid{}
	if err = randomize.Struct(seed, o, soapLipidDBTypes, true, soapLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SoapLipids().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSoapLipidsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	soapLipidOne := &SoapLipid{}
	soapLipidTwo := &SoapLipid{}
	if err = randomize.Struct(seed, soapLipidOne, soapLipidDBTypes, false, soapLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipid struct: %s", err)
	}
	if err = randomize.Struct(seed, soapLipidTwo, soapLipidDBTypes, false, soapLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = soapLipidOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = soapLipidTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SoapLipids().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSoapLipidsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	soapLipidOne := &SoapLipid{}
	soapLipidTwo := &SoapLipid{}
	if err = randomize.Struct(seed, soapLipidOne, soapLipidDBTypes, false, soapLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipid struct: %s", err)
	}
	if err = randomize.Struct(seed, soapLipidTwo, soapLipidDBTypes, false, soapLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = soapLipidOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = soapLipidTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapLipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func soapLipidBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapLipid) error {
	*o = SoapLipid{}
	return nil
}

func soapLipidAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapLipid) error {
	*o = SoapLipid{}
	return nil
}

func soapLipidAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *SoapLipid) error {
	*o = SoapLipid{}
	return nil
}

func soapLipidBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SoapLipid) error {
	*o = SoapLipid{}
	return nil
}

func soapLipidAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SoapLipid) error {
	*o = SoapLipid{}
	return nil
}

func soapLipidBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SoapLipid) error {
	*o = SoapLipid{}
	return nil
}

func soapLipidAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SoapLipid) error {
	*o = SoapLipid{}
	return nil
}

func soapLipidBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapLipid) error {
	*o = SoapLipid{}
	return nil
}

func soapLipidAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapLipid) error {
	*o = SoapLipid{}
	return nil
}

func testSoapLipidsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &SoapLipid{}
	o := &SoapLipid{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, soapLipidDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SoapLipid object: %s", err)
	}

	AddSoapLipidHook(boil.BeforeInsertHook, soapLipidBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	soapLipidBeforeInsertHooks = []SoapLipidHook{}

	AddSoapLipidHook(boil.AfterInsertHook, soapLipidAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	soapLipidAfterInsertHooks = []SoapLipidHook{}

	AddSoapLipidHook(boil.AfterSelectHook, soapLipidAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	soapLipidAfterSelectHooks = []SoapLipidHook{}

	AddSoapLipidHook(boil.BeforeUpdateHook, soapLipidBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	soapLipidBeforeUpdateHooks = []SoapLipidHook{}

	AddSoapLipidHook(boil.AfterUpdateHook, soapLipidAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	soapLipidAfterUpdateHooks = []SoapLipidHook{}

	AddSoapLipidHook(boil.BeforeDeleteHook, soapLipidBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	soapLipidBeforeDeleteHooks = []SoapLipidHook{}

	AddSoapLipidHook(boil.AfterDeleteHook, soapLipidAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	soapLipidAfterDeleteHooks = []SoapLipidHook{}

	AddSoapLipidHook(boil.BeforeUpsertHook, soapLipidBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	soapLipidBeforeUpsertHooks = []SoapLipidHook{}

	AddSoapLipidHook(boil.AfterUpsertHook, soapLipidAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	soapLipidAfterUpsertHooks = []SoapLipidHook{}
}

func testSoapLipidsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLipid{}
	if err = randomize.Struct(seed, o, soapLipidDBTypes, true, soapLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapLipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSoapLipidsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLipid{}
	if err = randomize.Struct(seed, o, soapLipidDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SoapLipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(soapLipidColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := SoapLipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSoapLipidToManyLipidSoapLipidinventories(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SoapLipid
	var b, c SoapLipidinventory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soapLipidDBTypes, true, soapLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipid struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, soapLipidinventoryDBTypes, false, soapLipidinventoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, soapLipidinventoryDBTypes, false, soapLipidinventoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.LipidID = a.ID
	c.LipidID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.LipidSoapLipidinventories().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.LipidID == b.LipidID {
			bFound = true
		}
		if v.LipidID == c.LipidID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SoapLipidSlice{&a}
	if err = a.L.LoadLipidSoapLipidinventories(ctx, tx, false, (*[]*SoapLipid)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.LipidSoapLipidinventories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.LipidSoapLipidinventories = nil
	if err = a.L.LoadLipidSoapLipidinventories(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.LipidSoapLipidinventories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSoapLipidToManyLipidSoapRecipelipids(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SoapLipid
	var b, c SoapRecipelipid

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soapLipidDBTypes, true, soapLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipid struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, soapRecipelipidDBTypes, false, soapRecipelipidColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, soapRecipelipidDBTypes, false, soapRecipelipidColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.LipidID = a.ID
	c.LipidID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.LipidSoapRecipelipids().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.LipidID == b.LipidID {
			bFound = true
		}
		if v.LipidID == c.LipidID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SoapLipidSlice{&a}
	if err = a.L.LoadLipidSoapRecipelipids(ctx, tx, false, (*[]*SoapLipid)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.LipidSoapRecipelipids); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.LipidSoapRecipelipids = nil
	if err = a.L.LoadLipidSoapRecipelipids(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.LipidSoapRecipelipids); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSoapLipidToManyAddOpLipidSoapLipidinventories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SoapLipid
	var b, c, d, e SoapLipidinventory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soapLipidDBTypes, false, strmangle.SetComplement(soapLipidPrimaryKeyColumns, soapLipidColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SoapLipidinventory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, soapLipidinventoryDBTypes, false, strmangle.SetComplement(soapLipidinventoryPrimaryKeyColumns, soapLipidinventoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SoapLipidinventory{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddLipidSoapLipidinventories(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.LipidID {
			t.Error("foreign key was wrong value", a.ID, first.LipidID)
		}
		if a.ID != second.LipidID {
			t.Error("foreign key was wrong value", a.ID, second.LipidID)
		}

		if first.R.Lipid != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Lipid != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.LipidSoapLipidinventories[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.LipidSoapLipidinventories[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.LipidSoapLipidinventories().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSoapLipidToManyAddOpLipidSoapRecipelipids(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SoapLipid
	var b, c, d, e SoapRecipelipid

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soapLipidDBTypes, false, strmangle.SetComplement(soapLipidPrimaryKeyColumns, soapLipidColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SoapRecipelipid{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, soapRecipelipidDBTypes, false, strmangle.SetComplement(soapRecipelipidPrimaryKeyColumns, soapRecipelipidColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SoapRecipelipid{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddLipidSoapRecipelipids(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.LipidID {
			t.Error("foreign key was wrong value", a.ID, first.LipidID)
		}
		if a.ID != second.LipidID {
			t.Error("foreign key was wrong value", a.ID, second.LipidID)
		}

		if first.R.Lipid != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Lipid != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.LipidSoapRecipelipids[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.LipidSoapRecipelipids[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.LipidSoapRecipelipids().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSoapLipidsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLipid{}
	if err = randomize.Struct(seed, o, soapLipidDBTypes, true, soapLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSoapLipidsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLipid{}
	if err = randomize.Struct(seed, o, soapLipidDBTypes, true, soapLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SoapLipidSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSoapLipidsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLipid{}
	if err = randomize.Struct(seed, o, soapLipidDBTypes, true, soapLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SoapLipids().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	soapLipidDBTypes = map[string]string{`ID`: `integer`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `Name`: `character varying`, `Lauric`: `integer`, `Myristic`: `integer`, `Palmitic`: `integer`, `Stearic`: `integer`, `Ricinoleic`: `integer`, `Oleic`: `integer`, `Linoleic`: `integer`, `Linolenic`: `integer`, `Hardness`: `integer`, `Cleansing`: `integer`, `Conditioning`: `integer`, `Bubbly`: `integer`, `Creamy`: `integer`, `Iodine`: `integer`, `Ins`: `integer`, `InciName`: `character varying`}
	_                = bytes.MinRead
)

func testSoapLipidsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(soapLipidPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(soapLipidAllColumns) == len(soapLipidPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SoapLipid{}
	if err = randomize.Struct(seed, o, soapLipidDBTypes, true, soapLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapLipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, soapLipidDBTypes, true, soapLipidPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SoapLipid struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSoapLipidsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(soapLipidAllColumns) == len(soapLipidPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SoapLipid{}
	if err = randomize.Struct(seed, o, soapLipidDBTypes, true, soapLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapLipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, soapLipidDBTypes, true, soapLipidPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SoapLipid struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(soapLipidAllColumns, soapLipidPrimaryKeyColumns) {
		fields = soapLipidAllColumns
	} else {
		fields = strmangle.SetComplement(
			soapLipidAllColumns,
			soapLipidPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SoapLipidSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSoapLipidsUpsert(t *testing.T) {
	t.Parallel()

	if len(soapLipidAllColumns) == len(soapLipidPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SoapLipid{}
	if err = randomize.Struct(seed, &o, soapLipidDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SoapLipid struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SoapLipid: %s", err)
	}

	count, err := SoapLipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, soapLipidDBTypes, false, soapLipidPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SoapLipid struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SoapLipid: %s", err)
	}

	count, err = SoapLipids().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
