// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SoapLipidinventory is an object representing the database table.
type SoapLipidinventory struct {
	ID            int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt     time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt     null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	PurchaseDate  time.Time `boil:"purchase_date" json:"purchase_date" toml:"purchase_date" yaml:"purchase_date"`
	ExpiryDate    time.Time `boil:"expiry_date" json:"expiry_date" toml:"expiry_date" yaml:"expiry_date"`
	Cost          float64   `boil:"cost" json:"cost" toml:"cost" yaml:"cost"`
	Weight        float64   `boil:"weight" json:"weight" toml:"weight" yaml:"weight"`
	Sap           float64   `boil:"sap" json:"sap" toml:"sap" yaml:"sap"`
	Naoh          float64   `boil:"naoh" json:"naoh" toml:"naoh" yaml:"naoh"`
	Koh           float64   `boil:"koh" json:"koh" toml:"koh" yaml:"koh"`
	GramsPerLiter float64   `boil:"grams_per_liter" json:"grams_per_liter" toml:"grams_per_liter" yaml:"grams_per_liter"`
	LipidID       int       `boil:"lipid_id" json:"lipid_id" toml:"lipid_id" yaml:"lipid_id"`
	SupplierID    int       `boil:"supplier_id" json:"supplier_id" toml:"supplier_id" yaml:"supplier_id"`

	R *soapLipidinventoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L soapLipidinventoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SoapLipidinventoryColumns = struct {
	ID            string
	CreatedAt     string
	UpdatedAt     string
	DeletedAt     string
	PurchaseDate  string
	ExpiryDate    string
	Cost          string
	Weight        string
	Sap           string
	Naoh          string
	Koh           string
	GramsPerLiter string
	LipidID       string
	SupplierID    string
}{
	ID:            "id",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	DeletedAt:     "deleted_at",
	PurchaseDate:  "purchase_date",
	ExpiryDate:    "expiry_date",
	Cost:          "cost",
	Weight:        "weight",
	Sap:           "sap",
	Naoh:          "naoh",
	Koh:           "koh",
	GramsPerLiter: "grams_per_liter",
	LipidID:       "lipid_id",
	SupplierID:    "supplier_id",
}

// Generated where

var SoapLipidinventoryWhere = struct {
	ID            whereHelperint
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
	DeletedAt     whereHelpernull_Time
	PurchaseDate  whereHelpertime_Time
	ExpiryDate    whereHelpertime_Time
	Cost          whereHelperfloat64
	Weight        whereHelperfloat64
	Sap           whereHelperfloat64
	Naoh          whereHelperfloat64
	Koh           whereHelperfloat64
	GramsPerLiter whereHelperfloat64
	LipidID       whereHelperint
	SupplierID    whereHelperint
}{
	ID:            whereHelperint{field: "\"soap_lipidinventory\".\"id\""},
	CreatedAt:     whereHelpertime_Time{field: "\"soap_lipidinventory\".\"created_at\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"soap_lipidinventory\".\"updated_at\""},
	DeletedAt:     whereHelpernull_Time{field: "\"soap_lipidinventory\".\"deleted_at\""},
	PurchaseDate:  whereHelpertime_Time{field: "\"soap_lipidinventory\".\"purchase_date\""},
	ExpiryDate:    whereHelpertime_Time{field: "\"soap_lipidinventory\".\"expiry_date\""},
	Cost:          whereHelperfloat64{field: "\"soap_lipidinventory\".\"cost\""},
	Weight:        whereHelperfloat64{field: "\"soap_lipidinventory\".\"weight\""},
	Sap:           whereHelperfloat64{field: "\"soap_lipidinventory\".\"sap\""},
	Naoh:          whereHelperfloat64{field: "\"soap_lipidinventory\".\"naoh\""},
	Koh:           whereHelperfloat64{field: "\"soap_lipidinventory\".\"koh\""},
	GramsPerLiter: whereHelperfloat64{field: "\"soap_lipidinventory\".\"grams_per_liter\""},
	LipidID:       whereHelperint{field: "\"soap_lipidinventory\".\"lipid_id\""},
	SupplierID:    whereHelperint{field: "\"soap_lipidinventory\".\"supplier_id\""},
}

// SoapLipidinventoryRels is where relationship names are stored.
var SoapLipidinventoryRels = struct {
	Lipid    string
	Supplier string
}{
	Lipid:    "Lipid",
	Supplier: "Supplier",
}

// soapLipidinventoryR is where relationships are stored.
type soapLipidinventoryR struct {
	Lipid    *SoapLipid    `boil:"Lipid" json:"Lipid" toml:"Lipid" yaml:"Lipid"`
	Supplier *SoapSupplier `boil:"Supplier" json:"Supplier" toml:"Supplier" yaml:"Supplier"`
}

// NewStruct creates a new relationship struct
func (*soapLipidinventoryR) NewStruct() *soapLipidinventoryR {
	return &soapLipidinventoryR{}
}

// soapLipidinventoryL is where Load methods for each relationship are stored.
type soapLipidinventoryL struct{}

var (
	soapLipidinventoryAllColumns            = []string{"id", "created_at", "updated_at", "deleted_at", "purchase_date", "expiry_date", "cost", "weight", "sap", "naoh", "koh", "grams_per_liter", "lipid_id", "supplier_id"}
	soapLipidinventoryColumnsWithoutDefault = []string{"created_at", "updated_at", "deleted_at", "purchase_date", "expiry_date", "cost", "weight", "sap", "naoh", "koh", "grams_per_liter", "lipid_id", "supplier_id"}
	soapLipidinventoryColumnsWithDefault    = []string{"id"}
	soapLipidinventoryPrimaryKeyColumns     = []string{"id"}
)

type (
	// SoapLipidinventorySlice is an alias for a slice of pointers to SoapLipidinventory.
	// This should generally be used opposed to []SoapLipidinventory.
	SoapLipidinventorySlice []*SoapLipidinventory
	// SoapLipidinventoryHook is the signature for custom SoapLipidinventory hook methods
	SoapLipidinventoryHook func(context.Context, boil.ContextExecutor, *SoapLipidinventory) error

	soapLipidinventoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	soapLipidinventoryType                 = reflect.TypeOf(&SoapLipidinventory{})
	soapLipidinventoryMapping              = queries.MakeStructMapping(soapLipidinventoryType)
	soapLipidinventoryPrimaryKeyMapping, _ = queries.BindMapping(soapLipidinventoryType, soapLipidinventoryMapping, soapLipidinventoryPrimaryKeyColumns)
	soapLipidinventoryInsertCacheMut       sync.RWMutex
	soapLipidinventoryInsertCache          = make(map[string]insertCache)
	soapLipidinventoryUpdateCacheMut       sync.RWMutex
	soapLipidinventoryUpdateCache          = make(map[string]updateCache)
	soapLipidinventoryUpsertCacheMut       sync.RWMutex
	soapLipidinventoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var soapLipidinventoryBeforeInsertHooks []SoapLipidinventoryHook
var soapLipidinventoryBeforeUpdateHooks []SoapLipidinventoryHook
var soapLipidinventoryBeforeDeleteHooks []SoapLipidinventoryHook
var soapLipidinventoryBeforeUpsertHooks []SoapLipidinventoryHook

var soapLipidinventoryAfterInsertHooks []SoapLipidinventoryHook
var soapLipidinventoryAfterSelectHooks []SoapLipidinventoryHook
var soapLipidinventoryAfterUpdateHooks []SoapLipidinventoryHook
var soapLipidinventoryAfterDeleteHooks []SoapLipidinventoryHook
var soapLipidinventoryAfterUpsertHooks []SoapLipidinventoryHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SoapLipidinventory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapLipidinventoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SoapLipidinventory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapLipidinventoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SoapLipidinventory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapLipidinventoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SoapLipidinventory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapLipidinventoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SoapLipidinventory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapLipidinventoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SoapLipidinventory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapLipidinventoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SoapLipidinventory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapLipidinventoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SoapLipidinventory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapLipidinventoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SoapLipidinventory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapLipidinventoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSoapLipidinventoryHook registers your hook function for all future operations.
func AddSoapLipidinventoryHook(hookPoint boil.HookPoint, soapLipidinventoryHook SoapLipidinventoryHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		soapLipidinventoryBeforeInsertHooks = append(soapLipidinventoryBeforeInsertHooks, soapLipidinventoryHook)
	case boil.BeforeUpdateHook:
		soapLipidinventoryBeforeUpdateHooks = append(soapLipidinventoryBeforeUpdateHooks, soapLipidinventoryHook)
	case boil.BeforeDeleteHook:
		soapLipidinventoryBeforeDeleteHooks = append(soapLipidinventoryBeforeDeleteHooks, soapLipidinventoryHook)
	case boil.BeforeUpsertHook:
		soapLipidinventoryBeforeUpsertHooks = append(soapLipidinventoryBeforeUpsertHooks, soapLipidinventoryHook)
	case boil.AfterInsertHook:
		soapLipidinventoryAfterInsertHooks = append(soapLipidinventoryAfterInsertHooks, soapLipidinventoryHook)
	case boil.AfterSelectHook:
		soapLipidinventoryAfterSelectHooks = append(soapLipidinventoryAfterSelectHooks, soapLipidinventoryHook)
	case boil.AfterUpdateHook:
		soapLipidinventoryAfterUpdateHooks = append(soapLipidinventoryAfterUpdateHooks, soapLipidinventoryHook)
	case boil.AfterDeleteHook:
		soapLipidinventoryAfterDeleteHooks = append(soapLipidinventoryAfterDeleteHooks, soapLipidinventoryHook)
	case boil.AfterUpsertHook:
		soapLipidinventoryAfterUpsertHooks = append(soapLipidinventoryAfterUpsertHooks, soapLipidinventoryHook)
	}
}

// One returns a single soapLipidinventory record from the query.
func (q soapLipidinventoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SoapLipidinventory, error) {
	o := &SoapLipidinventory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for soap_lipidinventory")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SoapLipidinventory records from the query.
func (q soapLipidinventoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (SoapLipidinventorySlice, error) {
	var o []*SoapLipidinventory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SoapLipidinventory slice")
	}

	if len(soapLipidinventoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SoapLipidinventory records in the query.
func (q soapLipidinventoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count soap_lipidinventory rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q soapLipidinventoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if soap_lipidinventory exists")
	}

	return count > 0, nil
}

// Lipid pointed to by the foreign key.
func (o *SoapLipidinventory) Lipid(mods ...qm.QueryMod) soapLipidQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LipidID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := SoapLipids(queryMods...)
	queries.SetFrom(query.Query, "\"soap_lipid\"")

	return query
}

// Supplier pointed to by the foreign key.
func (o *SoapLipidinventory) Supplier(mods ...qm.QueryMod) soapSupplierQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SupplierID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := SoapSuppliers(queryMods...)
	queries.SetFrom(query.Query, "\"soap_supplier\"")

	return query
}

// LoadLipid allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (soapLipidinventoryL) LoadLipid(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSoapLipidinventory interface{}, mods queries.Applicator) error {
	var slice []*SoapLipidinventory
	var object *SoapLipidinventory

	if singular {
		object = maybeSoapLipidinventory.(*SoapLipidinventory)
	} else {
		slice = *maybeSoapLipidinventory.(*[]*SoapLipidinventory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &soapLipidinventoryR{}
		}
		args = append(args, object.LipidID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &soapLipidinventoryR{}
			}

			for _, a := range args {
				if a == obj.LipidID {
					continue Outer
				}
			}

			args = append(args, obj.LipidID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`soap_lipid`),
		qm.WhereIn(`soap_lipid.id in ?`, args...),
		qmhelper.WhereIsNull(`soap_lipid.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SoapLipid")
	}

	var resultSlice []*SoapLipid
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SoapLipid")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for soap_lipid")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for soap_lipid")
	}

	if len(soapLipidinventoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Lipid = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LipidID == foreign.ID {
				local.R.Lipid = foreign
				break
			}
		}
	}

	return nil
}

// LoadSupplier allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (soapLipidinventoryL) LoadSupplier(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSoapLipidinventory interface{}, mods queries.Applicator) error {
	var slice []*SoapLipidinventory
	var object *SoapLipidinventory

	if singular {
		object = maybeSoapLipidinventory.(*SoapLipidinventory)
	} else {
		slice = *maybeSoapLipidinventory.(*[]*SoapLipidinventory)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &soapLipidinventoryR{}
		}
		args = append(args, object.SupplierID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &soapLipidinventoryR{}
			}

			for _, a := range args {
				if a == obj.SupplierID {
					continue Outer
				}
			}

			args = append(args, obj.SupplierID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`soap_supplier`),
		qm.WhereIn(`soap_supplier.id in ?`, args...),
		qmhelper.WhereIsNull(`soap_supplier.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SoapSupplier")
	}

	var resultSlice []*SoapSupplier
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SoapSupplier")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for soap_supplier")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for soap_supplier")
	}

	if len(soapLipidinventoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Supplier = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SupplierID == foreign.ID {
				local.R.Supplier = foreign
				break
			}
		}
	}

	return nil
}

// SetLipid of the soapLipidinventory to the related item.
// Sets o.R.Lipid to related.
// Adds o to related.R.LipidSoapLipidinventories.
func (o *SoapLipidinventory) SetLipid(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SoapLipid) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"soap_lipidinventory\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"lipid_id"}),
		strmangle.WhereClause("\"", "\"", 2, soapLipidinventoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LipidID = related.ID
	if o.R == nil {
		o.R = &soapLipidinventoryR{
			Lipid: related,
		}
	} else {
		o.R.Lipid = related
	}

	if related.R == nil {
		related.R = &soapLipidR{
			LipidSoapLipidinventories: SoapLipidinventorySlice{o},
		}
	} else {
		related.R.LipidSoapLipidinventories = append(related.R.LipidSoapLipidinventories, o)
	}

	return nil
}

// SetSupplier of the soapLipidinventory to the related item.
// Sets o.R.Supplier to related.
// Adds o to related.R.SupplierSoapLipidinventories.
func (o *SoapLipidinventory) SetSupplier(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SoapSupplier) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"soap_lipidinventory\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"supplier_id"}),
		strmangle.WhereClause("\"", "\"", 2, soapLipidinventoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SupplierID = related.ID
	if o.R == nil {
		o.R = &soapLipidinventoryR{
			Supplier: related,
		}
	} else {
		o.R.Supplier = related
	}

	if related.R == nil {
		related.R = &soapSupplierR{
			SupplierSoapLipidinventories: SoapLipidinventorySlice{o},
		}
	} else {
		related.R.SupplierSoapLipidinventories = append(related.R.SupplierSoapLipidinventories, o)
	}

	return nil
}

// SoapLipidinventories retrieves all the records using an executor.
func SoapLipidinventories(mods ...qm.QueryMod) soapLipidinventoryQuery {
	mods = append(mods, qm.From("\"soap_lipidinventory\""), qmhelper.WhereIsNull("\"soap_lipidinventory\".\"deleted_at\""))
	return soapLipidinventoryQuery{NewQuery(mods...)}
}

// FindSoapLipidinventory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSoapLipidinventory(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*SoapLipidinventory, error) {
	soapLipidinventoryObj := &SoapLipidinventory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"soap_lipidinventory\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, soapLipidinventoryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from soap_lipidinventory")
	}

	return soapLipidinventoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SoapLipidinventory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no soap_lipidinventory provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(soapLipidinventoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	soapLipidinventoryInsertCacheMut.RLock()
	cache, cached := soapLipidinventoryInsertCache[key]
	soapLipidinventoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			soapLipidinventoryAllColumns,
			soapLipidinventoryColumnsWithDefault,
			soapLipidinventoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(soapLipidinventoryType, soapLipidinventoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(soapLipidinventoryType, soapLipidinventoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"soap_lipidinventory\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"soap_lipidinventory\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into soap_lipidinventory")
	}

	if !cached {
		soapLipidinventoryInsertCacheMut.Lock()
		soapLipidinventoryInsertCache[key] = cache
		soapLipidinventoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SoapLipidinventory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SoapLipidinventory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	soapLipidinventoryUpdateCacheMut.RLock()
	cache, cached := soapLipidinventoryUpdateCache[key]
	soapLipidinventoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			soapLipidinventoryAllColumns,
			soapLipidinventoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update soap_lipidinventory, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"soap_lipidinventory\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, soapLipidinventoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(soapLipidinventoryType, soapLipidinventoryMapping, append(wl, soapLipidinventoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update soap_lipidinventory row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for soap_lipidinventory")
	}

	if !cached {
		soapLipidinventoryUpdateCacheMut.Lock()
		soapLipidinventoryUpdateCache[key] = cache
		soapLipidinventoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q soapLipidinventoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for soap_lipidinventory")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for soap_lipidinventory")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SoapLipidinventorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), soapLipidinventoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"soap_lipidinventory\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, soapLipidinventoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in soapLipidinventory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all soapLipidinventory")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SoapLipidinventory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no soap_lipidinventory provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(soapLipidinventoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	soapLipidinventoryUpsertCacheMut.RLock()
	cache, cached := soapLipidinventoryUpsertCache[key]
	soapLipidinventoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			soapLipidinventoryAllColumns,
			soapLipidinventoryColumnsWithDefault,
			soapLipidinventoryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			soapLipidinventoryAllColumns,
			soapLipidinventoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert soap_lipidinventory, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(soapLipidinventoryPrimaryKeyColumns))
			copy(conflict, soapLipidinventoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"soap_lipidinventory\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(soapLipidinventoryType, soapLipidinventoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(soapLipidinventoryType, soapLipidinventoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert soap_lipidinventory")
	}

	if !cached {
		soapLipidinventoryUpsertCacheMut.Lock()
		soapLipidinventoryUpsertCache[key] = cache
		soapLipidinventoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SoapLipidinventory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SoapLipidinventory) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SoapLipidinventory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), soapLipidinventoryPrimaryKeyMapping)
		sql = "DELETE FROM \"soap_lipidinventory\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"soap_lipidinventory\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(soapLipidinventoryType, soapLipidinventoryMapping, append(wl, soapLipidinventoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from soap_lipidinventory")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for soap_lipidinventory")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q soapLipidinventoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no soapLipidinventoryQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from soap_lipidinventory")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for soap_lipidinventory")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SoapLipidinventorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(soapLipidinventoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), soapLipidinventoryPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"soap_lipidinventory\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, soapLipidinventoryPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), soapLipidinventoryPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"soap_lipidinventory\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, soapLipidinventoryPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from soapLipidinventory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for soap_lipidinventory")
	}

	if len(soapLipidinventoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SoapLipidinventory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSoapLipidinventory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SoapLipidinventorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SoapLipidinventorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), soapLipidinventoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"soap_lipidinventory\".* FROM \"soap_lipidinventory\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, soapLipidinventoryPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SoapLipidinventorySlice")
	}

	*o = slice

	return nil
}

// SoapLipidinventoryExists checks if the SoapLipidinventory row exists.
func SoapLipidinventoryExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"soap_lipidinventory\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if soap_lipidinventory exists")
	}

	return exists, nil
}
