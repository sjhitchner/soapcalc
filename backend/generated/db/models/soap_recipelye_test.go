// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSoapRecipelyes(t *testing.T) {
	t.Parallel()

	query := SoapRecipelyes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSoapRecipelyesSoftDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipelye{}
	if err = randomize.Struct(seed, o, soapRecipelyeDBTypes, true, soapRecipelyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelye struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapRecipelyes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapRecipelyesQuerySoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipelye{}
	if err = randomize.Struct(seed, o, soapRecipelyeDBTypes, true, soapRecipelyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelye struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SoapRecipelyes().DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapRecipelyes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapRecipelyesSliceSoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipelye{}
	if err = randomize.Struct(seed, o, soapRecipelyeDBTypes, true, soapRecipelyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelye struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SoapRecipelyeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapRecipelyes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapRecipelyesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipelye{}
	if err = randomize.Struct(seed, o, soapRecipelyeDBTypes, true, soapRecipelyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelye struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapRecipelyes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapRecipelyesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipelye{}
	if err = randomize.Struct(seed, o, soapRecipelyeDBTypes, true, soapRecipelyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelye struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SoapRecipelyes().DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapRecipelyes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapRecipelyesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipelye{}
	if err = randomize.Struct(seed, o, soapRecipelyeDBTypes, true, soapRecipelyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelye struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SoapRecipelyeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapRecipelyes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapRecipelyesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipelye{}
	if err = randomize.Struct(seed, o, soapRecipelyeDBTypes, true, soapRecipelyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelye struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SoapRecipelyeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if SoapRecipelye exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SoapRecipelyeExists to return true, but got false.")
	}
}

func testSoapRecipelyesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipelye{}
	if err = randomize.Struct(seed, o, soapRecipelyeDBTypes, true, soapRecipelyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelye struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	soapRecipelyeFound, err := FindSoapRecipelye(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if soapRecipelyeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSoapRecipelyesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipelye{}
	if err = randomize.Struct(seed, o, soapRecipelyeDBTypes, true, soapRecipelyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelye struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SoapRecipelyes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSoapRecipelyesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipelye{}
	if err = randomize.Struct(seed, o, soapRecipelyeDBTypes, true, soapRecipelyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelye struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SoapRecipelyes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSoapRecipelyesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	soapRecipelyeOne := &SoapRecipelye{}
	soapRecipelyeTwo := &SoapRecipelye{}
	if err = randomize.Struct(seed, soapRecipelyeOne, soapRecipelyeDBTypes, false, soapRecipelyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelye struct: %s", err)
	}
	if err = randomize.Struct(seed, soapRecipelyeTwo, soapRecipelyeDBTypes, false, soapRecipelyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelye struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = soapRecipelyeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = soapRecipelyeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SoapRecipelyes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSoapRecipelyesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	soapRecipelyeOne := &SoapRecipelye{}
	soapRecipelyeTwo := &SoapRecipelye{}
	if err = randomize.Struct(seed, soapRecipelyeOne, soapRecipelyeDBTypes, false, soapRecipelyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelye struct: %s", err)
	}
	if err = randomize.Struct(seed, soapRecipelyeTwo, soapRecipelyeDBTypes, false, soapRecipelyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelye struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = soapRecipelyeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = soapRecipelyeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapRecipelyes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func soapRecipelyeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapRecipelye) error {
	*o = SoapRecipelye{}
	return nil
}

func soapRecipelyeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapRecipelye) error {
	*o = SoapRecipelye{}
	return nil
}

func soapRecipelyeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *SoapRecipelye) error {
	*o = SoapRecipelye{}
	return nil
}

func soapRecipelyeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SoapRecipelye) error {
	*o = SoapRecipelye{}
	return nil
}

func soapRecipelyeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SoapRecipelye) error {
	*o = SoapRecipelye{}
	return nil
}

func soapRecipelyeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SoapRecipelye) error {
	*o = SoapRecipelye{}
	return nil
}

func soapRecipelyeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SoapRecipelye) error {
	*o = SoapRecipelye{}
	return nil
}

func soapRecipelyeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapRecipelye) error {
	*o = SoapRecipelye{}
	return nil
}

func soapRecipelyeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapRecipelye) error {
	*o = SoapRecipelye{}
	return nil
}

func testSoapRecipelyesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &SoapRecipelye{}
	o := &SoapRecipelye{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, soapRecipelyeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SoapRecipelye object: %s", err)
	}

	AddSoapRecipelyeHook(boil.BeforeInsertHook, soapRecipelyeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	soapRecipelyeBeforeInsertHooks = []SoapRecipelyeHook{}

	AddSoapRecipelyeHook(boil.AfterInsertHook, soapRecipelyeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	soapRecipelyeAfterInsertHooks = []SoapRecipelyeHook{}

	AddSoapRecipelyeHook(boil.AfterSelectHook, soapRecipelyeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	soapRecipelyeAfterSelectHooks = []SoapRecipelyeHook{}

	AddSoapRecipelyeHook(boil.BeforeUpdateHook, soapRecipelyeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	soapRecipelyeBeforeUpdateHooks = []SoapRecipelyeHook{}

	AddSoapRecipelyeHook(boil.AfterUpdateHook, soapRecipelyeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	soapRecipelyeAfterUpdateHooks = []SoapRecipelyeHook{}

	AddSoapRecipelyeHook(boil.BeforeDeleteHook, soapRecipelyeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	soapRecipelyeBeforeDeleteHooks = []SoapRecipelyeHook{}

	AddSoapRecipelyeHook(boil.AfterDeleteHook, soapRecipelyeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	soapRecipelyeAfterDeleteHooks = []SoapRecipelyeHook{}

	AddSoapRecipelyeHook(boil.BeforeUpsertHook, soapRecipelyeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	soapRecipelyeBeforeUpsertHooks = []SoapRecipelyeHook{}

	AddSoapRecipelyeHook(boil.AfterUpsertHook, soapRecipelyeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	soapRecipelyeAfterUpsertHooks = []SoapRecipelyeHook{}
}

func testSoapRecipelyesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipelye{}
	if err = randomize.Struct(seed, o, soapRecipelyeDBTypes, true, soapRecipelyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelye struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapRecipelyes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSoapRecipelyesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipelye{}
	if err = randomize.Struct(seed, o, soapRecipelyeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SoapRecipelye struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(soapRecipelyeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := SoapRecipelyes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSoapRecipelyeToManyLyeSoapRecipes(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SoapRecipelye
	var b, c SoapRecipe

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soapRecipelyeDBTypes, true, soapRecipelyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelye struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, soapRecipeDBTypes, false, soapRecipeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, soapRecipeDBTypes, false, soapRecipeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.LyeID = a.ID
	c.LyeID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.LyeSoapRecipes().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.LyeID == b.LyeID {
			bFound = true
		}
		if v.LyeID == c.LyeID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SoapRecipelyeSlice{&a}
	if err = a.L.LoadLyeSoapRecipes(ctx, tx, false, (*[]*SoapRecipelye)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.LyeSoapRecipes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.LyeSoapRecipes = nil
	if err = a.L.LoadLyeSoapRecipes(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.LyeSoapRecipes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSoapRecipelyeToManyAddOpLyeSoapRecipes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SoapRecipelye
	var b, c, d, e SoapRecipe

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soapRecipelyeDBTypes, false, strmangle.SetComplement(soapRecipelyePrimaryKeyColumns, soapRecipelyeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SoapRecipe{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, soapRecipeDBTypes, false, strmangle.SetComplement(soapRecipePrimaryKeyColumns, soapRecipeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SoapRecipe{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddLyeSoapRecipes(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.LyeID {
			t.Error("foreign key was wrong value", a.ID, first.LyeID)
		}
		if a.ID != second.LyeID {
			t.Error("foreign key was wrong value", a.ID, second.LyeID)
		}

		if first.R.Lye != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Lye != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.LyeSoapRecipes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.LyeSoapRecipes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.LyeSoapRecipes().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSoapRecipelyeToOneSoapLyeUsingLye(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SoapRecipelye
	var foreign SoapLye

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, soapRecipelyeDBTypes, false, soapRecipelyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelye struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, soapLyeDBTypes, false, soapLyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLye struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.LyeID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Lye().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SoapRecipelyeSlice{&local}
	if err = local.L.LoadLye(ctx, tx, false, (*[]*SoapRecipelye)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Lye == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Lye = nil
	if err = local.L.LoadLye(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Lye == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSoapRecipelyeToOneSetOpSoapLyeUsingLye(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SoapRecipelye
	var b, c SoapLye

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soapRecipelyeDBTypes, false, strmangle.SetComplement(soapRecipelyePrimaryKeyColumns, soapRecipelyeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, soapLyeDBTypes, false, strmangle.SetComplement(soapLyePrimaryKeyColumns, soapLyeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, soapLyeDBTypes, false, strmangle.SetComplement(soapLyePrimaryKeyColumns, soapLyeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SoapLye{&b, &c} {
		err = a.SetLye(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Lye != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.LyeSoapRecipelyes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.LyeID != x.ID {
			t.Error("foreign key was wrong value", a.LyeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.LyeID))
		reflect.Indirect(reflect.ValueOf(&a.LyeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.LyeID != x.ID {
			t.Error("foreign key was wrong value", a.LyeID, x.ID)
		}
	}
}

func testSoapRecipelyesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipelye{}
	if err = randomize.Struct(seed, o, soapRecipelyeDBTypes, true, soapRecipelyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelye struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSoapRecipelyesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipelye{}
	if err = randomize.Struct(seed, o, soapRecipelyeDBTypes, true, soapRecipelyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelye struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SoapRecipelyeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSoapRecipelyesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipelye{}
	if err = randomize.Struct(seed, o, soapRecipelyeDBTypes, true, soapRecipelyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelye struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SoapRecipelyes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	soapRecipelyeDBTypes = map[string]string{`CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `ID`: `character varying`, `Weight`: `double precision`, `Concentration`: `double precision`, `Discount`: `double precision`, `Cost`: `double precision`, `LyeID`: `integer`}
	_                    = bytes.MinRead
)

func testSoapRecipelyesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(soapRecipelyePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(soapRecipelyeAllColumns) == len(soapRecipelyePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipelye{}
	if err = randomize.Struct(seed, o, soapRecipelyeDBTypes, true, soapRecipelyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelye struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapRecipelyes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, soapRecipelyeDBTypes, true, soapRecipelyePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelye struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSoapRecipelyesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(soapRecipelyeAllColumns) == len(soapRecipelyePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipelye{}
	if err = randomize.Struct(seed, o, soapRecipelyeDBTypes, true, soapRecipelyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelye struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapRecipelyes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, soapRecipelyeDBTypes, true, soapRecipelyePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelye struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(soapRecipelyeAllColumns, soapRecipelyePrimaryKeyColumns) {
		fields = soapRecipelyeAllColumns
	} else {
		fields = strmangle.SetComplement(
			soapRecipelyeAllColumns,
			soapRecipelyePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SoapRecipelyeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSoapRecipelyesUpsert(t *testing.T) {
	t.Parallel()

	if len(soapRecipelyeAllColumns) == len(soapRecipelyePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SoapRecipelye{}
	if err = randomize.Struct(seed, &o, soapRecipelyeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SoapRecipelye struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SoapRecipelye: %s", err)
	}

	count, err := SoapRecipelyes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, soapRecipelyeDBTypes, false, soapRecipelyePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SoapRecipelye struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SoapRecipelye: %s", err)
	}

	count, err = SoapRecipelyes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
