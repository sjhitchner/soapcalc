// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSoapLipidinventories(t *testing.T) {
	t.Parallel()

	query := SoapLipidinventories()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSoapLipidinventoriesSoftDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLipidinventory{}
	if err = randomize.Struct(seed, o, soapLipidinventoryDBTypes, true, soapLipidinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipidinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapLipidinventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapLipidinventoriesQuerySoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLipidinventory{}
	if err = randomize.Struct(seed, o, soapLipidinventoryDBTypes, true, soapLipidinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipidinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SoapLipidinventories().DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapLipidinventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapLipidinventoriesSliceSoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLipidinventory{}
	if err = randomize.Struct(seed, o, soapLipidinventoryDBTypes, true, soapLipidinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipidinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SoapLipidinventorySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapLipidinventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapLipidinventoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLipidinventory{}
	if err = randomize.Struct(seed, o, soapLipidinventoryDBTypes, true, soapLipidinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipidinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapLipidinventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapLipidinventoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLipidinventory{}
	if err = randomize.Struct(seed, o, soapLipidinventoryDBTypes, true, soapLipidinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipidinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SoapLipidinventories().DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapLipidinventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapLipidinventoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLipidinventory{}
	if err = randomize.Struct(seed, o, soapLipidinventoryDBTypes, true, soapLipidinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipidinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SoapLipidinventorySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapLipidinventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapLipidinventoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLipidinventory{}
	if err = randomize.Struct(seed, o, soapLipidinventoryDBTypes, true, soapLipidinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipidinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SoapLipidinventoryExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if SoapLipidinventory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SoapLipidinventoryExists to return true, but got false.")
	}
}

func testSoapLipidinventoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLipidinventory{}
	if err = randomize.Struct(seed, o, soapLipidinventoryDBTypes, true, soapLipidinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipidinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	soapLipidinventoryFound, err := FindSoapLipidinventory(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if soapLipidinventoryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSoapLipidinventoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLipidinventory{}
	if err = randomize.Struct(seed, o, soapLipidinventoryDBTypes, true, soapLipidinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipidinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SoapLipidinventories().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSoapLipidinventoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLipidinventory{}
	if err = randomize.Struct(seed, o, soapLipidinventoryDBTypes, true, soapLipidinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipidinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SoapLipidinventories().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSoapLipidinventoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	soapLipidinventoryOne := &SoapLipidinventory{}
	soapLipidinventoryTwo := &SoapLipidinventory{}
	if err = randomize.Struct(seed, soapLipidinventoryOne, soapLipidinventoryDBTypes, false, soapLipidinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipidinventory struct: %s", err)
	}
	if err = randomize.Struct(seed, soapLipidinventoryTwo, soapLipidinventoryDBTypes, false, soapLipidinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipidinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = soapLipidinventoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = soapLipidinventoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SoapLipidinventories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSoapLipidinventoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	soapLipidinventoryOne := &SoapLipidinventory{}
	soapLipidinventoryTwo := &SoapLipidinventory{}
	if err = randomize.Struct(seed, soapLipidinventoryOne, soapLipidinventoryDBTypes, false, soapLipidinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipidinventory struct: %s", err)
	}
	if err = randomize.Struct(seed, soapLipidinventoryTwo, soapLipidinventoryDBTypes, false, soapLipidinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipidinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = soapLipidinventoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = soapLipidinventoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapLipidinventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func soapLipidinventoryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapLipidinventory) error {
	*o = SoapLipidinventory{}
	return nil
}

func soapLipidinventoryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapLipidinventory) error {
	*o = SoapLipidinventory{}
	return nil
}

func soapLipidinventoryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *SoapLipidinventory) error {
	*o = SoapLipidinventory{}
	return nil
}

func soapLipidinventoryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SoapLipidinventory) error {
	*o = SoapLipidinventory{}
	return nil
}

func soapLipidinventoryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SoapLipidinventory) error {
	*o = SoapLipidinventory{}
	return nil
}

func soapLipidinventoryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SoapLipidinventory) error {
	*o = SoapLipidinventory{}
	return nil
}

func soapLipidinventoryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SoapLipidinventory) error {
	*o = SoapLipidinventory{}
	return nil
}

func soapLipidinventoryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapLipidinventory) error {
	*o = SoapLipidinventory{}
	return nil
}

func soapLipidinventoryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapLipidinventory) error {
	*o = SoapLipidinventory{}
	return nil
}

func testSoapLipidinventoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &SoapLipidinventory{}
	o := &SoapLipidinventory{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, soapLipidinventoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SoapLipidinventory object: %s", err)
	}

	AddSoapLipidinventoryHook(boil.BeforeInsertHook, soapLipidinventoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	soapLipidinventoryBeforeInsertHooks = []SoapLipidinventoryHook{}

	AddSoapLipidinventoryHook(boil.AfterInsertHook, soapLipidinventoryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	soapLipidinventoryAfterInsertHooks = []SoapLipidinventoryHook{}

	AddSoapLipidinventoryHook(boil.AfterSelectHook, soapLipidinventoryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	soapLipidinventoryAfterSelectHooks = []SoapLipidinventoryHook{}

	AddSoapLipidinventoryHook(boil.BeforeUpdateHook, soapLipidinventoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	soapLipidinventoryBeforeUpdateHooks = []SoapLipidinventoryHook{}

	AddSoapLipidinventoryHook(boil.AfterUpdateHook, soapLipidinventoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	soapLipidinventoryAfterUpdateHooks = []SoapLipidinventoryHook{}

	AddSoapLipidinventoryHook(boil.BeforeDeleteHook, soapLipidinventoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	soapLipidinventoryBeforeDeleteHooks = []SoapLipidinventoryHook{}

	AddSoapLipidinventoryHook(boil.AfterDeleteHook, soapLipidinventoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	soapLipidinventoryAfterDeleteHooks = []SoapLipidinventoryHook{}

	AddSoapLipidinventoryHook(boil.BeforeUpsertHook, soapLipidinventoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	soapLipidinventoryBeforeUpsertHooks = []SoapLipidinventoryHook{}

	AddSoapLipidinventoryHook(boil.AfterUpsertHook, soapLipidinventoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	soapLipidinventoryAfterUpsertHooks = []SoapLipidinventoryHook{}
}

func testSoapLipidinventoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLipidinventory{}
	if err = randomize.Struct(seed, o, soapLipidinventoryDBTypes, true, soapLipidinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipidinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapLipidinventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSoapLipidinventoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLipidinventory{}
	if err = randomize.Struct(seed, o, soapLipidinventoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SoapLipidinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(soapLipidinventoryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := SoapLipidinventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSoapLipidinventoryToOneSoapLipidUsingLipid(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SoapLipidinventory
	var foreign SoapLipid

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, soapLipidinventoryDBTypes, false, soapLipidinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipidinventory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, soapLipidDBTypes, false, soapLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipid struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.LipidID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Lipid().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SoapLipidinventorySlice{&local}
	if err = local.L.LoadLipid(ctx, tx, false, (*[]*SoapLipidinventory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Lipid == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Lipid = nil
	if err = local.L.LoadLipid(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Lipid == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSoapLipidinventoryToOneSoapSupplierUsingSupplier(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SoapLipidinventory
	var foreign SoapSupplier

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, soapLipidinventoryDBTypes, false, soapLipidinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipidinventory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, soapSupplierDBTypes, false, soapSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapSupplier struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.SupplierID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Supplier().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SoapLipidinventorySlice{&local}
	if err = local.L.LoadSupplier(ctx, tx, false, (*[]*SoapLipidinventory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Supplier == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Supplier = nil
	if err = local.L.LoadSupplier(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Supplier == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSoapLipidinventoryToOneSetOpSoapLipidUsingLipid(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SoapLipidinventory
	var b, c SoapLipid

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soapLipidinventoryDBTypes, false, strmangle.SetComplement(soapLipidinventoryPrimaryKeyColumns, soapLipidinventoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, soapLipidDBTypes, false, strmangle.SetComplement(soapLipidPrimaryKeyColumns, soapLipidColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, soapLipidDBTypes, false, strmangle.SetComplement(soapLipidPrimaryKeyColumns, soapLipidColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SoapLipid{&b, &c} {
		err = a.SetLipid(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Lipid != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.LipidSoapLipidinventories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.LipidID != x.ID {
			t.Error("foreign key was wrong value", a.LipidID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.LipidID))
		reflect.Indirect(reflect.ValueOf(&a.LipidID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.LipidID != x.ID {
			t.Error("foreign key was wrong value", a.LipidID, x.ID)
		}
	}
}
func testSoapLipidinventoryToOneSetOpSoapSupplierUsingSupplier(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SoapLipidinventory
	var b, c SoapSupplier

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soapLipidinventoryDBTypes, false, strmangle.SetComplement(soapLipidinventoryPrimaryKeyColumns, soapLipidinventoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, soapSupplierDBTypes, false, strmangle.SetComplement(soapSupplierPrimaryKeyColumns, soapSupplierColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, soapSupplierDBTypes, false, strmangle.SetComplement(soapSupplierPrimaryKeyColumns, soapSupplierColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SoapSupplier{&b, &c} {
		err = a.SetSupplier(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Supplier != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SupplierSoapLipidinventories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SupplierID != x.ID {
			t.Error("foreign key was wrong value", a.SupplierID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SupplierID))
		reflect.Indirect(reflect.ValueOf(&a.SupplierID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SupplierID != x.ID {
			t.Error("foreign key was wrong value", a.SupplierID, x.ID)
		}
	}
}

func testSoapLipidinventoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLipidinventory{}
	if err = randomize.Struct(seed, o, soapLipidinventoryDBTypes, true, soapLipidinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipidinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSoapLipidinventoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLipidinventory{}
	if err = randomize.Struct(seed, o, soapLipidinventoryDBTypes, true, soapLipidinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipidinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SoapLipidinventorySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSoapLipidinventoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapLipidinventory{}
	if err = randomize.Struct(seed, o, soapLipidinventoryDBTypes, true, soapLipidinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipidinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SoapLipidinventories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	soapLipidinventoryDBTypes = map[string]string{`ID`: `integer`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `PurchaseDate`: `timestamp with time zone`, `ExpiryDate`: `timestamp with time zone`, `Cost`: `double precision`, `Weight`: `double precision`, `Sap`: `double precision`, `Naoh`: `double precision`, `Koh`: `double precision`, `GramsPerLiter`: `double precision`, `LipidID`: `integer`, `SupplierID`: `integer`}
	_                         = bytes.MinRead
)

func testSoapLipidinventoriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(soapLipidinventoryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(soapLipidinventoryAllColumns) == len(soapLipidinventoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SoapLipidinventory{}
	if err = randomize.Struct(seed, o, soapLipidinventoryDBTypes, true, soapLipidinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipidinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapLipidinventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, soapLipidinventoryDBTypes, true, soapLipidinventoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SoapLipidinventory struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSoapLipidinventoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(soapLipidinventoryAllColumns) == len(soapLipidinventoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SoapLipidinventory{}
	if err = randomize.Struct(seed, o, soapLipidinventoryDBTypes, true, soapLipidinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapLipidinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapLipidinventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, soapLipidinventoryDBTypes, true, soapLipidinventoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SoapLipidinventory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(soapLipidinventoryAllColumns, soapLipidinventoryPrimaryKeyColumns) {
		fields = soapLipidinventoryAllColumns
	} else {
		fields = strmangle.SetComplement(
			soapLipidinventoryAllColumns,
			soapLipidinventoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SoapLipidinventorySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSoapLipidinventoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(soapLipidinventoryAllColumns) == len(soapLipidinventoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SoapLipidinventory{}
	if err = randomize.Struct(seed, &o, soapLipidinventoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SoapLipidinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SoapLipidinventory: %s", err)
	}

	count, err := SoapLipidinventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, soapLipidinventoryDBTypes, false, soapLipidinventoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SoapLipidinventory struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SoapLipidinventory: %s", err)
	}

	count, err = SoapLipidinventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
