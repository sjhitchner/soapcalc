// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SoapAdditive is an object representing the database table.
type SoapAdditive struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *soapAdditiveR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L soapAdditiveL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SoapAdditiveColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
	Name      string
}{
	ID:        "id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
	Name:      "name",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var SoapAdditiveWhere = struct {
	ID        whereHelperint
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	DeletedAt whereHelpernull_Time
	Name      whereHelperstring
}{
	ID:        whereHelperint{field: "\"soap_additive\".\"id\""},
	CreatedAt: whereHelpertime_Time{field: "\"soap_additive\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"soap_additive\".\"updated_at\""},
	DeletedAt: whereHelpernull_Time{field: "\"soap_additive\".\"deleted_at\""},
	Name:      whereHelperstring{field: "\"soap_additive\".\"name\""},
}

// SoapAdditiveRels is where relationship names are stored.
var SoapAdditiveRels = struct {
	AdditiveSoapAdditiveinventories string
	AdditiveSoapRecipeadditives     string
}{
	AdditiveSoapAdditiveinventories: "AdditiveSoapAdditiveinventories",
	AdditiveSoapRecipeadditives:     "AdditiveSoapRecipeadditives",
}

// soapAdditiveR is where relationships are stored.
type soapAdditiveR struct {
	AdditiveSoapAdditiveinventories SoapAdditiveinventorySlice `boil:"AdditiveSoapAdditiveinventories" json:"AdditiveSoapAdditiveinventories" toml:"AdditiveSoapAdditiveinventories" yaml:"AdditiveSoapAdditiveinventories"`
	AdditiveSoapRecipeadditives     SoapRecipeadditiveSlice    `boil:"AdditiveSoapRecipeadditives" json:"AdditiveSoapRecipeadditives" toml:"AdditiveSoapRecipeadditives" yaml:"AdditiveSoapRecipeadditives"`
}

// NewStruct creates a new relationship struct
func (*soapAdditiveR) NewStruct() *soapAdditiveR {
	return &soapAdditiveR{}
}

// soapAdditiveL is where Load methods for each relationship are stored.
type soapAdditiveL struct{}

var (
	soapAdditiveAllColumns            = []string{"id", "created_at", "updated_at", "deleted_at", "name"}
	soapAdditiveColumnsWithoutDefault = []string{"created_at", "updated_at", "deleted_at", "name"}
	soapAdditiveColumnsWithDefault    = []string{"id"}
	soapAdditivePrimaryKeyColumns     = []string{"id"}
)

type (
	// SoapAdditiveSlice is an alias for a slice of pointers to SoapAdditive.
	// This should generally be used opposed to []SoapAdditive.
	SoapAdditiveSlice []*SoapAdditive
	// SoapAdditiveHook is the signature for custom SoapAdditive hook methods
	SoapAdditiveHook func(context.Context, boil.ContextExecutor, *SoapAdditive) error

	soapAdditiveQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	soapAdditiveType                 = reflect.TypeOf(&SoapAdditive{})
	soapAdditiveMapping              = queries.MakeStructMapping(soapAdditiveType)
	soapAdditivePrimaryKeyMapping, _ = queries.BindMapping(soapAdditiveType, soapAdditiveMapping, soapAdditivePrimaryKeyColumns)
	soapAdditiveInsertCacheMut       sync.RWMutex
	soapAdditiveInsertCache          = make(map[string]insertCache)
	soapAdditiveUpdateCacheMut       sync.RWMutex
	soapAdditiveUpdateCache          = make(map[string]updateCache)
	soapAdditiveUpsertCacheMut       sync.RWMutex
	soapAdditiveUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var soapAdditiveBeforeInsertHooks []SoapAdditiveHook
var soapAdditiveBeforeUpdateHooks []SoapAdditiveHook
var soapAdditiveBeforeDeleteHooks []SoapAdditiveHook
var soapAdditiveBeforeUpsertHooks []SoapAdditiveHook

var soapAdditiveAfterInsertHooks []SoapAdditiveHook
var soapAdditiveAfterSelectHooks []SoapAdditiveHook
var soapAdditiveAfterUpdateHooks []SoapAdditiveHook
var soapAdditiveAfterDeleteHooks []SoapAdditiveHook
var soapAdditiveAfterUpsertHooks []SoapAdditiveHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SoapAdditive) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapAdditiveBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SoapAdditive) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapAdditiveBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SoapAdditive) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapAdditiveBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SoapAdditive) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapAdditiveBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SoapAdditive) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapAdditiveAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SoapAdditive) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapAdditiveAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SoapAdditive) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapAdditiveAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SoapAdditive) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapAdditiveAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SoapAdditive) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapAdditiveAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSoapAdditiveHook registers your hook function for all future operations.
func AddSoapAdditiveHook(hookPoint boil.HookPoint, soapAdditiveHook SoapAdditiveHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		soapAdditiveBeforeInsertHooks = append(soapAdditiveBeforeInsertHooks, soapAdditiveHook)
	case boil.BeforeUpdateHook:
		soapAdditiveBeforeUpdateHooks = append(soapAdditiveBeforeUpdateHooks, soapAdditiveHook)
	case boil.BeforeDeleteHook:
		soapAdditiveBeforeDeleteHooks = append(soapAdditiveBeforeDeleteHooks, soapAdditiveHook)
	case boil.BeforeUpsertHook:
		soapAdditiveBeforeUpsertHooks = append(soapAdditiveBeforeUpsertHooks, soapAdditiveHook)
	case boil.AfterInsertHook:
		soapAdditiveAfterInsertHooks = append(soapAdditiveAfterInsertHooks, soapAdditiveHook)
	case boil.AfterSelectHook:
		soapAdditiveAfterSelectHooks = append(soapAdditiveAfterSelectHooks, soapAdditiveHook)
	case boil.AfterUpdateHook:
		soapAdditiveAfterUpdateHooks = append(soapAdditiveAfterUpdateHooks, soapAdditiveHook)
	case boil.AfterDeleteHook:
		soapAdditiveAfterDeleteHooks = append(soapAdditiveAfterDeleteHooks, soapAdditiveHook)
	case boil.AfterUpsertHook:
		soapAdditiveAfterUpsertHooks = append(soapAdditiveAfterUpsertHooks, soapAdditiveHook)
	}
}

// One returns a single soapAdditive record from the query.
func (q soapAdditiveQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SoapAdditive, error) {
	o := &SoapAdditive{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for soap_additive")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SoapAdditive records from the query.
func (q soapAdditiveQuery) All(ctx context.Context, exec boil.ContextExecutor) (SoapAdditiveSlice, error) {
	var o []*SoapAdditive

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SoapAdditive slice")
	}

	if len(soapAdditiveAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SoapAdditive records in the query.
func (q soapAdditiveQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count soap_additive rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q soapAdditiveQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if soap_additive exists")
	}

	return count > 0, nil
}

// AdditiveSoapAdditiveinventories retrieves all the soap_additiveinventory's SoapAdditiveinventories with an executor via additive_id column.
func (o *SoapAdditive) AdditiveSoapAdditiveinventories(mods ...qm.QueryMod) soapAdditiveinventoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"soap_additiveinventory\".\"additive_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"soap_additiveinventory\".\"deleted_at\""),
	)

	query := SoapAdditiveinventories(queryMods...)
	queries.SetFrom(query.Query, "\"soap_additiveinventory\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"soap_additiveinventory\".*"})
	}

	return query
}

// AdditiveSoapRecipeadditives retrieves all the soap_recipeadditive's SoapRecipeadditives with an executor via additive_id column.
func (o *SoapAdditive) AdditiveSoapRecipeadditives(mods ...qm.QueryMod) soapRecipeadditiveQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"soap_recipeadditive\".\"additive_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"soap_recipeadditive\".\"deleted_at\""),
	)

	query := SoapRecipeadditives(queryMods...)
	queries.SetFrom(query.Query, "\"soap_recipeadditive\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"soap_recipeadditive\".*"})
	}

	return query
}

// LoadAdditiveSoapAdditiveinventories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (soapAdditiveL) LoadAdditiveSoapAdditiveinventories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSoapAdditive interface{}, mods queries.Applicator) error {
	var slice []*SoapAdditive
	var object *SoapAdditive

	if singular {
		object = maybeSoapAdditive.(*SoapAdditive)
	} else {
		slice = *maybeSoapAdditive.(*[]*SoapAdditive)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &soapAdditiveR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &soapAdditiveR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`soap_additiveinventory`),
		qm.WhereIn(`soap_additiveinventory.additive_id in ?`, args...),
		qmhelper.WhereIsNull(`soap_additiveinventory.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load soap_additiveinventory")
	}

	var resultSlice []*SoapAdditiveinventory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice soap_additiveinventory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on soap_additiveinventory")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for soap_additiveinventory")
	}

	if len(soapAdditiveinventoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AdditiveSoapAdditiveinventories = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AdditiveID {
				local.R.AdditiveSoapAdditiveinventories = append(local.R.AdditiveSoapAdditiveinventories, foreign)
				break
			}
		}
	}

	return nil
}

// LoadAdditiveSoapRecipeadditives allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (soapAdditiveL) LoadAdditiveSoapRecipeadditives(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSoapAdditive interface{}, mods queries.Applicator) error {
	var slice []*SoapAdditive
	var object *SoapAdditive

	if singular {
		object = maybeSoapAdditive.(*SoapAdditive)
	} else {
		slice = *maybeSoapAdditive.(*[]*SoapAdditive)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &soapAdditiveR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &soapAdditiveR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`soap_recipeadditive`),
		qm.WhereIn(`soap_recipeadditive.additive_id in ?`, args...),
		qmhelper.WhereIsNull(`soap_recipeadditive.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load soap_recipeadditive")
	}

	var resultSlice []*SoapRecipeadditive
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice soap_recipeadditive")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on soap_recipeadditive")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for soap_recipeadditive")
	}

	if len(soapRecipeadditiveAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AdditiveSoapRecipeadditives = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AdditiveID {
				local.R.AdditiveSoapRecipeadditives = append(local.R.AdditiveSoapRecipeadditives, foreign)
				break
			}
		}
	}

	return nil
}

// AddAdditiveSoapAdditiveinventories adds the given related objects to the existing relationships
// of the soap_additive, optionally inserting them as new records.
// Appends related to o.R.AdditiveSoapAdditiveinventories.
// Sets related.R.Additive appropriately.
func (o *SoapAdditive) AddAdditiveSoapAdditiveinventories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SoapAdditiveinventory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AdditiveID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"soap_additiveinventory\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"additive_id"}),
				strmangle.WhereClause("\"", "\"", 2, soapAdditiveinventoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AdditiveID = o.ID
		}
	}

	if o.R == nil {
		o.R = &soapAdditiveR{
			AdditiveSoapAdditiveinventories: related,
		}
	} else {
		o.R.AdditiveSoapAdditiveinventories = append(o.R.AdditiveSoapAdditiveinventories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &soapAdditiveinventoryR{
				Additive: o,
			}
		} else {
			rel.R.Additive = o
		}
	}
	return nil
}

// AddAdditiveSoapRecipeadditives adds the given related objects to the existing relationships
// of the soap_additive, optionally inserting them as new records.
// Appends related to o.R.AdditiveSoapRecipeadditives.
// Sets related.R.Additive appropriately.
func (o *SoapAdditive) AddAdditiveSoapRecipeadditives(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SoapRecipeadditive) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AdditiveID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"soap_recipeadditive\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"additive_id"}),
				strmangle.WhereClause("\"", "\"", 2, soapRecipeadditivePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AdditiveID = o.ID
		}
	}

	if o.R == nil {
		o.R = &soapAdditiveR{
			AdditiveSoapRecipeadditives: related,
		}
	} else {
		o.R.AdditiveSoapRecipeadditives = append(o.R.AdditiveSoapRecipeadditives, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &soapRecipeadditiveR{
				Additive: o,
			}
		} else {
			rel.R.Additive = o
		}
	}
	return nil
}

// SoapAdditives retrieves all the records using an executor.
func SoapAdditives(mods ...qm.QueryMod) soapAdditiveQuery {
	mods = append(mods, qm.From("\"soap_additive\""), qmhelper.WhereIsNull("\"soap_additive\".\"deleted_at\""))
	return soapAdditiveQuery{NewQuery(mods...)}
}

// FindSoapAdditive retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSoapAdditive(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*SoapAdditive, error) {
	soapAdditiveObj := &SoapAdditive{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"soap_additive\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, soapAdditiveObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from soap_additive")
	}

	return soapAdditiveObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SoapAdditive) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no soap_additive provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(soapAdditiveColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	soapAdditiveInsertCacheMut.RLock()
	cache, cached := soapAdditiveInsertCache[key]
	soapAdditiveInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			soapAdditiveAllColumns,
			soapAdditiveColumnsWithDefault,
			soapAdditiveColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(soapAdditiveType, soapAdditiveMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(soapAdditiveType, soapAdditiveMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"soap_additive\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"soap_additive\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into soap_additive")
	}

	if !cached {
		soapAdditiveInsertCacheMut.Lock()
		soapAdditiveInsertCache[key] = cache
		soapAdditiveInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SoapAdditive.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SoapAdditive) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	soapAdditiveUpdateCacheMut.RLock()
	cache, cached := soapAdditiveUpdateCache[key]
	soapAdditiveUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			soapAdditiveAllColumns,
			soapAdditivePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update soap_additive, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"soap_additive\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, soapAdditivePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(soapAdditiveType, soapAdditiveMapping, append(wl, soapAdditivePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update soap_additive row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for soap_additive")
	}

	if !cached {
		soapAdditiveUpdateCacheMut.Lock()
		soapAdditiveUpdateCache[key] = cache
		soapAdditiveUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q soapAdditiveQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for soap_additive")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for soap_additive")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SoapAdditiveSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), soapAdditivePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"soap_additive\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, soapAdditivePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in soapAdditive slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all soapAdditive")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SoapAdditive) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no soap_additive provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(soapAdditiveColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	soapAdditiveUpsertCacheMut.RLock()
	cache, cached := soapAdditiveUpsertCache[key]
	soapAdditiveUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			soapAdditiveAllColumns,
			soapAdditiveColumnsWithDefault,
			soapAdditiveColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			soapAdditiveAllColumns,
			soapAdditivePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert soap_additive, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(soapAdditivePrimaryKeyColumns))
			copy(conflict, soapAdditivePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"soap_additive\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(soapAdditiveType, soapAdditiveMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(soapAdditiveType, soapAdditiveMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert soap_additive")
	}

	if !cached {
		soapAdditiveUpsertCacheMut.Lock()
		soapAdditiveUpsertCache[key] = cache
		soapAdditiveUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SoapAdditive record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SoapAdditive) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SoapAdditive provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), soapAdditivePrimaryKeyMapping)
		sql = "DELETE FROM \"soap_additive\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"soap_additive\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(soapAdditiveType, soapAdditiveMapping, append(wl, soapAdditivePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from soap_additive")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for soap_additive")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q soapAdditiveQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no soapAdditiveQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from soap_additive")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for soap_additive")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SoapAdditiveSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(soapAdditiveBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), soapAdditivePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"soap_additive\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, soapAdditivePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), soapAdditivePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"soap_additive\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, soapAdditivePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from soapAdditive slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for soap_additive")
	}

	if len(soapAdditiveAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SoapAdditive) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSoapAdditive(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SoapAdditiveSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SoapAdditiveSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), soapAdditivePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"soap_additive\".* FROM \"soap_additive\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, soapAdditivePrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SoapAdditiveSlice")
	}

	*o = slice

	return nil
}

// SoapAdditiveExists checks if the SoapAdditive row exists.
func SoapAdditiveExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"soap_additive\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if soap_additive exists")
	}

	return exists, nil
}
