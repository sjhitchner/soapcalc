// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSoapAdditiveinventories(t *testing.T) {
	t.Parallel()

	query := SoapAdditiveinventories()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSoapAdditiveinventoriesSoftDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapAdditiveinventory{}
	if err = randomize.Struct(seed, o, soapAdditiveinventoryDBTypes, true, soapAdditiveinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditiveinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapAdditiveinventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapAdditiveinventoriesQuerySoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapAdditiveinventory{}
	if err = randomize.Struct(seed, o, soapAdditiveinventoryDBTypes, true, soapAdditiveinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditiveinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SoapAdditiveinventories().DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapAdditiveinventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapAdditiveinventoriesSliceSoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapAdditiveinventory{}
	if err = randomize.Struct(seed, o, soapAdditiveinventoryDBTypes, true, soapAdditiveinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditiveinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SoapAdditiveinventorySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapAdditiveinventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapAdditiveinventoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapAdditiveinventory{}
	if err = randomize.Struct(seed, o, soapAdditiveinventoryDBTypes, true, soapAdditiveinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditiveinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapAdditiveinventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapAdditiveinventoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapAdditiveinventory{}
	if err = randomize.Struct(seed, o, soapAdditiveinventoryDBTypes, true, soapAdditiveinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditiveinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SoapAdditiveinventories().DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapAdditiveinventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapAdditiveinventoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapAdditiveinventory{}
	if err = randomize.Struct(seed, o, soapAdditiveinventoryDBTypes, true, soapAdditiveinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditiveinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SoapAdditiveinventorySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapAdditiveinventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapAdditiveinventoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapAdditiveinventory{}
	if err = randomize.Struct(seed, o, soapAdditiveinventoryDBTypes, true, soapAdditiveinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditiveinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SoapAdditiveinventoryExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if SoapAdditiveinventory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SoapAdditiveinventoryExists to return true, but got false.")
	}
}

func testSoapAdditiveinventoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapAdditiveinventory{}
	if err = randomize.Struct(seed, o, soapAdditiveinventoryDBTypes, true, soapAdditiveinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditiveinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	soapAdditiveinventoryFound, err := FindSoapAdditiveinventory(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if soapAdditiveinventoryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSoapAdditiveinventoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapAdditiveinventory{}
	if err = randomize.Struct(seed, o, soapAdditiveinventoryDBTypes, true, soapAdditiveinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditiveinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SoapAdditiveinventories().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSoapAdditiveinventoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapAdditiveinventory{}
	if err = randomize.Struct(seed, o, soapAdditiveinventoryDBTypes, true, soapAdditiveinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditiveinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SoapAdditiveinventories().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSoapAdditiveinventoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	soapAdditiveinventoryOne := &SoapAdditiveinventory{}
	soapAdditiveinventoryTwo := &SoapAdditiveinventory{}
	if err = randomize.Struct(seed, soapAdditiveinventoryOne, soapAdditiveinventoryDBTypes, false, soapAdditiveinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditiveinventory struct: %s", err)
	}
	if err = randomize.Struct(seed, soapAdditiveinventoryTwo, soapAdditiveinventoryDBTypes, false, soapAdditiveinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditiveinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = soapAdditiveinventoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = soapAdditiveinventoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SoapAdditiveinventories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSoapAdditiveinventoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	soapAdditiveinventoryOne := &SoapAdditiveinventory{}
	soapAdditiveinventoryTwo := &SoapAdditiveinventory{}
	if err = randomize.Struct(seed, soapAdditiveinventoryOne, soapAdditiveinventoryDBTypes, false, soapAdditiveinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditiveinventory struct: %s", err)
	}
	if err = randomize.Struct(seed, soapAdditiveinventoryTwo, soapAdditiveinventoryDBTypes, false, soapAdditiveinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditiveinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = soapAdditiveinventoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = soapAdditiveinventoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapAdditiveinventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func soapAdditiveinventoryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapAdditiveinventory) error {
	*o = SoapAdditiveinventory{}
	return nil
}

func soapAdditiveinventoryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapAdditiveinventory) error {
	*o = SoapAdditiveinventory{}
	return nil
}

func soapAdditiveinventoryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *SoapAdditiveinventory) error {
	*o = SoapAdditiveinventory{}
	return nil
}

func soapAdditiveinventoryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SoapAdditiveinventory) error {
	*o = SoapAdditiveinventory{}
	return nil
}

func soapAdditiveinventoryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SoapAdditiveinventory) error {
	*o = SoapAdditiveinventory{}
	return nil
}

func soapAdditiveinventoryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SoapAdditiveinventory) error {
	*o = SoapAdditiveinventory{}
	return nil
}

func soapAdditiveinventoryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SoapAdditiveinventory) error {
	*o = SoapAdditiveinventory{}
	return nil
}

func soapAdditiveinventoryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapAdditiveinventory) error {
	*o = SoapAdditiveinventory{}
	return nil
}

func soapAdditiveinventoryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapAdditiveinventory) error {
	*o = SoapAdditiveinventory{}
	return nil
}

func testSoapAdditiveinventoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &SoapAdditiveinventory{}
	o := &SoapAdditiveinventory{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, soapAdditiveinventoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SoapAdditiveinventory object: %s", err)
	}

	AddSoapAdditiveinventoryHook(boil.BeforeInsertHook, soapAdditiveinventoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	soapAdditiveinventoryBeforeInsertHooks = []SoapAdditiveinventoryHook{}

	AddSoapAdditiveinventoryHook(boil.AfterInsertHook, soapAdditiveinventoryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	soapAdditiveinventoryAfterInsertHooks = []SoapAdditiveinventoryHook{}

	AddSoapAdditiveinventoryHook(boil.AfterSelectHook, soapAdditiveinventoryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	soapAdditiveinventoryAfterSelectHooks = []SoapAdditiveinventoryHook{}

	AddSoapAdditiveinventoryHook(boil.BeforeUpdateHook, soapAdditiveinventoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	soapAdditiveinventoryBeforeUpdateHooks = []SoapAdditiveinventoryHook{}

	AddSoapAdditiveinventoryHook(boil.AfterUpdateHook, soapAdditiveinventoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	soapAdditiveinventoryAfterUpdateHooks = []SoapAdditiveinventoryHook{}

	AddSoapAdditiveinventoryHook(boil.BeforeDeleteHook, soapAdditiveinventoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	soapAdditiveinventoryBeforeDeleteHooks = []SoapAdditiveinventoryHook{}

	AddSoapAdditiveinventoryHook(boil.AfterDeleteHook, soapAdditiveinventoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	soapAdditiveinventoryAfterDeleteHooks = []SoapAdditiveinventoryHook{}

	AddSoapAdditiveinventoryHook(boil.BeforeUpsertHook, soapAdditiveinventoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	soapAdditiveinventoryBeforeUpsertHooks = []SoapAdditiveinventoryHook{}

	AddSoapAdditiveinventoryHook(boil.AfterUpsertHook, soapAdditiveinventoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	soapAdditiveinventoryAfterUpsertHooks = []SoapAdditiveinventoryHook{}
}

func testSoapAdditiveinventoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapAdditiveinventory{}
	if err = randomize.Struct(seed, o, soapAdditiveinventoryDBTypes, true, soapAdditiveinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditiveinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapAdditiveinventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSoapAdditiveinventoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapAdditiveinventory{}
	if err = randomize.Struct(seed, o, soapAdditiveinventoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SoapAdditiveinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(soapAdditiveinventoryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := SoapAdditiveinventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSoapAdditiveinventoryToOneSoapAdditiveUsingAdditive(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SoapAdditiveinventory
	var foreign SoapAdditive

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, soapAdditiveinventoryDBTypes, false, soapAdditiveinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditiveinventory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, soapAdditiveDBTypes, false, soapAdditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditive struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AdditiveID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Additive().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SoapAdditiveinventorySlice{&local}
	if err = local.L.LoadAdditive(ctx, tx, false, (*[]*SoapAdditiveinventory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Additive == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Additive = nil
	if err = local.L.LoadAdditive(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Additive == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSoapAdditiveinventoryToOneSoapSupplierUsingSupplier(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SoapAdditiveinventory
	var foreign SoapSupplier

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, soapAdditiveinventoryDBTypes, false, soapAdditiveinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditiveinventory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, soapSupplierDBTypes, false, soapSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapSupplier struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.SupplierID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Supplier().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SoapAdditiveinventorySlice{&local}
	if err = local.L.LoadSupplier(ctx, tx, false, (*[]*SoapAdditiveinventory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Supplier == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Supplier = nil
	if err = local.L.LoadSupplier(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Supplier == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSoapAdditiveinventoryToOneSetOpSoapAdditiveUsingAdditive(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SoapAdditiveinventory
	var b, c SoapAdditive

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soapAdditiveinventoryDBTypes, false, strmangle.SetComplement(soapAdditiveinventoryPrimaryKeyColumns, soapAdditiveinventoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, soapAdditiveDBTypes, false, strmangle.SetComplement(soapAdditivePrimaryKeyColumns, soapAdditiveColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, soapAdditiveDBTypes, false, strmangle.SetComplement(soapAdditivePrimaryKeyColumns, soapAdditiveColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SoapAdditive{&b, &c} {
		err = a.SetAdditive(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Additive != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AdditiveSoapAdditiveinventories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AdditiveID != x.ID {
			t.Error("foreign key was wrong value", a.AdditiveID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AdditiveID))
		reflect.Indirect(reflect.ValueOf(&a.AdditiveID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.AdditiveID != x.ID {
			t.Error("foreign key was wrong value", a.AdditiveID, x.ID)
		}
	}
}
func testSoapAdditiveinventoryToOneSetOpSoapSupplierUsingSupplier(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SoapAdditiveinventory
	var b, c SoapSupplier

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soapAdditiveinventoryDBTypes, false, strmangle.SetComplement(soapAdditiveinventoryPrimaryKeyColumns, soapAdditiveinventoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, soapSupplierDBTypes, false, strmangle.SetComplement(soapSupplierPrimaryKeyColumns, soapSupplierColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, soapSupplierDBTypes, false, strmangle.SetComplement(soapSupplierPrimaryKeyColumns, soapSupplierColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SoapSupplier{&b, &c} {
		err = a.SetSupplier(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Supplier != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SupplierSoapAdditiveinventories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SupplierID != x.ID {
			t.Error("foreign key was wrong value", a.SupplierID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SupplierID))
		reflect.Indirect(reflect.ValueOf(&a.SupplierID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SupplierID != x.ID {
			t.Error("foreign key was wrong value", a.SupplierID, x.ID)
		}
	}
}

func testSoapAdditiveinventoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapAdditiveinventory{}
	if err = randomize.Struct(seed, o, soapAdditiveinventoryDBTypes, true, soapAdditiveinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditiveinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSoapAdditiveinventoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapAdditiveinventory{}
	if err = randomize.Struct(seed, o, soapAdditiveinventoryDBTypes, true, soapAdditiveinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditiveinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SoapAdditiveinventorySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSoapAdditiveinventoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapAdditiveinventory{}
	if err = randomize.Struct(seed, o, soapAdditiveinventoryDBTypes, true, soapAdditiveinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditiveinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SoapAdditiveinventories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	soapAdditiveinventoryDBTypes = map[string]string{`ID`: `integer`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `PurchaseDate`: `timestamp with time zone`, `ExpiryDate`: `timestamp with time zone`, `Cost`: `double precision`, `Weight`: `double precision`, `AdditiveID`: `integer`, `SupplierID`: `integer`}
	_                            = bytes.MinRead
)

func testSoapAdditiveinventoriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(soapAdditiveinventoryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(soapAdditiveinventoryAllColumns) == len(soapAdditiveinventoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SoapAdditiveinventory{}
	if err = randomize.Struct(seed, o, soapAdditiveinventoryDBTypes, true, soapAdditiveinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditiveinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapAdditiveinventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, soapAdditiveinventoryDBTypes, true, soapAdditiveinventoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SoapAdditiveinventory struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSoapAdditiveinventoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(soapAdditiveinventoryAllColumns) == len(soapAdditiveinventoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SoapAdditiveinventory{}
	if err = randomize.Struct(seed, o, soapAdditiveinventoryDBTypes, true, soapAdditiveinventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapAdditiveinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapAdditiveinventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, soapAdditiveinventoryDBTypes, true, soapAdditiveinventoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SoapAdditiveinventory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(soapAdditiveinventoryAllColumns, soapAdditiveinventoryPrimaryKeyColumns) {
		fields = soapAdditiveinventoryAllColumns
	} else {
		fields = strmangle.SetComplement(
			soapAdditiveinventoryAllColumns,
			soapAdditiveinventoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SoapAdditiveinventorySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSoapAdditiveinventoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(soapAdditiveinventoryAllColumns) == len(soapAdditiveinventoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SoapAdditiveinventory{}
	if err = randomize.Struct(seed, &o, soapAdditiveinventoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SoapAdditiveinventory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SoapAdditiveinventory: %s", err)
	}

	count, err := SoapAdditiveinventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, soapAdditiveinventoryDBTypes, false, soapAdditiveinventoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SoapAdditiveinventory struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SoapAdditiveinventory: %s", err)
	}

	count, err = SoapAdditiveinventories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
