// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SoapSupplier is an object representing the database table.
type SoapSupplier struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Website   string    `boil:"website" json:"website" toml:"website" yaml:"website"`
	Note      string    `boil:"note" json:"note" toml:"note" yaml:"note"`

	R *soapSupplierR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L soapSupplierL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SoapSupplierColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
	Name      string
	Website   string
	Note      string
}{
	ID:        "id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
	Name:      "name",
	Website:   "website",
	Note:      "note",
}

// Generated where

var SoapSupplierWhere = struct {
	ID        whereHelperint
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	DeletedAt whereHelpernull_Time
	Name      whereHelperstring
	Website   whereHelperstring
	Note      whereHelperstring
}{
	ID:        whereHelperint{field: "\"soap_supplier\".\"id\""},
	CreatedAt: whereHelpertime_Time{field: "\"soap_supplier\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"soap_supplier\".\"updated_at\""},
	DeletedAt: whereHelpernull_Time{field: "\"soap_supplier\".\"deleted_at\""},
	Name:      whereHelperstring{field: "\"soap_supplier\".\"name\""},
	Website:   whereHelperstring{field: "\"soap_supplier\".\"website\""},
	Note:      whereHelperstring{field: "\"soap_supplier\".\"note\""},
}

// SoapSupplierRels is where relationship names are stored.
var SoapSupplierRels = struct {
	SupplierSoapAdditiveinventories  string
	SupplierSoapFragranceinventories string
	SupplierSoapLipidinventories     string
	SupplierSoapLyeinventories       string
}{
	SupplierSoapAdditiveinventories:  "SupplierSoapAdditiveinventories",
	SupplierSoapFragranceinventories: "SupplierSoapFragranceinventories",
	SupplierSoapLipidinventories:     "SupplierSoapLipidinventories",
	SupplierSoapLyeinventories:       "SupplierSoapLyeinventories",
}

// soapSupplierR is where relationships are stored.
type soapSupplierR struct {
	SupplierSoapAdditiveinventories  SoapAdditiveinventorySlice  `boil:"SupplierSoapAdditiveinventories" json:"SupplierSoapAdditiveinventories" toml:"SupplierSoapAdditiveinventories" yaml:"SupplierSoapAdditiveinventories"`
	SupplierSoapFragranceinventories SoapFragranceinventorySlice `boil:"SupplierSoapFragranceinventories" json:"SupplierSoapFragranceinventories" toml:"SupplierSoapFragranceinventories" yaml:"SupplierSoapFragranceinventories"`
	SupplierSoapLipidinventories     SoapLipidinventorySlice     `boil:"SupplierSoapLipidinventories" json:"SupplierSoapLipidinventories" toml:"SupplierSoapLipidinventories" yaml:"SupplierSoapLipidinventories"`
	SupplierSoapLyeinventories       SoapLyeinventorySlice       `boil:"SupplierSoapLyeinventories" json:"SupplierSoapLyeinventories" toml:"SupplierSoapLyeinventories" yaml:"SupplierSoapLyeinventories"`
}

// NewStruct creates a new relationship struct
func (*soapSupplierR) NewStruct() *soapSupplierR {
	return &soapSupplierR{}
}

// soapSupplierL is where Load methods for each relationship are stored.
type soapSupplierL struct{}

var (
	soapSupplierAllColumns            = []string{"id", "created_at", "updated_at", "deleted_at", "name", "website", "note"}
	soapSupplierColumnsWithoutDefault = []string{"created_at", "updated_at", "deleted_at", "name", "website", "note"}
	soapSupplierColumnsWithDefault    = []string{"id"}
	soapSupplierPrimaryKeyColumns     = []string{"id"}
)

type (
	// SoapSupplierSlice is an alias for a slice of pointers to SoapSupplier.
	// This should generally be used opposed to []SoapSupplier.
	SoapSupplierSlice []*SoapSupplier
	// SoapSupplierHook is the signature for custom SoapSupplier hook methods
	SoapSupplierHook func(context.Context, boil.ContextExecutor, *SoapSupplier) error

	soapSupplierQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	soapSupplierType                 = reflect.TypeOf(&SoapSupplier{})
	soapSupplierMapping              = queries.MakeStructMapping(soapSupplierType)
	soapSupplierPrimaryKeyMapping, _ = queries.BindMapping(soapSupplierType, soapSupplierMapping, soapSupplierPrimaryKeyColumns)
	soapSupplierInsertCacheMut       sync.RWMutex
	soapSupplierInsertCache          = make(map[string]insertCache)
	soapSupplierUpdateCacheMut       sync.RWMutex
	soapSupplierUpdateCache          = make(map[string]updateCache)
	soapSupplierUpsertCacheMut       sync.RWMutex
	soapSupplierUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var soapSupplierBeforeInsertHooks []SoapSupplierHook
var soapSupplierBeforeUpdateHooks []SoapSupplierHook
var soapSupplierBeforeDeleteHooks []SoapSupplierHook
var soapSupplierBeforeUpsertHooks []SoapSupplierHook

var soapSupplierAfterInsertHooks []SoapSupplierHook
var soapSupplierAfterSelectHooks []SoapSupplierHook
var soapSupplierAfterUpdateHooks []SoapSupplierHook
var soapSupplierAfterDeleteHooks []SoapSupplierHook
var soapSupplierAfterUpsertHooks []SoapSupplierHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SoapSupplier) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapSupplierBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SoapSupplier) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapSupplierBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SoapSupplier) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapSupplierBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SoapSupplier) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapSupplierBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SoapSupplier) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapSupplierAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SoapSupplier) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapSupplierAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SoapSupplier) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapSupplierAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SoapSupplier) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapSupplierAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SoapSupplier) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapSupplierAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSoapSupplierHook registers your hook function for all future operations.
func AddSoapSupplierHook(hookPoint boil.HookPoint, soapSupplierHook SoapSupplierHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		soapSupplierBeforeInsertHooks = append(soapSupplierBeforeInsertHooks, soapSupplierHook)
	case boil.BeforeUpdateHook:
		soapSupplierBeforeUpdateHooks = append(soapSupplierBeforeUpdateHooks, soapSupplierHook)
	case boil.BeforeDeleteHook:
		soapSupplierBeforeDeleteHooks = append(soapSupplierBeforeDeleteHooks, soapSupplierHook)
	case boil.BeforeUpsertHook:
		soapSupplierBeforeUpsertHooks = append(soapSupplierBeforeUpsertHooks, soapSupplierHook)
	case boil.AfterInsertHook:
		soapSupplierAfterInsertHooks = append(soapSupplierAfterInsertHooks, soapSupplierHook)
	case boil.AfterSelectHook:
		soapSupplierAfterSelectHooks = append(soapSupplierAfterSelectHooks, soapSupplierHook)
	case boil.AfterUpdateHook:
		soapSupplierAfterUpdateHooks = append(soapSupplierAfterUpdateHooks, soapSupplierHook)
	case boil.AfterDeleteHook:
		soapSupplierAfterDeleteHooks = append(soapSupplierAfterDeleteHooks, soapSupplierHook)
	case boil.AfterUpsertHook:
		soapSupplierAfterUpsertHooks = append(soapSupplierAfterUpsertHooks, soapSupplierHook)
	}
}

// One returns a single soapSupplier record from the query.
func (q soapSupplierQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SoapSupplier, error) {
	o := &SoapSupplier{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for soap_supplier")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SoapSupplier records from the query.
func (q soapSupplierQuery) All(ctx context.Context, exec boil.ContextExecutor) (SoapSupplierSlice, error) {
	var o []*SoapSupplier

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SoapSupplier slice")
	}

	if len(soapSupplierAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SoapSupplier records in the query.
func (q soapSupplierQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count soap_supplier rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q soapSupplierQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if soap_supplier exists")
	}

	return count > 0, nil
}

// SupplierSoapAdditiveinventories retrieves all the soap_additiveinventory's SoapAdditiveinventories with an executor via supplier_id column.
func (o *SoapSupplier) SupplierSoapAdditiveinventories(mods ...qm.QueryMod) soapAdditiveinventoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"soap_additiveinventory\".\"supplier_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"soap_additiveinventory\".\"deleted_at\""),
	)

	query := SoapAdditiveinventories(queryMods...)
	queries.SetFrom(query.Query, "\"soap_additiveinventory\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"soap_additiveinventory\".*"})
	}

	return query
}

// SupplierSoapFragranceinventories retrieves all the soap_fragranceinventory's SoapFragranceinventories with an executor via supplier_id column.
func (o *SoapSupplier) SupplierSoapFragranceinventories(mods ...qm.QueryMod) soapFragranceinventoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"soap_fragranceinventory\".\"supplier_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"soap_fragranceinventory\".\"deleted_at\""),
	)

	query := SoapFragranceinventories(queryMods...)
	queries.SetFrom(query.Query, "\"soap_fragranceinventory\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"soap_fragranceinventory\".*"})
	}

	return query
}

// SupplierSoapLipidinventories retrieves all the soap_lipidinventory's SoapLipidinventories with an executor via supplier_id column.
func (o *SoapSupplier) SupplierSoapLipidinventories(mods ...qm.QueryMod) soapLipidinventoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"soap_lipidinventory\".\"supplier_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"soap_lipidinventory\".\"deleted_at\""),
	)

	query := SoapLipidinventories(queryMods...)
	queries.SetFrom(query.Query, "\"soap_lipidinventory\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"soap_lipidinventory\".*"})
	}

	return query
}

// SupplierSoapLyeinventories retrieves all the soap_lyeinventory's SoapLyeinventories with an executor via supplier_id column.
func (o *SoapSupplier) SupplierSoapLyeinventories(mods ...qm.QueryMod) soapLyeinventoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"soap_lyeinventory\".\"supplier_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"soap_lyeinventory\".\"deleted_at\""),
	)

	query := SoapLyeinventories(queryMods...)
	queries.SetFrom(query.Query, "\"soap_lyeinventory\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"soap_lyeinventory\".*"})
	}

	return query
}

// LoadSupplierSoapAdditiveinventories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (soapSupplierL) LoadSupplierSoapAdditiveinventories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSoapSupplier interface{}, mods queries.Applicator) error {
	var slice []*SoapSupplier
	var object *SoapSupplier

	if singular {
		object = maybeSoapSupplier.(*SoapSupplier)
	} else {
		slice = *maybeSoapSupplier.(*[]*SoapSupplier)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &soapSupplierR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &soapSupplierR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`soap_additiveinventory`),
		qm.WhereIn(`soap_additiveinventory.supplier_id in ?`, args...),
		qmhelper.WhereIsNull(`soap_additiveinventory.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load soap_additiveinventory")
	}

	var resultSlice []*SoapAdditiveinventory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice soap_additiveinventory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on soap_additiveinventory")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for soap_additiveinventory")
	}

	if len(soapAdditiveinventoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SupplierSoapAdditiveinventories = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SupplierID {
				local.R.SupplierSoapAdditiveinventories = append(local.R.SupplierSoapAdditiveinventories, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSupplierSoapFragranceinventories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (soapSupplierL) LoadSupplierSoapFragranceinventories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSoapSupplier interface{}, mods queries.Applicator) error {
	var slice []*SoapSupplier
	var object *SoapSupplier

	if singular {
		object = maybeSoapSupplier.(*SoapSupplier)
	} else {
		slice = *maybeSoapSupplier.(*[]*SoapSupplier)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &soapSupplierR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &soapSupplierR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`soap_fragranceinventory`),
		qm.WhereIn(`soap_fragranceinventory.supplier_id in ?`, args...),
		qmhelper.WhereIsNull(`soap_fragranceinventory.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load soap_fragranceinventory")
	}

	var resultSlice []*SoapFragranceinventory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice soap_fragranceinventory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on soap_fragranceinventory")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for soap_fragranceinventory")
	}

	if len(soapFragranceinventoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SupplierSoapFragranceinventories = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SupplierID {
				local.R.SupplierSoapFragranceinventories = append(local.R.SupplierSoapFragranceinventories, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSupplierSoapLipidinventories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (soapSupplierL) LoadSupplierSoapLipidinventories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSoapSupplier interface{}, mods queries.Applicator) error {
	var slice []*SoapSupplier
	var object *SoapSupplier

	if singular {
		object = maybeSoapSupplier.(*SoapSupplier)
	} else {
		slice = *maybeSoapSupplier.(*[]*SoapSupplier)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &soapSupplierR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &soapSupplierR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`soap_lipidinventory`),
		qm.WhereIn(`soap_lipidinventory.supplier_id in ?`, args...),
		qmhelper.WhereIsNull(`soap_lipidinventory.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load soap_lipidinventory")
	}

	var resultSlice []*SoapLipidinventory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice soap_lipidinventory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on soap_lipidinventory")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for soap_lipidinventory")
	}

	if len(soapLipidinventoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SupplierSoapLipidinventories = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SupplierID {
				local.R.SupplierSoapLipidinventories = append(local.R.SupplierSoapLipidinventories, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSupplierSoapLyeinventories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (soapSupplierL) LoadSupplierSoapLyeinventories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSoapSupplier interface{}, mods queries.Applicator) error {
	var slice []*SoapSupplier
	var object *SoapSupplier

	if singular {
		object = maybeSoapSupplier.(*SoapSupplier)
	} else {
		slice = *maybeSoapSupplier.(*[]*SoapSupplier)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &soapSupplierR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &soapSupplierR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`soap_lyeinventory`),
		qm.WhereIn(`soap_lyeinventory.supplier_id in ?`, args...),
		qmhelper.WhereIsNull(`soap_lyeinventory.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load soap_lyeinventory")
	}

	var resultSlice []*SoapLyeinventory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice soap_lyeinventory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on soap_lyeinventory")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for soap_lyeinventory")
	}

	if len(soapLyeinventoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SupplierSoapLyeinventories = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SupplierID {
				local.R.SupplierSoapLyeinventories = append(local.R.SupplierSoapLyeinventories, foreign)
				break
			}
		}
	}

	return nil
}

// AddSupplierSoapAdditiveinventories adds the given related objects to the existing relationships
// of the soap_supplier, optionally inserting them as new records.
// Appends related to o.R.SupplierSoapAdditiveinventories.
// Sets related.R.Supplier appropriately.
func (o *SoapSupplier) AddSupplierSoapAdditiveinventories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SoapAdditiveinventory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SupplierID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"soap_additiveinventory\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"supplier_id"}),
				strmangle.WhereClause("\"", "\"", 2, soapAdditiveinventoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SupplierID = o.ID
		}
	}

	if o.R == nil {
		o.R = &soapSupplierR{
			SupplierSoapAdditiveinventories: related,
		}
	} else {
		o.R.SupplierSoapAdditiveinventories = append(o.R.SupplierSoapAdditiveinventories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &soapAdditiveinventoryR{
				Supplier: o,
			}
		} else {
			rel.R.Supplier = o
		}
	}
	return nil
}

// AddSupplierSoapFragranceinventories adds the given related objects to the existing relationships
// of the soap_supplier, optionally inserting them as new records.
// Appends related to o.R.SupplierSoapFragranceinventories.
// Sets related.R.Supplier appropriately.
func (o *SoapSupplier) AddSupplierSoapFragranceinventories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SoapFragranceinventory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SupplierID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"soap_fragranceinventory\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"supplier_id"}),
				strmangle.WhereClause("\"", "\"", 2, soapFragranceinventoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SupplierID = o.ID
		}
	}

	if o.R == nil {
		o.R = &soapSupplierR{
			SupplierSoapFragranceinventories: related,
		}
	} else {
		o.R.SupplierSoapFragranceinventories = append(o.R.SupplierSoapFragranceinventories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &soapFragranceinventoryR{
				Supplier: o,
			}
		} else {
			rel.R.Supplier = o
		}
	}
	return nil
}

// AddSupplierSoapLipidinventories adds the given related objects to the existing relationships
// of the soap_supplier, optionally inserting them as new records.
// Appends related to o.R.SupplierSoapLipidinventories.
// Sets related.R.Supplier appropriately.
func (o *SoapSupplier) AddSupplierSoapLipidinventories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SoapLipidinventory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SupplierID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"soap_lipidinventory\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"supplier_id"}),
				strmangle.WhereClause("\"", "\"", 2, soapLipidinventoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SupplierID = o.ID
		}
	}

	if o.R == nil {
		o.R = &soapSupplierR{
			SupplierSoapLipidinventories: related,
		}
	} else {
		o.R.SupplierSoapLipidinventories = append(o.R.SupplierSoapLipidinventories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &soapLipidinventoryR{
				Supplier: o,
			}
		} else {
			rel.R.Supplier = o
		}
	}
	return nil
}

// AddSupplierSoapLyeinventories adds the given related objects to the existing relationships
// of the soap_supplier, optionally inserting them as new records.
// Appends related to o.R.SupplierSoapLyeinventories.
// Sets related.R.Supplier appropriately.
func (o *SoapSupplier) AddSupplierSoapLyeinventories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SoapLyeinventory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SupplierID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"soap_lyeinventory\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"supplier_id"}),
				strmangle.WhereClause("\"", "\"", 2, soapLyeinventoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SupplierID = o.ID
		}
	}

	if o.R == nil {
		o.R = &soapSupplierR{
			SupplierSoapLyeinventories: related,
		}
	} else {
		o.R.SupplierSoapLyeinventories = append(o.R.SupplierSoapLyeinventories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &soapLyeinventoryR{
				Supplier: o,
			}
		} else {
			rel.R.Supplier = o
		}
	}
	return nil
}

// SoapSuppliers retrieves all the records using an executor.
func SoapSuppliers(mods ...qm.QueryMod) soapSupplierQuery {
	mods = append(mods, qm.From("\"soap_supplier\""), qmhelper.WhereIsNull("\"soap_supplier\".\"deleted_at\""))
	return soapSupplierQuery{NewQuery(mods...)}
}

// FindSoapSupplier retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSoapSupplier(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*SoapSupplier, error) {
	soapSupplierObj := &SoapSupplier{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"soap_supplier\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, soapSupplierObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from soap_supplier")
	}

	return soapSupplierObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SoapSupplier) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no soap_supplier provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(soapSupplierColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	soapSupplierInsertCacheMut.RLock()
	cache, cached := soapSupplierInsertCache[key]
	soapSupplierInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			soapSupplierAllColumns,
			soapSupplierColumnsWithDefault,
			soapSupplierColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(soapSupplierType, soapSupplierMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(soapSupplierType, soapSupplierMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"soap_supplier\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"soap_supplier\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into soap_supplier")
	}

	if !cached {
		soapSupplierInsertCacheMut.Lock()
		soapSupplierInsertCache[key] = cache
		soapSupplierInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SoapSupplier.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SoapSupplier) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	soapSupplierUpdateCacheMut.RLock()
	cache, cached := soapSupplierUpdateCache[key]
	soapSupplierUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			soapSupplierAllColumns,
			soapSupplierPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update soap_supplier, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"soap_supplier\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, soapSupplierPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(soapSupplierType, soapSupplierMapping, append(wl, soapSupplierPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update soap_supplier row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for soap_supplier")
	}

	if !cached {
		soapSupplierUpdateCacheMut.Lock()
		soapSupplierUpdateCache[key] = cache
		soapSupplierUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q soapSupplierQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for soap_supplier")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for soap_supplier")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SoapSupplierSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), soapSupplierPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"soap_supplier\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, soapSupplierPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in soapSupplier slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all soapSupplier")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SoapSupplier) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no soap_supplier provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(soapSupplierColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	soapSupplierUpsertCacheMut.RLock()
	cache, cached := soapSupplierUpsertCache[key]
	soapSupplierUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			soapSupplierAllColumns,
			soapSupplierColumnsWithDefault,
			soapSupplierColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			soapSupplierAllColumns,
			soapSupplierPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert soap_supplier, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(soapSupplierPrimaryKeyColumns))
			copy(conflict, soapSupplierPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"soap_supplier\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(soapSupplierType, soapSupplierMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(soapSupplierType, soapSupplierMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert soap_supplier")
	}

	if !cached {
		soapSupplierUpsertCacheMut.Lock()
		soapSupplierUpsertCache[key] = cache
		soapSupplierUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SoapSupplier record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SoapSupplier) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SoapSupplier provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), soapSupplierPrimaryKeyMapping)
		sql = "DELETE FROM \"soap_supplier\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"soap_supplier\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(soapSupplierType, soapSupplierMapping, append(wl, soapSupplierPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from soap_supplier")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for soap_supplier")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q soapSupplierQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no soapSupplierQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from soap_supplier")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for soap_supplier")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SoapSupplierSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(soapSupplierBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), soapSupplierPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"soap_supplier\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, soapSupplierPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), soapSupplierPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"soap_supplier\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, soapSupplierPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from soapSupplier slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for soap_supplier")
	}

	if len(soapSupplierAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SoapSupplier) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSoapSupplier(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SoapSupplierSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SoapSupplierSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), soapSupplierPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"soap_supplier\".* FROM \"soap_supplier\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, soapSupplierPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SoapSupplierSlice")
	}

	*o = slice

	return nil
}

// SoapSupplierExists checks if the SoapSupplier row exists.
func SoapSupplierExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"soap_supplier\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if soap_supplier exists")
	}

	return exists, nil
}
