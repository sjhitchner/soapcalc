// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRecipeBatches(t *testing.T) {
	t.Parallel()

	query := RecipeBatches()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRecipeBatchesSoftDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatch{}
	if err = randomize.Struct(seed, o, recipeBatchDBTypes, true, recipeBatchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RecipeBatches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecipeBatchesQuerySoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatch{}
	if err = randomize.Struct(seed, o, recipeBatchDBTypes, true, recipeBatchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := RecipeBatches().DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RecipeBatches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecipeBatchesSliceSoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatch{}
	if err = randomize.Struct(seed, o, recipeBatchDBTypes, true, recipeBatchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RecipeBatchSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RecipeBatches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecipeBatchesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatch{}
	if err = randomize.Struct(seed, o, recipeBatchDBTypes, true, recipeBatchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RecipeBatches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecipeBatchesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatch{}
	if err = randomize.Struct(seed, o, recipeBatchDBTypes, true, recipeBatchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := RecipeBatches().DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RecipeBatches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecipeBatchesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatch{}
	if err = randomize.Struct(seed, o, recipeBatchDBTypes, true, recipeBatchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RecipeBatchSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RecipeBatches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecipeBatchesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatch{}
	if err = randomize.Struct(seed, o, recipeBatchDBTypes, true, recipeBatchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RecipeBatchExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if RecipeBatch exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RecipeBatchExists to return true, but got false.")
	}
}

func testRecipeBatchesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatch{}
	if err = randomize.Struct(seed, o, recipeBatchDBTypes, true, recipeBatchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	recipeBatchFound, err := FindRecipeBatch(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if recipeBatchFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRecipeBatchesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatch{}
	if err = randomize.Struct(seed, o, recipeBatchDBTypes, true, recipeBatchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = RecipeBatches().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRecipeBatchesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatch{}
	if err = randomize.Struct(seed, o, recipeBatchDBTypes, true, recipeBatchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := RecipeBatches().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRecipeBatchesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	recipeBatchOne := &RecipeBatch{}
	recipeBatchTwo := &RecipeBatch{}
	if err = randomize.Struct(seed, recipeBatchOne, recipeBatchDBTypes, false, recipeBatchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatch struct: %s", err)
	}
	if err = randomize.Struct(seed, recipeBatchTwo, recipeBatchDBTypes, false, recipeBatchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = recipeBatchOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = recipeBatchTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RecipeBatches().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRecipeBatchesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	recipeBatchOne := &RecipeBatch{}
	recipeBatchTwo := &RecipeBatch{}
	if err = randomize.Struct(seed, recipeBatchOne, recipeBatchDBTypes, false, recipeBatchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatch struct: %s", err)
	}
	if err = randomize.Struct(seed, recipeBatchTwo, recipeBatchDBTypes, false, recipeBatchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = recipeBatchOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = recipeBatchTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecipeBatches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func recipeBatchBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *RecipeBatch) error {
	*o = RecipeBatch{}
	return nil
}

func recipeBatchAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *RecipeBatch) error {
	*o = RecipeBatch{}
	return nil
}

func recipeBatchAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *RecipeBatch) error {
	*o = RecipeBatch{}
	return nil
}

func recipeBatchBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RecipeBatch) error {
	*o = RecipeBatch{}
	return nil
}

func recipeBatchAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RecipeBatch) error {
	*o = RecipeBatch{}
	return nil
}

func recipeBatchBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RecipeBatch) error {
	*o = RecipeBatch{}
	return nil
}

func recipeBatchAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RecipeBatch) error {
	*o = RecipeBatch{}
	return nil
}

func recipeBatchBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RecipeBatch) error {
	*o = RecipeBatch{}
	return nil
}

func recipeBatchAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RecipeBatch) error {
	*o = RecipeBatch{}
	return nil
}

func testRecipeBatchesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &RecipeBatch{}
	o := &RecipeBatch{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, recipeBatchDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RecipeBatch object: %s", err)
	}

	AddRecipeBatchHook(boil.BeforeInsertHook, recipeBatchBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	recipeBatchBeforeInsertHooks = []RecipeBatchHook{}

	AddRecipeBatchHook(boil.AfterInsertHook, recipeBatchAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	recipeBatchAfterInsertHooks = []RecipeBatchHook{}

	AddRecipeBatchHook(boil.AfterSelectHook, recipeBatchAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	recipeBatchAfterSelectHooks = []RecipeBatchHook{}

	AddRecipeBatchHook(boil.BeforeUpdateHook, recipeBatchBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	recipeBatchBeforeUpdateHooks = []RecipeBatchHook{}

	AddRecipeBatchHook(boil.AfterUpdateHook, recipeBatchAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	recipeBatchAfterUpdateHooks = []RecipeBatchHook{}

	AddRecipeBatchHook(boil.BeforeDeleteHook, recipeBatchBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	recipeBatchBeforeDeleteHooks = []RecipeBatchHook{}

	AddRecipeBatchHook(boil.AfterDeleteHook, recipeBatchAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	recipeBatchAfterDeleteHooks = []RecipeBatchHook{}

	AddRecipeBatchHook(boil.BeforeUpsertHook, recipeBatchBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	recipeBatchBeforeUpsertHooks = []RecipeBatchHook{}

	AddRecipeBatchHook(boil.AfterUpsertHook, recipeBatchAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	recipeBatchAfterUpsertHooks = []RecipeBatchHook{}
}

func testRecipeBatchesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatch{}
	if err = randomize.Struct(seed, o, recipeBatchDBTypes, true, recipeBatchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecipeBatches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRecipeBatchesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatch{}
	if err = randomize.Struct(seed, o, recipeBatchDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RecipeBatch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(recipeBatchColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := RecipeBatches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRecipeBatchToOneRecipeUsingRecipe(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local RecipeBatch
	var foreign Recipe

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, recipeBatchDBTypes, false, recipeBatchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatch struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, recipeDBTypes, false, recipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Recipe struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.RecipeID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Recipe().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RecipeBatchSlice{&local}
	if err = local.L.LoadRecipe(ctx, tx, false, (*[]*RecipeBatch)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Recipe == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Recipe = nil
	if err = local.L.LoadRecipe(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Recipe == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRecipeBatchToOneSetOpRecipeUsingRecipe(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RecipeBatch
	var b, c Recipe

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recipeBatchDBTypes, false, strmangle.SetComplement(recipeBatchPrimaryKeyColumns, recipeBatchColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, recipeDBTypes, false, strmangle.SetComplement(recipePrimaryKeyColumns, recipeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, recipeDBTypes, false, strmangle.SetComplement(recipePrimaryKeyColumns, recipeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Recipe{&b, &c} {
		err = a.SetRecipe(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Recipe != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RecipeBatches[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RecipeID != x.ID {
			t.Error("foreign key was wrong value", a.RecipeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RecipeID))
		reflect.Indirect(reflect.ValueOf(&a.RecipeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.RecipeID != x.ID {
			t.Error("foreign key was wrong value", a.RecipeID, x.ID)
		}
	}
}

func testRecipeBatchesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatch{}
	if err = randomize.Struct(seed, o, recipeBatchDBTypes, true, recipeBatchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRecipeBatchesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatch{}
	if err = randomize.Struct(seed, o, recipeBatchDBTypes, true, recipeBatchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RecipeBatchSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRecipeBatchesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatch{}
	if err = randomize.Struct(seed, o, recipeBatchDBTypes, true, recipeBatchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RecipeBatches().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	recipeBatchDBTypes = map[string]string{`ID`: `integer`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `BatchID`: `character varying`, `ProductionDate`: `timestamp with time zone`, `CuredProduced`: `timestamp with time zone`, `Note`: `text`, `LipidWeight`: `double precision`, `ProductionWeight`: `double precision`, `CuredWeight`: `double precision`, `RecipeID`: `integer`}
	_                  = bytes.MinRead
)

func testRecipeBatchesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(recipeBatchPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(recipeBatchAllColumns) == len(recipeBatchPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatch{}
	if err = randomize.Struct(seed, o, recipeBatchDBTypes, true, recipeBatchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecipeBatches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, recipeBatchDBTypes, true, recipeBatchPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RecipeBatch struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRecipeBatchesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(recipeBatchAllColumns) == len(recipeBatchPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RecipeBatch{}
	if err = randomize.Struct(seed, o, recipeBatchDBTypes, true, recipeBatchColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeBatch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RecipeBatches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, recipeBatchDBTypes, true, recipeBatchPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RecipeBatch struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(recipeBatchAllColumns, recipeBatchPrimaryKeyColumns) {
		fields = recipeBatchAllColumns
	} else {
		fields = strmangle.SetComplement(
			recipeBatchAllColumns,
			recipeBatchPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RecipeBatchSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRecipeBatchesUpsert(t *testing.T) {
	t.Parallel()

	if len(recipeBatchAllColumns) == len(recipeBatchPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := RecipeBatch{}
	if err = randomize.Struct(seed, &o, recipeBatchDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RecipeBatch struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RecipeBatch: %s", err)
	}

	count, err := RecipeBatches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, recipeBatchDBTypes, false, recipeBatchPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RecipeBatch struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RecipeBatch: %s", err)
	}

	count, err = RecipeBatches().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
