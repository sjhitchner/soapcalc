// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SoapLipid is an object representing the database table.
type SoapLipid struct {
	ID           int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt    time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt    null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	Name         string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Lauric       int       `boil:"lauric" json:"lauric" toml:"lauric" yaml:"lauric"`
	Myristic     int       `boil:"myristic" json:"myristic" toml:"myristic" yaml:"myristic"`
	Palmitic     int       `boil:"palmitic" json:"palmitic" toml:"palmitic" yaml:"palmitic"`
	Stearic      int       `boil:"stearic" json:"stearic" toml:"stearic" yaml:"stearic"`
	Ricinoleic   int       `boil:"ricinoleic" json:"ricinoleic" toml:"ricinoleic" yaml:"ricinoleic"`
	Oleic        int       `boil:"oleic" json:"oleic" toml:"oleic" yaml:"oleic"`
	Linoleic     int       `boil:"linoleic" json:"linoleic" toml:"linoleic" yaml:"linoleic"`
	Linolenic    int       `boil:"linolenic" json:"linolenic" toml:"linolenic" yaml:"linolenic"`
	Hardness     int       `boil:"hardness" json:"hardness" toml:"hardness" yaml:"hardness"`
	Cleansing    int       `boil:"cleansing" json:"cleansing" toml:"cleansing" yaml:"cleansing"`
	Conditioning int       `boil:"conditioning" json:"conditioning" toml:"conditioning" yaml:"conditioning"`
	Bubbly       int       `boil:"bubbly" json:"bubbly" toml:"bubbly" yaml:"bubbly"`
	Creamy       int       `boil:"creamy" json:"creamy" toml:"creamy" yaml:"creamy"`
	Iodine       int       `boil:"iodine" json:"iodine" toml:"iodine" yaml:"iodine"`
	Ins          int       `boil:"ins" json:"ins" toml:"ins" yaml:"ins"`
	InciName     string    `boil:"inci_name" json:"inci_name" toml:"inci_name" yaml:"inci_name"`

	R *soapLipidR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L soapLipidL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SoapLipidColumns = struct {
	ID           string
	CreatedAt    string
	UpdatedAt    string
	DeletedAt    string
	Name         string
	Lauric       string
	Myristic     string
	Palmitic     string
	Stearic      string
	Ricinoleic   string
	Oleic        string
	Linoleic     string
	Linolenic    string
	Hardness     string
	Cleansing    string
	Conditioning string
	Bubbly       string
	Creamy       string
	Iodine       string
	Ins          string
	InciName     string
}{
	ID:           "id",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
	DeletedAt:    "deleted_at",
	Name:         "name",
	Lauric:       "lauric",
	Myristic:     "myristic",
	Palmitic:     "palmitic",
	Stearic:      "stearic",
	Ricinoleic:   "ricinoleic",
	Oleic:        "oleic",
	Linoleic:     "linoleic",
	Linolenic:    "linolenic",
	Hardness:     "hardness",
	Cleansing:    "cleansing",
	Conditioning: "conditioning",
	Bubbly:       "bubbly",
	Creamy:       "creamy",
	Iodine:       "iodine",
	Ins:          "ins",
	InciName:     "inci_name",
}

// Generated where

var SoapLipidWhere = struct {
	ID           whereHelperint
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
	DeletedAt    whereHelpernull_Time
	Name         whereHelperstring
	Lauric       whereHelperint
	Myristic     whereHelperint
	Palmitic     whereHelperint
	Stearic      whereHelperint
	Ricinoleic   whereHelperint
	Oleic        whereHelperint
	Linoleic     whereHelperint
	Linolenic    whereHelperint
	Hardness     whereHelperint
	Cleansing    whereHelperint
	Conditioning whereHelperint
	Bubbly       whereHelperint
	Creamy       whereHelperint
	Iodine       whereHelperint
	Ins          whereHelperint
	InciName     whereHelperstring
}{
	ID:           whereHelperint{field: "\"soap_lipid\".\"id\""},
	CreatedAt:    whereHelpertime_Time{field: "\"soap_lipid\".\"created_at\""},
	UpdatedAt:    whereHelpertime_Time{field: "\"soap_lipid\".\"updated_at\""},
	DeletedAt:    whereHelpernull_Time{field: "\"soap_lipid\".\"deleted_at\""},
	Name:         whereHelperstring{field: "\"soap_lipid\".\"name\""},
	Lauric:       whereHelperint{field: "\"soap_lipid\".\"lauric\""},
	Myristic:     whereHelperint{field: "\"soap_lipid\".\"myristic\""},
	Palmitic:     whereHelperint{field: "\"soap_lipid\".\"palmitic\""},
	Stearic:      whereHelperint{field: "\"soap_lipid\".\"stearic\""},
	Ricinoleic:   whereHelperint{field: "\"soap_lipid\".\"ricinoleic\""},
	Oleic:        whereHelperint{field: "\"soap_lipid\".\"oleic\""},
	Linoleic:     whereHelperint{field: "\"soap_lipid\".\"linoleic\""},
	Linolenic:    whereHelperint{field: "\"soap_lipid\".\"linolenic\""},
	Hardness:     whereHelperint{field: "\"soap_lipid\".\"hardness\""},
	Cleansing:    whereHelperint{field: "\"soap_lipid\".\"cleansing\""},
	Conditioning: whereHelperint{field: "\"soap_lipid\".\"conditioning\""},
	Bubbly:       whereHelperint{field: "\"soap_lipid\".\"bubbly\""},
	Creamy:       whereHelperint{field: "\"soap_lipid\".\"creamy\""},
	Iodine:       whereHelperint{field: "\"soap_lipid\".\"iodine\""},
	Ins:          whereHelperint{field: "\"soap_lipid\".\"ins\""},
	InciName:     whereHelperstring{field: "\"soap_lipid\".\"inci_name\""},
}

// SoapLipidRels is where relationship names are stored.
var SoapLipidRels = struct {
	LipidSoapLipidinventories string
	LipidSoapRecipelipids     string
}{
	LipidSoapLipidinventories: "LipidSoapLipidinventories",
	LipidSoapRecipelipids:     "LipidSoapRecipelipids",
}

// soapLipidR is where relationships are stored.
type soapLipidR struct {
	LipidSoapLipidinventories SoapLipidinventorySlice `boil:"LipidSoapLipidinventories" json:"LipidSoapLipidinventories" toml:"LipidSoapLipidinventories" yaml:"LipidSoapLipidinventories"`
	LipidSoapRecipelipids     SoapRecipelipidSlice    `boil:"LipidSoapRecipelipids" json:"LipidSoapRecipelipids" toml:"LipidSoapRecipelipids" yaml:"LipidSoapRecipelipids"`
}

// NewStruct creates a new relationship struct
func (*soapLipidR) NewStruct() *soapLipidR {
	return &soapLipidR{}
}

// soapLipidL is where Load methods for each relationship are stored.
type soapLipidL struct{}

var (
	soapLipidAllColumns            = []string{"id", "created_at", "updated_at", "deleted_at", "name", "lauric", "myristic", "palmitic", "stearic", "ricinoleic", "oleic", "linoleic", "linolenic", "hardness", "cleansing", "conditioning", "bubbly", "creamy", "iodine", "ins", "inci_name"}
	soapLipidColumnsWithoutDefault = []string{"created_at", "updated_at", "deleted_at", "name", "lauric", "myristic", "palmitic", "stearic", "ricinoleic", "oleic", "linoleic", "linolenic", "hardness", "cleansing", "conditioning", "bubbly", "creamy", "iodine", "ins", "inci_name"}
	soapLipidColumnsWithDefault    = []string{"id"}
	soapLipidPrimaryKeyColumns     = []string{"id"}
)

type (
	// SoapLipidSlice is an alias for a slice of pointers to SoapLipid.
	// This should generally be used opposed to []SoapLipid.
	SoapLipidSlice []*SoapLipid
	// SoapLipidHook is the signature for custom SoapLipid hook methods
	SoapLipidHook func(context.Context, boil.ContextExecutor, *SoapLipid) error

	soapLipidQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	soapLipidType                 = reflect.TypeOf(&SoapLipid{})
	soapLipidMapping              = queries.MakeStructMapping(soapLipidType)
	soapLipidPrimaryKeyMapping, _ = queries.BindMapping(soapLipidType, soapLipidMapping, soapLipidPrimaryKeyColumns)
	soapLipidInsertCacheMut       sync.RWMutex
	soapLipidInsertCache          = make(map[string]insertCache)
	soapLipidUpdateCacheMut       sync.RWMutex
	soapLipidUpdateCache          = make(map[string]updateCache)
	soapLipidUpsertCacheMut       sync.RWMutex
	soapLipidUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var soapLipidBeforeInsertHooks []SoapLipidHook
var soapLipidBeforeUpdateHooks []SoapLipidHook
var soapLipidBeforeDeleteHooks []SoapLipidHook
var soapLipidBeforeUpsertHooks []SoapLipidHook

var soapLipidAfterInsertHooks []SoapLipidHook
var soapLipidAfterSelectHooks []SoapLipidHook
var soapLipidAfterUpdateHooks []SoapLipidHook
var soapLipidAfterDeleteHooks []SoapLipidHook
var soapLipidAfterUpsertHooks []SoapLipidHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SoapLipid) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapLipidBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SoapLipid) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapLipidBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SoapLipid) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapLipidBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SoapLipid) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapLipidBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SoapLipid) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapLipidAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SoapLipid) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapLipidAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SoapLipid) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapLipidAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SoapLipid) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapLipidAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SoapLipid) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapLipidAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSoapLipidHook registers your hook function for all future operations.
func AddSoapLipidHook(hookPoint boil.HookPoint, soapLipidHook SoapLipidHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		soapLipidBeforeInsertHooks = append(soapLipidBeforeInsertHooks, soapLipidHook)
	case boil.BeforeUpdateHook:
		soapLipidBeforeUpdateHooks = append(soapLipidBeforeUpdateHooks, soapLipidHook)
	case boil.BeforeDeleteHook:
		soapLipidBeforeDeleteHooks = append(soapLipidBeforeDeleteHooks, soapLipidHook)
	case boil.BeforeUpsertHook:
		soapLipidBeforeUpsertHooks = append(soapLipidBeforeUpsertHooks, soapLipidHook)
	case boil.AfterInsertHook:
		soapLipidAfterInsertHooks = append(soapLipidAfterInsertHooks, soapLipidHook)
	case boil.AfterSelectHook:
		soapLipidAfterSelectHooks = append(soapLipidAfterSelectHooks, soapLipidHook)
	case boil.AfterUpdateHook:
		soapLipidAfterUpdateHooks = append(soapLipidAfterUpdateHooks, soapLipidHook)
	case boil.AfterDeleteHook:
		soapLipidAfterDeleteHooks = append(soapLipidAfterDeleteHooks, soapLipidHook)
	case boil.AfterUpsertHook:
		soapLipidAfterUpsertHooks = append(soapLipidAfterUpsertHooks, soapLipidHook)
	}
}

// One returns a single soapLipid record from the query.
func (q soapLipidQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SoapLipid, error) {
	o := &SoapLipid{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for soap_lipid")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SoapLipid records from the query.
func (q soapLipidQuery) All(ctx context.Context, exec boil.ContextExecutor) (SoapLipidSlice, error) {
	var o []*SoapLipid

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SoapLipid slice")
	}

	if len(soapLipidAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SoapLipid records in the query.
func (q soapLipidQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count soap_lipid rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q soapLipidQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if soap_lipid exists")
	}

	return count > 0, nil
}

// LipidSoapLipidinventories retrieves all the soap_lipidinventory's SoapLipidinventories with an executor via lipid_id column.
func (o *SoapLipid) LipidSoapLipidinventories(mods ...qm.QueryMod) soapLipidinventoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"soap_lipidinventory\".\"lipid_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"soap_lipidinventory\".\"deleted_at\""),
	)

	query := SoapLipidinventories(queryMods...)
	queries.SetFrom(query.Query, "\"soap_lipidinventory\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"soap_lipidinventory\".*"})
	}

	return query
}

// LipidSoapRecipelipids retrieves all the soap_recipelipid's SoapRecipelipids with an executor via lipid_id column.
func (o *SoapLipid) LipidSoapRecipelipids(mods ...qm.QueryMod) soapRecipelipidQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"soap_recipelipid\".\"lipid_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"soap_recipelipid\".\"deleted_at\""),
	)

	query := SoapRecipelipids(queryMods...)
	queries.SetFrom(query.Query, "\"soap_recipelipid\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"soap_recipelipid\".*"})
	}

	return query
}

// LoadLipidSoapLipidinventories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (soapLipidL) LoadLipidSoapLipidinventories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSoapLipid interface{}, mods queries.Applicator) error {
	var slice []*SoapLipid
	var object *SoapLipid

	if singular {
		object = maybeSoapLipid.(*SoapLipid)
	} else {
		slice = *maybeSoapLipid.(*[]*SoapLipid)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &soapLipidR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &soapLipidR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`soap_lipidinventory`),
		qm.WhereIn(`soap_lipidinventory.lipid_id in ?`, args...),
		qmhelper.WhereIsNull(`soap_lipidinventory.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load soap_lipidinventory")
	}

	var resultSlice []*SoapLipidinventory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice soap_lipidinventory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on soap_lipidinventory")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for soap_lipidinventory")
	}

	if len(soapLipidinventoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.LipidSoapLipidinventories = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.LipidID {
				local.R.LipidSoapLipidinventories = append(local.R.LipidSoapLipidinventories, foreign)
				break
			}
		}
	}

	return nil
}

// LoadLipidSoapRecipelipids allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (soapLipidL) LoadLipidSoapRecipelipids(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSoapLipid interface{}, mods queries.Applicator) error {
	var slice []*SoapLipid
	var object *SoapLipid

	if singular {
		object = maybeSoapLipid.(*SoapLipid)
	} else {
		slice = *maybeSoapLipid.(*[]*SoapLipid)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &soapLipidR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &soapLipidR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`soap_recipelipid`),
		qm.WhereIn(`soap_recipelipid.lipid_id in ?`, args...),
		qmhelper.WhereIsNull(`soap_recipelipid.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load soap_recipelipid")
	}

	var resultSlice []*SoapRecipelipid
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice soap_recipelipid")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on soap_recipelipid")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for soap_recipelipid")
	}

	if len(soapRecipelipidAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.LipidSoapRecipelipids = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.LipidID {
				local.R.LipidSoapRecipelipids = append(local.R.LipidSoapRecipelipids, foreign)
				break
			}
		}
	}

	return nil
}

// AddLipidSoapLipidinventories adds the given related objects to the existing relationships
// of the soap_lipid, optionally inserting them as new records.
// Appends related to o.R.LipidSoapLipidinventories.
// Sets related.R.Lipid appropriately.
func (o *SoapLipid) AddLipidSoapLipidinventories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SoapLipidinventory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.LipidID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"soap_lipidinventory\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"lipid_id"}),
				strmangle.WhereClause("\"", "\"", 2, soapLipidinventoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.LipidID = o.ID
		}
	}

	if o.R == nil {
		o.R = &soapLipidR{
			LipidSoapLipidinventories: related,
		}
	} else {
		o.R.LipidSoapLipidinventories = append(o.R.LipidSoapLipidinventories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &soapLipidinventoryR{
				Lipid: o,
			}
		} else {
			rel.R.Lipid = o
		}
	}
	return nil
}

// AddLipidSoapRecipelipids adds the given related objects to the existing relationships
// of the soap_lipid, optionally inserting them as new records.
// Appends related to o.R.LipidSoapRecipelipids.
// Sets related.R.Lipid appropriately.
func (o *SoapLipid) AddLipidSoapRecipelipids(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SoapRecipelipid) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.LipidID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"soap_recipelipid\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"lipid_id"}),
				strmangle.WhereClause("\"", "\"", 2, soapRecipelipidPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.LipidID = o.ID
		}
	}

	if o.R == nil {
		o.R = &soapLipidR{
			LipidSoapRecipelipids: related,
		}
	} else {
		o.R.LipidSoapRecipelipids = append(o.R.LipidSoapRecipelipids, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &soapRecipelipidR{
				Lipid: o,
			}
		} else {
			rel.R.Lipid = o
		}
	}
	return nil
}

// SoapLipids retrieves all the records using an executor.
func SoapLipids(mods ...qm.QueryMod) soapLipidQuery {
	mods = append(mods, qm.From("\"soap_lipid\""), qmhelper.WhereIsNull("\"soap_lipid\".\"deleted_at\""))
	return soapLipidQuery{NewQuery(mods...)}
}

// FindSoapLipid retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSoapLipid(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*SoapLipid, error) {
	soapLipidObj := &SoapLipid{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"soap_lipid\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, soapLipidObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from soap_lipid")
	}

	return soapLipidObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SoapLipid) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no soap_lipid provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(soapLipidColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	soapLipidInsertCacheMut.RLock()
	cache, cached := soapLipidInsertCache[key]
	soapLipidInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			soapLipidAllColumns,
			soapLipidColumnsWithDefault,
			soapLipidColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(soapLipidType, soapLipidMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(soapLipidType, soapLipidMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"soap_lipid\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"soap_lipid\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into soap_lipid")
	}

	if !cached {
		soapLipidInsertCacheMut.Lock()
		soapLipidInsertCache[key] = cache
		soapLipidInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SoapLipid.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SoapLipid) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	soapLipidUpdateCacheMut.RLock()
	cache, cached := soapLipidUpdateCache[key]
	soapLipidUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			soapLipidAllColumns,
			soapLipidPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update soap_lipid, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"soap_lipid\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, soapLipidPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(soapLipidType, soapLipidMapping, append(wl, soapLipidPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update soap_lipid row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for soap_lipid")
	}

	if !cached {
		soapLipidUpdateCacheMut.Lock()
		soapLipidUpdateCache[key] = cache
		soapLipidUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q soapLipidQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for soap_lipid")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for soap_lipid")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SoapLipidSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), soapLipidPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"soap_lipid\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, soapLipidPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in soapLipid slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all soapLipid")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SoapLipid) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no soap_lipid provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(soapLipidColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	soapLipidUpsertCacheMut.RLock()
	cache, cached := soapLipidUpsertCache[key]
	soapLipidUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			soapLipidAllColumns,
			soapLipidColumnsWithDefault,
			soapLipidColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			soapLipidAllColumns,
			soapLipidPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert soap_lipid, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(soapLipidPrimaryKeyColumns))
			copy(conflict, soapLipidPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"soap_lipid\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(soapLipidType, soapLipidMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(soapLipidType, soapLipidMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert soap_lipid")
	}

	if !cached {
		soapLipidUpsertCacheMut.Lock()
		soapLipidUpsertCache[key] = cache
		soapLipidUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SoapLipid record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SoapLipid) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SoapLipid provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), soapLipidPrimaryKeyMapping)
		sql = "DELETE FROM \"soap_lipid\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"soap_lipid\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(soapLipidType, soapLipidMapping, append(wl, soapLipidPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from soap_lipid")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for soap_lipid")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q soapLipidQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no soapLipidQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from soap_lipid")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for soap_lipid")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SoapLipidSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(soapLipidBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), soapLipidPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"soap_lipid\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, soapLipidPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), soapLipidPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"soap_lipid\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, soapLipidPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from soapLipid slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for soap_lipid")
	}

	if len(soapLipidAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SoapLipid) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSoapLipid(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SoapLipidSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SoapLipidSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), soapLipidPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"soap_lipid\".* FROM \"soap_lipid\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, soapLipidPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SoapLipidSlice")
	}

	*o = slice

	return nil
}

// SoapLipidExists checks if the SoapLipid row exists.
func SoapLipidExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"soap_lipid\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if soap_lipid exists")
	}

	return exists, nil
}
