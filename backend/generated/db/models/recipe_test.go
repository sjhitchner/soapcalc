// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRecipes(t *testing.T) {
	t.Parallel()

	query := Recipes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRecipesSoftDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Recipe{}
	if err = randomize.Struct(seed, o, recipeDBTypes, true, recipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Recipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Recipes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecipesQuerySoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Recipe{}
	if err = randomize.Struct(seed, o, recipeDBTypes, true, recipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Recipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Recipes().DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Recipes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecipesSliceSoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Recipe{}
	if err = randomize.Struct(seed, o, recipeDBTypes, true, recipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Recipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RecipeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Recipes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecipesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Recipe{}
	if err = randomize.Struct(seed, o, recipeDBTypes, true, recipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Recipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Recipes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecipesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Recipe{}
	if err = randomize.Struct(seed, o, recipeDBTypes, true, recipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Recipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Recipes().DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Recipes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecipesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Recipe{}
	if err = randomize.Struct(seed, o, recipeDBTypes, true, recipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Recipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RecipeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Recipes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRecipesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Recipe{}
	if err = randomize.Struct(seed, o, recipeDBTypes, true, recipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Recipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RecipeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Recipe exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RecipeExists to return true, but got false.")
	}
}

func testRecipesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Recipe{}
	if err = randomize.Struct(seed, o, recipeDBTypes, true, recipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Recipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	recipeFound, err := FindRecipe(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if recipeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRecipesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Recipe{}
	if err = randomize.Struct(seed, o, recipeDBTypes, true, recipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Recipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Recipes().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRecipesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Recipe{}
	if err = randomize.Struct(seed, o, recipeDBTypes, true, recipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Recipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Recipes().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRecipesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	recipeOne := &Recipe{}
	recipeTwo := &Recipe{}
	if err = randomize.Struct(seed, recipeOne, recipeDBTypes, false, recipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Recipe struct: %s", err)
	}
	if err = randomize.Struct(seed, recipeTwo, recipeDBTypes, false, recipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Recipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = recipeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = recipeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Recipes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRecipesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	recipeOne := &Recipe{}
	recipeTwo := &Recipe{}
	if err = randomize.Struct(seed, recipeOne, recipeDBTypes, false, recipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Recipe struct: %s", err)
	}
	if err = randomize.Struct(seed, recipeTwo, recipeDBTypes, false, recipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Recipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = recipeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = recipeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Recipes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func recipeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Recipe) error {
	*o = Recipe{}
	return nil
}

func recipeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Recipe) error {
	*o = Recipe{}
	return nil
}

func recipeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Recipe) error {
	*o = Recipe{}
	return nil
}

func recipeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Recipe) error {
	*o = Recipe{}
	return nil
}

func recipeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Recipe) error {
	*o = Recipe{}
	return nil
}

func recipeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Recipe) error {
	*o = Recipe{}
	return nil
}

func recipeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Recipe) error {
	*o = Recipe{}
	return nil
}

func recipeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Recipe) error {
	*o = Recipe{}
	return nil
}

func recipeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Recipe) error {
	*o = Recipe{}
	return nil
}

func testRecipesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Recipe{}
	o := &Recipe{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, recipeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Recipe object: %s", err)
	}

	AddRecipeHook(boil.BeforeInsertHook, recipeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	recipeBeforeInsertHooks = []RecipeHook{}

	AddRecipeHook(boil.AfterInsertHook, recipeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	recipeAfterInsertHooks = []RecipeHook{}

	AddRecipeHook(boil.AfterSelectHook, recipeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	recipeAfterSelectHooks = []RecipeHook{}

	AddRecipeHook(boil.BeforeUpdateHook, recipeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	recipeBeforeUpdateHooks = []RecipeHook{}

	AddRecipeHook(boil.AfterUpdateHook, recipeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	recipeAfterUpdateHooks = []RecipeHook{}

	AddRecipeHook(boil.BeforeDeleteHook, recipeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	recipeBeforeDeleteHooks = []RecipeHook{}

	AddRecipeHook(boil.AfterDeleteHook, recipeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	recipeAfterDeleteHooks = []RecipeHook{}

	AddRecipeHook(boil.BeforeUpsertHook, recipeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	recipeBeforeUpsertHooks = []RecipeHook{}

	AddRecipeHook(boil.AfterUpsertHook, recipeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	recipeAfterUpsertHooks = []RecipeHook{}
}

func testRecipesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Recipe{}
	if err = randomize.Struct(seed, o, recipeDBTypes, true, recipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Recipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Recipes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRecipesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Recipe{}
	if err = randomize.Struct(seed, o, recipeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Recipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(recipeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Recipes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRecipeToOneRecipeAdditiveUsingAdditive(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Recipe
	var foreign RecipeAdditive

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, recipeDBTypes, false, recipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Recipe struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, recipeAdditiveDBTypes, false, recipeAdditiveColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeAdditive struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AdditivesID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Additive().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RecipeSlice{&local}
	if err = local.L.LoadAdditive(ctx, tx, false, (*[]*Recipe)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Additive == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Additive = nil
	if err = local.L.LoadAdditive(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Additive == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRecipeToOneRecipeFragranceUsingFragrance(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Recipe
	var foreign RecipeFragrance

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, recipeDBTypes, false, recipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Recipe struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, recipeFragranceDBTypes, false, recipeFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeFragrance struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.FragrancesID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Fragrance().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RecipeSlice{&local}
	if err = local.L.LoadFragrance(ctx, tx, false, (*[]*Recipe)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Fragrance == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Fragrance = nil
	if err = local.L.LoadFragrance(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Fragrance == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRecipeToOneRecipeLipidUsingLipid(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Recipe
	var foreign RecipeLipid

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, recipeDBTypes, false, recipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Recipe struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, recipeLipidDBTypes, false, recipeLipidColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeLipid struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.LipidsID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Lipid().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RecipeSlice{&local}
	if err = local.L.LoadLipid(ctx, tx, false, (*[]*Recipe)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Lipid == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Lipid = nil
	if err = local.L.LoadLipid(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Lipid == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRecipeToOneRecipeLyeUsingLye(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Recipe
	var foreign RecipeLye

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, recipeDBTypes, false, recipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Recipe struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, recipeLyeDBTypes, false, recipeLyeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RecipeLye struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.LyeID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Lye().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RecipeSlice{&local}
	if err = local.L.LoadLye(ctx, tx, false, (*[]*Recipe)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Lye == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Lye = nil
	if err = local.L.LoadLye(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Lye == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRecipeToOneSetOpRecipeAdditiveUsingAdditive(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Recipe
	var b, c RecipeAdditive

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recipeDBTypes, false, strmangle.SetComplement(recipePrimaryKeyColumns, recipeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, recipeAdditiveDBTypes, false, strmangle.SetComplement(recipeAdditivePrimaryKeyColumns, recipeAdditiveColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, recipeAdditiveDBTypes, false, strmangle.SetComplement(recipeAdditivePrimaryKeyColumns, recipeAdditiveColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*RecipeAdditive{&b, &c} {
		err = a.SetAdditive(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Additive != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AdditiveRecipes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AdditivesID != x.ID {
			t.Error("foreign key was wrong value", a.AdditivesID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AdditivesID))
		reflect.Indirect(reflect.ValueOf(&a.AdditivesID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.AdditivesID != x.ID {
			t.Error("foreign key was wrong value", a.AdditivesID, x.ID)
		}
	}
}
func testRecipeToOneSetOpRecipeFragranceUsingFragrance(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Recipe
	var b, c RecipeFragrance

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recipeDBTypes, false, strmangle.SetComplement(recipePrimaryKeyColumns, recipeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, recipeFragranceDBTypes, false, strmangle.SetComplement(recipeFragrancePrimaryKeyColumns, recipeFragranceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, recipeFragranceDBTypes, false, strmangle.SetComplement(recipeFragrancePrimaryKeyColumns, recipeFragranceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*RecipeFragrance{&b, &c} {
		err = a.SetFragrance(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Fragrance != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.FragranceRecipes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.FragrancesID != x.ID {
			t.Error("foreign key was wrong value", a.FragrancesID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.FragrancesID))
		reflect.Indirect(reflect.ValueOf(&a.FragrancesID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.FragrancesID != x.ID {
			t.Error("foreign key was wrong value", a.FragrancesID, x.ID)
		}
	}
}
func testRecipeToOneSetOpRecipeLipidUsingLipid(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Recipe
	var b, c RecipeLipid

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recipeDBTypes, false, strmangle.SetComplement(recipePrimaryKeyColumns, recipeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, recipeLipidDBTypes, false, strmangle.SetComplement(recipeLipidPrimaryKeyColumns, recipeLipidColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, recipeLipidDBTypes, false, strmangle.SetComplement(recipeLipidPrimaryKeyColumns, recipeLipidColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*RecipeLipid{&b, &c} {
		err = a.SetLipid(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Lipid != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.LipidRecipes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.LipidsID != x.ID {
			t.Error("foreign key was wrong value", a.LipidsID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.LipidsID))
		reflect.Indirect(reflect.ValueOf(&a.LipidsID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.LipidsID != x.ID {
			t.Error("foreign key was wrong value", a.LipidsID, x.ID)
		}
	}
}
func testRecipeToOneSetOpRecipeLyeUsingLye(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Recipe
	var b, c RecipeLye

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, recipeDBTypes, false, strmangle.SetComplement(recipePrimaryKeyColumns, recipeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, recipeLyeDBTypes, false, strmangle.SetComplement(recipeLyePrimaryKeyColumns, recipeLyeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, recipeLyeDBTypes, false, strmangle.SetComplement(recipeLyePrimaryKeyColumns, recipeLyeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*RecipeLye{&b, &c} {
		err = a.SetLye(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Lye != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.LyeRecipes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.LyeID != x.ID {
			t.Error("foreign key was wrong value", a.LyeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.LyeID))
		reflect.Indirect(reflect.ValueOf(&a.LyeID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.LyeID != x.ID {
			t.Error("foreign key was wrong value", a.LyeID, x.ID)
		}
	}
}

func testRecipesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Recipe{}
	if err = randomize.Struct(seed, o, recipeDBTypes, true, recipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Recipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRecipesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Recipe{}
	if err = randomize.Struct(seed, o, recipeDBTypes, true, recipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Recipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RecipeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRecipesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Recipe{}
	if err = randomize.Struct(seed, o, recipeDBTypes, true, recipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Recipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Recipes().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	recipeDBTypes = map[string]string{`CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `ID`: `character varying`, `Name`: `character varying`, `Lipidweight`: `double precision`, `Cost`: `double precision`, `Note`: `text`, `AdditivesID`: `character varying`, `FragrancesID`: `character varying`, `LipidsID`: `character varying`, `LyeID`: `character varying`}
	_             = bytes.MinRead
)

func testRecipesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(recipePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(recipeAllColumns) == len(recipePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Recipe{}
	if err = randomize.Struct(seed, o, recipeDBTypes, true, recipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Recipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Recipes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, recipeDBTypes, true, recipePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Recipe struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRecipesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(recipeAllColumns) == len(recipePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Recipe{}
	if err = randomize.Struct(seed, o, recipeDBTypes, true, recipeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Recipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Recipes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, recipeDBTypes, true, recipePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Recipe struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(recipeAllColumns, recipePrimaryKeyColumns) {
		fields = recipeAllColumns
	} else {
		fields = strmangle.SetComplement(
			recipeAllColumns,
			recipePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RecipeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRecipesUpsert(t *testing.T) {
	t.Parallel()

	if len(recipeAllColumns) == len(recipePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Recipe{}
	if err = randomize.Struct(seed, &o, recipeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Recipe struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Recipe: %s", err)
	}

	count, err := Recipes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, recipeDBTypes, false, recipePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Recipe struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Recipe: %s", err)
	}

	count, err = Recipes().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
