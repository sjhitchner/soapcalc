// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSoapSuppliers(t *testing.T) {
	t.Parallel()

	query := SoapSuppliers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSoapSuppliersSoftDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapSupplier{}
	if err = randomize.Struct(seed, o, soapSupplierDBTypes, true, soapSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapSupplier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapSuppliers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapSuppliersQuerySoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapSupplier{}
	if err = randomize.Struct(seed, o, soapSupplierDBTypes, true, soapSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapSupplier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SoapSuppliers().DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapSuppliers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapSuppliersSliceSoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapSupplier{}
	if err = randomize.Struct(seed, o, soapSupplierDBTypes, true, soapSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapSupplier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SoapSupplierSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapSuppliers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapSuppliersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapSupplier{}
	if err = randomize.Struct(seed, o, soapSupplierDBTypes, true, soapSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapSupplier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapSuppliers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapSuppliersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapSupplier{}
	if err = randomize.Struct(seed, o, soapSupplierDBTypes, true, soapSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapSupplier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SoapSuppliers().DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapSuppliers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapSuppliersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapSupplier{}
	if err = randomize.Struct(seed, o, soapSupplierDBTypes, true, soapSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapSupplier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SoapSupplierSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapSuppliers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapSuppliersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapSupplier{}
	if err = randomize.Struct(seed, o, soapSupplierDBTypes, true, soapSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapSupplier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SoapSupplierExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if SoapSupplier exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SoapSupplierExists to return true, but got false.")
	}
}

func testSoapSuppliersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapSupplier{}
	if err = randomize.Struct(seed, o, soapSupplierDBTypes, true, soapSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapSupplier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	soapSupplierFound, err := FindSoapSupplier(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if soapSupplierFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSoapSuppliersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapSupplier{}
	if err = randomize.Struct(seed, o, soapSupplierDBTypes, true, soapSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapSupplier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SoapSuppliers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSoapSuppliersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapSupplier{}
	if err = randomize.Struct(seed, o, soapSupplierDBTypes, true, soapSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapSupplier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SoapSuppliers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSoapSuppliersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	soapSupplierOne := &SoapSupplier{}
	soapSupplierTwo := &SoapSupplier{}
	if err = randomize.Struct(seed, soapSupplierOne, soapSupplierDBTypes, false, soapSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapSupplier struct: %s", err)
	}
	if err = randomize.Struct(seed, soapSupplierTwo, soapSupplierDBTypes, false, soapSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapSupplier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = soapSupplierOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = soapSupplierTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SoapSuppliers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSoapSuppliersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	soapSupplierOne := &SoapSupplier{}
	soapSupplierTwo := &SoapSupplier{}
	if err = randomize.Struct(seed, soapSupplierOne, soapSupplierDBTypes, false, soapSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapSupplier struct: %s", err)
	}
	if err = randomize.Struct(seed, soapSupplierTwo, soapSupplierDBTypes, false, soapSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapSupplier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = soapSupplierOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = soapSupplierTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapSuppliers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func soapSupplierBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapSupplier) error {
	*o = SoapSupplier{}
	return nil
}

func soapSupplierAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapSupplier) error {
	*o = SoapSupplier{}
	return nil
}

func soapSupplierAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *SoapSupplier) error {
	*o = SoapSupplier{}
	return nil
}

func soapSupplierBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SoapSupplier) error {
	*o = SoapSupplier{}
	return nil
}

func soapSupplierAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SoapSupplier) error {
	*o = SoapSupplier{}
	return nil
}

func soapSupplierBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SoapSupplier) error {
	*o = SoapSupplier{}
	return nil
}

func soapSupplierAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SoapSupplier) error {
	*o = SoapSupplier{}
	return nil
}

func soapSupplierBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapSupplier) error {
	*o = SoapSupplier{}
	return nil
}

func soapSupplierAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapSupplier) error {
	*o = SoapSupplier{}
	return nil
}

func testSoapSuppliersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &SoapSupplier{}
	o := &SoapSupplier{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, soapSupplierDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SoapSupplier object: %s", err)
	}

	AddSoapSupplierHook(boil.BeforeInsertHook, soapSupplierBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	soapSupplierBeforeInsertHooks = []SoapSupplierHook{}

	AddSoapSupplierHook(boil.AfterInsertHook, soapSupplierAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	soapSupplierAfterInsertHooks = []SoapSupplierHook{}

	AddSoapSupplierHook(boil.AfterSelectHook, soapSupplierAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	soapSupplierAfterSelectHooks = []SoapSupplierHook{}

	AddSoapSupplierHook(boil.BeforeUpdateHook, soapSupplierBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	soapSupplierBeforeUpdateHooks = []SoapSupplierHook{}

	AddSoapSupplierHook(boil.AfterUpdateHook, soapSupplierAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	soapSupplierAfterUpdateHooks = []SoapSupplierHook{}

	AddSoapSupplierHook(boil.BeforeDeleteHook, soapSupplierBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	soapSupplierBeforeDeleteHooks = []SoapSupplierHook{}

	AddSoapSupplierHook(boil.AfterDeleteHook, soapSupplierAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	soapSupplierAfterDeleteHooks = []SoapSupplierHook{}

	AddSoapSupplierHook(boil.BeforeUpsertHook, soapSupplierBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	soapSupplierBeforeUpsertHooks = []SoapSupplierHook{}

	AddSoapSupplierHook(boil.AfterUpsertHook, soapSupplierAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	soapSupplierAfterUpsertHooks = []SoapSupplierHook{}
}

func testSoapSuppliersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapSupplier{}
	if err = randomize.Struct(seed, o, soapSupplierDBTypes, true, soapSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapSupplier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapSuppliers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSoapSuppliersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapSupplier{}
	if err = randomize.Struct(seed, o, soapSupplierDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SoapSupplier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(soapSupplierColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := SoapSuppliers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSoapSupplierToManySupplierSoapAdditiveinventories(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SoapSupplier
	var b, c SoapAdditiveinventory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soapSupplierDBTypes, true, soapSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapSupplier struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, soapAdditiveinventoryDBTypes, false, soapAdditiveinventoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, soapAdditiveinventoryDBTypes, false, soapAdditiveinventoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.SupplierID = a.ID
	c.SupplierID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SupplierSoapAdditiveinventories().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.SupplierID == b.SupplierID {
			bFound = true
		}
		if v.SupplierID == c.SupplierID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SoapSupplierSlice{&a}
	if err = a.L.LoadSupplierSoapAdditiveinventories(ctx, tx, false, (*[]*SoapSupplier)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SupplierSoapAdditiveinventories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SupplierSoapAdditiveinventories = nil
	if err = a.L.LoadSupplierSoapAdditiveinventories(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SupplierSoapAdditiveinventories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSoapSupplierToManySupplierSoapFragranceinventories(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SoapSupplier
	var b, c SoapFragranceinventory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soapSupplierDBTypes, true, soapSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapSupplier struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, soapFragranceinventoryDBTypes, false, soapFragranceinventoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, soapFragranceinventoryDBTypes, false, soapFragranceinventoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.SupplierID = a.ID
	c.SupplierID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SupplierSoapFragranceinventories().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.SupplierID == b.SupplierID {
			bFound = true
		}
		if v.SupplierID == c.SupplierID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SoapSupplierSlice{&a}
	if err = a.L.LoadSupplierSoapFragranceinventories(ctx, tx, false, (*[]*SoapSupplier)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SupplierSoapFragranceinventories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SupplierSoapFragranceinventories = nil
	if err = a.L.LoadSupplierSoapFragranceinventories(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SupplierSoapFragranceinventories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSoapSupplierToManySupplierSoapLipidinventories(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SoapSupplier
	var b, c SoapLipidinventory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soapSupplierDBTypes, true, soapSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapSupplier struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, soapLipidinventoryDBTypes, false, soapLipidinventoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, soapLipidinventoryDBTypes, false, soapLipidinventoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.SupplierID = a.ID
	c.SupplierID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SupplierSoapLipidinventories().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.SupplierID == b.SupplierID {
			bFound = true
		}
		if v.SupplierID == c.SupplierID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SoapSupplierSlice{&a}
	if err = a.L.LoadSupplierSoapLipidinventories(ctx, tx, false, (*[]*SoapSupplier)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SupplierSoapLipidinventories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SupplierSoapLipidinventories = nil
	if err = a.L.LoadSupplierSoapLipidinventories(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SupplierSoapLipidinventories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSoapSupplierToManySupplierSoapLyeinventories(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SoapSupplier
	var b, c SoapLyeinventory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soapSupplierDBTypes, true, soapSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapSupplier struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, soapLyeinventoryDBTypes, false, soapLyeinventoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, soapLyeinventoryDBTypes, false, soapLyeinventoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.SupplierID = a.ID
	c.SupplierID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SupplierSoapLyeinventories().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.SupplierID == b.SupplierID {
			bFound = true
		}
		if v.SupplierID == c.SupplierID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SoapSupplierSlice{&a}
	if err = a.L.LoadSupplierSoapLyeinventories(ctx, tx, false, (*[]*SoapSupplier)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SupplierSoapLyeinventories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SupplierSoapLyeinventories = nil
	if err = a.L.LoadSupplierSoapLyeinventories(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SupplierSoapLyeinventories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSoapSupplierToManyAddOpSupplierSoapAdditiveinventories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SoapSupplier
	var b, c, d, e SoapAdditiveinventory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soapSupplierDBTypes, false, strmangle.SetComplement(soapSupplierPrimaryKeyColumns, soapSupplierColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SoapAdditiveinventory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, soapAdditiveinventoryDBTypes, false, strmangle.SetComplement(soapAdditiveinventoryPrimaryKeyColumns, soapAdditiveinventoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SoapAdditiveinventory{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSupplierSoapAdditiveinventories(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SupplierID {
			t.Error("foreign key was wrong value", a.ID, first.SupplierID)
		}
		if a.ID != second.SupplierID {
			t.Error("foreign key was wrong value", a.ID, second.SupplierID)
		}

		if first.R.Supplier != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Supplier != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SupplierSoapAdditiveinventories[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SupplierSoapAdditiveinventories[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SupplierSoapAdditiveinventories().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSoapSupplierToManyAddOpSupplierSoapFragranceinventories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SoapSupplier
	var b, c, d, e SoapFragranceinventory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soapSupplierDBTypes, false, strmangle.SetComplement(soapSupplierPrimaryKeyColumns, soapSupplierColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SoapFragranceinventory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, soapFragranceinventoryDBTypes, false, strmangle.SetComplement(soapFragranceinventoryPrimaryKeyColumns, soapFragranceinventoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SoapFragranceinventory{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSupplierSoapFragranceinventories(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SupplierID {
			t.Error("foreign key was wrong value", a.ID, first.SupplierID)
		}
		if a.ID != second.SupplierID {
			t.Error("foreign key was wrong value", a.ID, second.SupplierID)
		}

		if first.R.Supplier != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Supplier != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SupplierSoapFragranceinventories[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SupplierSoapFragranceinventories[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SupplierSoapFragranceinventories().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSoapSupplierToManyAddOpSupplierSoapLipidinventories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SoapSupplier
	var b, c, d, e SoapLipidinventory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soapSupplierDBTypes, false, strmangle.SetComplement(soapSupplierPrimaryKeyColumns, soapSupplierColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SoapLipidinventory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, soapLipidinventoryDBTypes, false, strmangle.SetComplement(soapLipidinventoryPrimaryKeyColumns, soapLipidinventoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SoapLipidinventory{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSupplierSoapLipidinventories(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SupplierID {
			t.Error("foreign key was wrong value", a.ID, first.SupplierID)
		}
		if a.ID != second.SupplierID {
			t.Error("foreign key was wrong value", a.ID, second.SupplierID)
		}

		if first.R.Supplier != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Supplier != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SupplierSoapLipidinventories[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SupplierSoapLipidinventories[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SupplierSoapLipidinventories().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSoapSupplierToManyAddOpSupplierSoapLyeinventories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SoapSupplier
	var b, c, d, e SoapLyeinventory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soapSupplierDBTypes, false, strmangle.SetComplement(soapSupplierPrimaryKeyColumns, soapSupplierColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SoapLyeinventory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, soapLyeinventoryDBTypes, false, strmangle.SetComplement(soapLyeinventoryPrimaryKeyColumns, soapLyeinventoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SoapLyeinventory{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSupplierSoapLyeinventories(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SupplierID {
			t.Error("foreign key was wrong value", a.ID, first.SupplierID)
		}
		if a.ID != second.SupplierID {
			t.Error("foreign key was wrong value", a.ID, second.SupplierID)
		}

		if first.R.Supplier != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Supplier != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SupplierSoapLyeinventories[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SupplierSoapLyeinventories[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SupplierSoapLyeinventories().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSoapSuppliersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapSupplier{}
	if err = randomize.Struct(seed, o, soapSupplierDBTypes, true, soapSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapSupplier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSoapSuppliersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapSupplier{}
	if err = randomize.Struct(seed, o, soapSupplierDBTypes, true, soapSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapSupplier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SoapSupplierSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSoapSuppliersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapSupplier{}
	if err = randomize.Struct(seed, o, soapSupplierDBTypes, true, soapSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapSupplier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SoapSuppliers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	soapSupplierDBTypes = map[string]string{`ID`: `integer`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `Name`: `character varying`, `Website`: `character varying`, `Note`: `text`}
	_                   = bytes.MinRead
)

func testSoapSuppliersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(soapSupplierPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(soapSupplierAllColumns) == len(soapSupplierPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SoapSupplier{}
	if err = randomize.Struct(seed, o, soapSupplierDBTypes, true, soapSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapSupplier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapSuppliers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, soapSupplierDBTypes, true, soapSupplierPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SoapSupplier struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSoapSuppliersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(soapSupplierAllColumns) == len(soapSupplierPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SoapSupplier{}
	if err = randomize.Struct(seed, o, soapSupplierDBTypes, true, soapSupplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapSupplier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapSuppliers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, soapSupplierDBTypes, true, soapSupplierPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SoapSupplier struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(soapSupplierAllColumns, soapSupplierPrimaryKeyColumns) {
		fields = soapSupplierAllColumns
	} else {
		fields = strmangle.SetComplement(
			soapSupplierAllColumns,
			soapSupplierPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SoapSupplierSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSoapSuppliersUpsert(t *testing.T) {
	t.Parallel()

	if len(soapSupplierAllColumns) == len(soapSupplierPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SoapSupplier{}
	if err = randomize.Struct(seed, &o, soapSupplierDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SoapSupplier struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SoapSupplier: %s", err)
	}

	count, err := SoapSuppliers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, soapSupplierDBTypes, false, soapSupplierPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SoapSupplier struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SoapSupplier: %s", err)
	}

	count, err = SoapSuppliers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
