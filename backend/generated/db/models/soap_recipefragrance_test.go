// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSoapRecipefragrances(t *testing.T) {
	t.Parallel()

	query := SoapRecipefragrances()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSoapRecipefragrancesSoftDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipefragrance{}
	if err = randomize.Struct(seed, o, soapRecipefragranceDBTypes, true, soapRecipefragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipefragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapRecipefragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapRecipefragrancesQuerySoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipefragrance{}
	if err = randomize.Struct(seed, o, soapRecipefragranceDBTypes, true, soapRecipefragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipefragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SoapRecipefragrances().DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapRecipefragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapRecipefragrancesSliceSoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipefragrance{}
	if err = randomize.Struct(seed, o, soapRecipefragranceDBTypes, true, soapRecipefragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipefragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SoapRecipefragranceSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapRecipefragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapRecipefragrancesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipefragrance{}
	if err = randomize.Struct(seed, o, soapRecipefragranceDBTypes, true, soapRecipefragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipefragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapRecipefragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapRecipefragrancesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipefragrance{}
	if err = randomize.Struct(seed, o, soapRecipefragranceDBTypes, true, soapRecipefragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipefragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SoapRecipefragrances().DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapRecipefragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapRecipefragrancesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipefragrance{}
	if err = randomize.Struct(seed, o, soapRecipefragranceDBTypes, true, soapRecipefragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipefragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SoapRecipefragranceSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapRecipefragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapRecipefragrancesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipefragrance{}
	if err = randomize.Struct(seed, o, soapRecipefragranceDBTypes, true, soapRecipefragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipefragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SoapRecipefragranceExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if SoapRecipefragrance exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SoapRecipefragranceExists to return true, but got false.")
	}
}

func testSoapRecipefragrancesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipefragrance{}
	if err = randomize.Struct(seed, o, soapRecipefragranceDBTypes, true, soapRecipefragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipefragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	soapRecipefragranceFound, err := FindSoapRecipefragrance(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if soapRecipefragranceFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSoapRecipefragrancesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipefragrance{}
	if err = randomize.Struct(seed, o, soapRecipefragranceDBTypes, true, soapRecipefragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipefragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SoapRecipefragrances().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSoapRecipefragrancesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipefragrance{}
	if err = randomize.Struct(seed, o, soapRecipefragranceDBTypes, true, soapRecipefragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipefragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SoapRecipefragrances().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSoapRecipefragrancesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	soapRecipefragranceOne := &SoapRecipefragrance{}
	soapRecipefragranceTwo := &SoapRecipefragrance{}
	if err = randomize.Struct(seed, soapRecipefragranceOne, soapRecipefragranceDBTypes, false, soapRecipefragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipefragrance struct: %s", err)
	}
	if err = randomize.Struct(seed, soapRecipefragranceTwo, soapRecipefragranceDBTypes, false, soapRecipefragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipefragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = soapRecipefragranceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = soapRecipefragranceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SoapRecipefragrances().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSoapRecipefragrancesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	soapRecipefragranceOne := &SoapRecipefragrance{}
	soapRecipefragranceTwo := &SoapRecipefragrance{}
	if err = randomize.Struct(seed, soapRecipefragranceOne, soapRecipefragranceDBTypes, false, soapRecipefragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipefragrance struct: %s", err)
	}
	if err = randomize.Struct(seed, soapRecipefragranceTwo, soapRecipefragranceDBTypes, false, soapRecipefragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipefragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = soapRecipefragranceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = soapRecipefragranceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapRecipefragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func soapRecipefragranceBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapRecipefragrance) error {
	*o = SoapRecipefragrance{}
	return nil
}

func soapRecipefragranceAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapRecipefragrance) error {
	*o = SoapRecipefragrance{}
	return nil
}

func soapRecipefragranceAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *SoapRecipefragrance) error {
	*o = SoapRecipefragrance{}
	return nil
}

func soapRecipefragranceBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SoapRecipefragrance) error {
	*o = SoapRecipefragrance{}
	return nil
}

func soapRecipefragranceAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SoapRecipefragrance) error {
	*o = SoapRecipefragrance{}
	return nil
}

func soapRecipefragranceBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SoapRecipefragrance) error {
	*o = SoapRecipefragrance{}
	return nil
}

func soapRecipefragranceAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SoapRecipefragrance) error {
	*o = SoapRecipefragrance{}
	return nil
}

func soapRecipefragranceBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapRecipefragrance) error {
	*o = SoapRecipefragrance{}
	return nil
}

func soapRecipefragranceAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapRecipefragrance) error {
	*o = SoapRecipefragrance{}
	return nil
}

func testSoapRecipefragrancesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &SoapRecipefragrance{}
	o := &SoapRecipefragrance{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, soapRecipefragranceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SoapRecipefragrance object: %s", err)
	}

	AddSoapRecipefragranceHook(boil.BeforeInsertHook, soapRecipefragranceBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	soapRecipefragranceBeforeInsertHooks = []SoapRecipefragranceHook{}

	AddSoapRecipefragranceHook(boil.AfterInsertHook, soapRecipefragranceAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	soapRecipefragranceAfterInsertHooks = []SoapRecipefragranceHook{}

	AddSoapRecipefragranceHook(boil.AfterSelectHook, soapRecipefragranceAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	soapRecipefragranceAfterSelectHooks = []SoapRecipefragranceHook{}

	AddSoapRecipefragranceHook(boil.BeforeUpdateHook, soapRecipefragranceBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	soapRecipefragranceBeforeUpdateHooks = []SoapRecipefragranceHook{}

	AddSoapRecipefragranceHook(boil.AfterUpdateHook, soapRecipefragranceAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	soapRecipefragranceAfterUpdateHooks = []SoapRecipefragranceHook{}

	AddSoapRecipefragranceHook(boil.BeforeDeleteHook, soapRecipefragranceBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	soapRecipefragranceBeforeDeleteHooks = []SoapRecipefragranceHook{}

	AddSoapRecipefragranceHook(boil.AfterDeleteHook, soapRecipefragranceAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	soapRecipefragranceAfterDeleteHooks = []SoapRecipefragranceHook{}

	AddSoapRecipefragranceHook(boil.BeforeUpsertHook, soapRecipefragranceBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	soapRecipefragranceBeforeUpsertHooks = []SoapRecipefragranceHook{}

	AddSoapRecipefragranceHook(boil.AfterUpsertHook, soapRecipefragranceAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	soapRecipefragranceAfterUpsertHooks = []SoapRecipefragranceHook{}
}

func testSoapRecipefragrancesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipefragrance{}
	if err = randomize.Struct(seed, o, soapRecipefragranceDBTypes, true, soapRecipefragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipefragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapRecipefragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSoapRecipefragrancesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipefragrance{}
	if err = randomize.Struct(seed, o, soapRecipefragranceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SoapRecipefragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(soapRecipefragranceColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := SoapRecipefragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSoapRecipefragranceToManyFragranceSoapRecipes(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SoapRecipefragrance
	var b, c SoapRecipe

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soapRecipefragranceDBTypes, true, soapRecipefragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipefragrance struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, soapRecipeDBTypes, false, soapRecipeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, soapRecipeDBTypes, false, soapRecipeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.FragrancesID = a.ID
	c.FragrancesID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.FragranceSoapRecipes().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.FragrancesID == b.FragrancesID {
			bFound = true
		}
		if v.FragrancesID == c.FragrancesID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SoapRecipefragranceSlice{&a}
	if err = a.L.LoadFragranceSoapRecipes(ctx, tx, false, (*[]*SoapRecipefragrance)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FragranceSoapRecipes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.FragranceSoapRecipes = nil
	if err = a.L.LoadFragranceSoapRecipes(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FragranceSoapRecipes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSoapRecipefragranceToManyAddOpFragranceSoapRecipes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SoapRecipefragrance
	var b, c, d, e SoapRecipe

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soapRecipefragranceDBTypes, false, strmangle.SetComplement(soapRecipefragrancePrimaryKeyColumns, soapRecipefragranceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SoapRecipe{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, soapRecipeDBTypes, false, strmangle.SetComplement(soapRecipePrimaryKeyColumns, soapRecipeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SoapRecipe{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddFragranceSoapRecipes(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.FragrancesID {
			t.Error("foreign key was wrong value", a.ID, first.FragrancesID)
		}
		if a.ID != second.FragrancesID {
			t.Error("foreign key was wrong value", a.ID, second.FragrancesID)
		}

		if first.R.Fragrance != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Fragrance != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.FragranceSoapRecipes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.FragranceSoapRecipes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.FragranceSoapRecipes().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSoapRecipefragranceToOneSoapFragranceUsingFragrance(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SoapRecipefragrance
	var foreign SoapFragrance

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, soapRecipefragranceDBTypes, false, soapRecipefragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipefragrance struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, soapFragranceDBTypes, false, soapFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapFragrance struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.FragranceID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Fragrance().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SoapRecipefragranceSlice{&local}
	if err = local.L.LoadFragrance(ctx, tx, false, (*[]*SoapRecipefragrance)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Fragrance == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Fragrance = nil
	if err = local.L.LoadFragrance(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Fragrance == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSoapRecipefragranceToOneSetOpSoapFragranceUsingFragrance(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SoapRecipefragrance
	var b, c SoapFragrance

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soapRecipefragranceDBTypes, false, strmangle.SetComplement(soapRecipefragrancePrimaryKeyColumns, soapRecipefragranceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, soapFragranceDBTypes, false, strmangle.SetComplement(soapFragrancePrimaryKeyColumns, soapFragranceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, soapFragranceDBTypes, false, strmangle.SetComplement(soapFragrancePrimaryKeyColumns, soapFragranceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*SoapFragrance{&b, &c} {
		err = a.SetFragrance(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Fragrance != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.FragranceSoapRecipefragrances[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.FragranceID != x.ID {
			t.Error("foreign key was wrong value", a.FragranceID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.FragranceID))
		reflect.Indirect(reflect.ValueOf(&a.FragranceID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.FragranceID != x.ID {
			t.Error("foreign key was wrong value", a.FragranceID, x.ID)
		}
	}
}

func testSoapRecipefragrancesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipefragrance{}
	if err = randomize.Struct(seed, o, soapRecipefragranceDBTypes, true, soapRecipefragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipefragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSoapRecipefragrancesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipefragrance{}
	if err = randomize.Struct(seed, o, soapRecipefragranceDBTypes, true, soapRecipefragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipefragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SoapRecipefragranceSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSoapRecipefragrancesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipefragrance{}
	if err = randomize.Struct(seed, o, soapRecipefragranceDBTypes, true, soapRecipefragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipefragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SoapRecipefragrances().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	soapRecipefragranceDBTypes = map[string]string{`CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `ID`: `character varying`, `Percentage`: `double precision`, `Weight`: `double precision`, `FragranceID`: `integer`}
	_                          = bytes.MinRead
)

func testSoapRecipefragrancesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(soapRecipefragrancePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(soapRecipefragranceAllColumns) == len(soapRecipefragrancePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipefragrance{}
	if err = randomize.Struct(seed, o, soapRecipefragranceDBTypes, true, soapRecipefragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipefragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapRecipefragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, soapRecipefragranceDBTypes, true, soapRecipefragrancePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SoapRecipefragrance struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSoapRecipefragrancesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(soapRecipefragranceAllColumns) == len(soapRecipefragrancePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SoapRecipefragrance{}
	if err = randomize.Struct(seed, o, soapRecipefragranceDBTypes, true, soapRecipefragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapRecipefragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapRecipefragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, soapRecipefragranceDBTypes, true, soapRecipefragrancePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SoapRecipefragrance struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(soapRecipefragranceAllColumns, soapRecipefragrancePrimaryKeyColumns) {
		fields = soapRecipefragranceAllColumns
	} else {
		fields = strmangle.SetComplement(
			soapRecipefragranceAllColumns,
			soapRecipefragrancePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SoapRecipefragranceSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSoapRecipefragrancesUpsert(t *testing.T) {
	t.Parallel()

	if len(soapRecipefragranceAllColumns) == len(soapRecipefragrancePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SoapRecipefragrance{}
	if err = randomize.Struct(seed, &o, soapRecipefragranceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SoapRecipefragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SoapRecipefragrance: %s", err)
	}

	count, err := SoapRecipefragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, soapRecipefragranceDBTypes, false, soapRecipefragrancePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SoapRecipefragrance struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SoapRecipefragrance: %s", err)
	}

	count, err = SoapRecipefragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
