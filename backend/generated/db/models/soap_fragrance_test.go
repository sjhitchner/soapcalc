// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSoapFragrances(t *testing.T) {
	t.Parallel()

	query := SoapFragrances()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSoapFragrancesSoftDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapFragrance{}
	if err = randomize.Struct(seed, o, soapFragranceDBTypes, true, soapFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapFragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapFragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapFragrancesQuerySoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapFragrance{}
	if err = randomize.Struct(seed, o, soapFragranceDBTypes, true, soapFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapFragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SoapFragrances().DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapFragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapFragrancesSliceSoftDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapFragrance{}
	if err = randomize.Struct(seed, o, soapFragranceDBTypes, true, soapFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapFragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SoapFragranceSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, false); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapFragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapFragrancesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapFragrance{}
	if err = randomize.Struct(seed, o, soapFragranceDBTypes, true, soapFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapFragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapFragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapFragrancesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapFragrance{}
	if err = randomize.Struct(seed, o, soapFragranceDBTypes, true, soapFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapFragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SoapFragrances().DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapFragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapFragrancesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapFragrance{}
	if err = randomize.Struct(seed, o, soapFragranceDBTypes, true, soapFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapFragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SoapFragranceSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx, true); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SoapFragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSoapFragrancesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapFragrance{}
	if err = randomize.Struct(seed, o, soapFragranceDBTypes, true, soapFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapFragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SoapFragranceExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if SoapFragrance exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SoapFragranceExists to return true, but got false.")
	}
}

func testSoapFragrancesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapFragrance{}
	if err = randomize.Struct(seed, o, soapFragranceDBTypes, true, soapFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapFragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	soapFragranceFound, err := FindSoapFragrance(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if soapFragranceFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSoapFragrancesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapFragrance{}
	if err = randomize.Struct(seed, o, soapFragranceDBTypes, true, soapFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapFragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SoapFragrances().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSoapFragrancesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapFragrance{}
	if err = randomize.Struct(seed, o, soapFragranceDBTypes, true, soapFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapFragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SoapFragrances().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSoapFragrancesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	soapFragranceOne := &SoapFragrance{}
	soapFragranceTwo := &SoapFragrance{}
	if err = randomize.Struct(seed, soapFragranceOne, soapFragranceDBTypes, false, soapFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapFragrance struct: %s", err)
	}
	if err = randomize.Struct(seed, soapFragranceTwo, soapFragranceDBTypes, false, soapFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapFragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = soapFragranceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = soapFragranceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SoapFragrances().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSoapFragrancesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	soapFragranceOne := &SoapFragrance{}
	soapFragranceTwo := &SoapFragrance{}
	if err = randomize.Struct(seed, soapFragranceOne, soapFragranceDBTypes, false, soapFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapFragrance struct: %s", err)
	}
	if err = randomize.Struct(seed, soapFragranceTwo, soapFragranceDBTypes, false, soapFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapFragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = soapFragranceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = soapFragranceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapFragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func soapFragranceBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapFragrance) error {
	*o = SoapFragrance{}
	return nil
}

func soapFragranceAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapFragrance) error {
	*o = SoapFragrance{}
	return nil
}

func soapFragranceAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *SoapFragrance) error {
	*o = SoapFragrance{}
	return nil
}

func soapFragranceBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SoapFragrance) error {
	*o = SoapFragrance{}
	return nil
}

func soapFragranceAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SoapFragrance) error {
	*o = SoapFragrance{}
	return nil
}

func soapFragranceBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SoapFragrance) error {
	*o = SoapFragrance{}
	return nil
}

func soapFragranceAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SoapFragrance) error {
	*o = SoapFragrance{}
	return nil
}

func soapFragranceBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapFragrance) error {
	*o = SoapFragrance{}
	return nil
}

func soapFragranceAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SoapFragrance) error {
	*o = SoapFragrance{}
	return nil
}

func testSoapFragrancesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &SoapFragrance{}
	o := &SoapFragrance{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, soapFragranceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SoapFragrance object: %s", err)
	}

	AddSoapFragranceHook(boil.BeforeInsertHook, soapFragranceBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	soapFragranceBeforeInsertHooks = []SoapFragranceHook{}

	AddSoapFragranceHook(boil.AfterInsertHook, soapFragranceAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	soapFragranceAfterInsertHooks = []SoapFragranceHook{}

	AddSoapFragranceHook(boil.AfterSelectHook, soapFragranceAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	soapFragranceAfterSelectHooks = []SoapFragranceHook{}

	AddSoapFragranceHook(boil.BeforeUpdateHook, soapFragranceBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	soapFragranceBeforeUpdateHooks = []SoapFragranceHook{}

	AddSoapFragranceHook(boil.AfterUpdateHook, soapFragranceAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	soapFragranceAfterUpdateHooks = []SoapFragranceHook{}

	AddSoapFragranceHook(boil.BeforeDeleteHook, soapFragranceBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	soapFragranceBeforeDeleteHooks = []SoapFragranceHook{}

	AddSoapFragranceHook(boil.AfterDeleteHook, soapFragranceAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	soapFragranceAfterDeleteHooks = []SoapFragranceHook{}

	AddSoapFragranceHook(boil.BeforeUpsertHook, soapFragranceBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	soapFragranceBeforeUpsertHooks = []SoapFragranceHook{}

	AddSoapFragranceHook(boil.AfterUpsertHook, soapFragranceAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	soapFragranceAfterUpsertHooks = []SoapFragranceHook{}
}

func testSoapFragrancesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapFragrance{}
	if err = randomize.Struct(seed, o, soapFragranceDBTypes, true, soapFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapFragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapFragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSoapFragrancesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapFragrance{}
	if err = randomize.Struct(seed, o, soapFragranceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SoapFragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(soapFragranceColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := SoapFragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSoapFragranceToManyFragranceSoapFragranceinventories(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SoapFragrance
	var b, c SoapFragranceinventory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soapFragranceDBTypes, true, soapFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapFragrance struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, soapFragranceinventoryDBTypes, false, soapFragranceinventoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, soapFragranceinventoryDBTypes, false, soapFragranceinventoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.FragranceID = a.ID
	c.FragranceID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.FragranceSoapFragranceinventories().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.FragranceID == b.FragranceID {
			bFound = true
		}
		if v.FragranceID == c.FragranceID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SoapFragranceSlice{&a}
	if err = a.L.LoadFragranceSoapFragranceinventories(ctx, tx, false, (*[]*SoapFragrance)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FragranceSoapFragranceinventories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.FragranceSoapFragranceinventories = nil
	if err = a.L.LoadFragranceSoapFragranceinventories(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FragranceSoapFragranceinventories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSoapFragranceToManyFragranceSoapRecipefragrances(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SoapFragrance
	var b, c SoapRecipefragrance

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soapFragranceDBTypes, true, soapFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapFragrance struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, soapRecipefragranceDBTypes, false, soapRecipefragranceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, soapRecipefragranceDBTypes, false, soapRecipefragranceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.FragranceID = a.ID
	c.FragranceID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.FragranceSoapRecipefragrances().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.FragranceID == b.FragranceID {
			bFound = true
		}
		if v.FragranceID == c.FragranceID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SoapFragranceSlice{&a}
	if err = a.L.LoadFragranceSoapRecipefragrances(ctx, tx, false, (*[]*SoapFragrance)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FragranceSoapRecipefragrances); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.FragranceSoapRecipefragrances = nil
	if err = a.L.LoadFragranceSoapRecipefragrances(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FragranceSoapRecipefragrances); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSoapFragranceToManyAddOpFragranceSoapFragranceinventories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SoapFragrance
	var b, c, d, e SoapFragranceinventory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soapFragranceDBTypes, false, strmangle.SetComplement(soapFragrancePrimaryKeyColumns, soapFragranceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SoapFragranceinventory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, soapFragranceinventoryDBTypes, false, strmangle.SetComplement(soapFragranceinventoryPrimaryKeyColumns, soapFragranceinventoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SoapFragranceinventory{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddFragranceSoapFragranceinventories(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.FragranceID {
			t.Error("foreign key was wrong value", a.ID, first.FragranceID)
		}
		if a.ID != second.FragranceID {
			t.Error("foreign key was wrong value", a.ID, second.FragranceID)
		}

		if first.R.Fragrance != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Fragrance != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.FragranceSoapFragranceinventories[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.FragranceSoapFragranceinventories[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.FragranceSoapFragranceinventories().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSoapFragranceToManyAddOpFragranceSoapRecipefragrances(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SoapFragrance
	var b, c, d, e SoapRecipefragrance

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, soapFragranceDBTypes, false, strmangle.SetComplement(soapFragrancePrimaryKeyColumns, soapFragranceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*SoapRecipefragrance{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, soapRecipefragranceDBTypes, false, strmangle.SetComplement(soapRecipefragrancePrimaryKeyColumns, soapRecipefragranceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SoapRecipefragrance{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddFragranceSoapRecipefragrances(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.FragranceID {
			t.Error("foreign key was wrong value", a.ID, first.FragranceID)
		}
		if a.ID != second.FragranceID {
			t.Error("foreign key was wrong value", a.ID, second.FragranceID)
		}

		if first.R.Fragrance != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Fragrance != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.FragranceSoapRecipefragrances[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.FragranceSoapRecipefragrances[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.FragranceSoapRecipefragrances().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSoapFragrancesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapFragrance{}
	if err = randomize.Struct(seed, o, soapFragranceDBTypes, true, soapFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapFragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSoapFragrancesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapFragrance{}
	if err = randomize.Struct(seed, o, soapFragranceDBTypes, true, soapFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapFragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SoapFragranceSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSoapFragrancesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SoapFragrance{}
	if err = randomize.Struct(seed, o, soapFragranceDBTypes, true, soapFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapFragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SoapFragrances().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	soapFragranceDBTypes = map[string]string{`ID`: `integer`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`, `Name`: `character varying`, `GramsPerLiter`: `double precision`, `Note`: `text`}
	_                    = bytes.MinRead
)

func testSoapFragrancesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(soapFragrancePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(soapFragranceAllColumns) == len(soapFragrancePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SoapFragrance{}
	if err = randomize.Struct(seed, o, soapFragranceDBTypes, true, soapFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapFragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapFragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, soapFragranceDBTypes, true, soapFragrancePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SoapFragrance struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSoapFragrancesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(soapFragranceAllColumns) == len(soapFragrancePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SoapFragrance{}
	if err = randomize.Struct(seed, o, soapFragranceDBTypes, true, soapFragranceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SoapFragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SoapFragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, soapFragranceDBTypes, true, soapFragrancePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SoapFragrance struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(soapFragranceAllColumns, soapFragrancePrimaryKeyColumns) {
		fields = soapFragranceAllColumns
	} else {
		fields = strmangle.SetComplement(
			soapFragranceAllColumns,
			soapFragrancePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SoapFragranceSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSoapFragrancesUpsert(t *testing.T) {
	t.Parallel()

	if len(soapFragranceAllColumns) == len(soapFragrancePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SoapFragrance{}
	if err = randomize.Struct(seed, &o, soapFragranceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SoapFragrance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SoapFragrance: %s", err)
	}

	count, err := SoapFragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, soapFragranceDBTypes, false, soapFragrancePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SoapFragrance struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SoapFragrance: %s", err)
	}

	count, err = SoapFragrances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
