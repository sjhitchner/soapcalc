// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RecipeLye is an object representing the database table.
type RecipeLye struct {
	CreatedAt     time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt     null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	ID            string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Weight        float64   `boil:"weight" json:"weight" toml:"weight" yaml:"weight"`
	Concentration float64   `boil:"concentration" json:"concentration" toml:"concentration" yaml:"concentration"`
	Discount      float64   `boil:"discount" json:"discount" toml:"discount" yaml:"discount"`
	Cost          float64   `boil:"cost" json:"cost" toml:"cost" yaml:"cost"`
	LyeID         int       `boil:"lye_id" json:"lye_id" toml:"lye_id" yaml:"lye_id"`

	R *recipeLyeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L recipeLyeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RecipeLyeColumns = struct {
	CreatedAt     string
	UpdatedAt     string
	DeletedAt     string
	ID            string
	Weight        string
	Concentration string
	Discount      string
	Cost          string
	LyeID         string
}{
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	DeletedAt:     "deleted_at",
	ID:            "id",
	Weight:        "weight",
	Concentration: "concentration",
	Discount:      "discount",
	Cost:          "cost",
	LyeID:         "lye_id",
}

// Generated where

var RecipeLyeWhere = struct {
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
	DeletedAt     whereHelpernull_Time
	ID            whereHelperstring
	Weight        whereHelperfloat64
	Concentration whereHelperfloat64
	Discount      whereHelperfloat64
	Cost          whereHelperfloat64
	LyeID         whereHelperint
}{
	CreatedAt:     whereHelpertime_Time{field: "\"recipe_lye\".\"created_at\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"recipe_lye\".\"updated_at\""},
	DeletedAt:     whereHelpernull_Time{field: "\"recipe_lye\".\"deleted_at\""},
	ID:            whereHelperstring{field: "\"recipe_lye\".\"id\""},
	Weight:        whereHelperfloat64{field: "\"recipe_lye\".\"weight\""},
	Concentration: whereHelperfloat64{field: "\"recipe_lye\".\"concentration\""},
	Discount:      whereHelperfloat64{field: "\"recipe_lye\".\"discount\""},
	Cost:          whereHelperfloat64{field: "\"recipe_lye\".\"cost\""},
	LyeID:         whereHelperint{field: "\"recipe_lye\".\"lye_id\""},
}

// RecipeLyeRels is where relationship names are stored.
var RecipeLyeRels = struct {
	Lye        string
	LyeRecipes string
}{
	Lye:        "Lye",
	LyeRecipes: "LyeRecipes",
}

// recipeLyeR is where relationships are stored.
type recipeLyeR struct {
	Lye        *Lye        `boil:"Lye" json:"Lye" toml:"Lye" yaml:"Lye"`
	LyeRecipes RecipeSlice `boil:"LyeRecipes" json:"LyeRecipes" toml:"LyeRecipes" yaml:"LyeRecipes"`
}

// NewStruct creates a new relationship struct
func (*recipeLyeR) NewStruct() *recipeLyeR {
	return &recipeLyeR{}
}

// recipeLyeL is where Load methods for each relationship are stored.
type recipeLyeL struct{}

var (
	recipeLyeAllColumns            = []string{"created_at", "updated_at", "deleted_at", "id", "weight", "concentration", "discount", "cost", "lye_id"}
	recipeLyeColumnsWithoutDefault = []string{"created_at", "updated_at", "deleted_at", "id", "weight", "concentration", "discount", "cost", "lye_id"}
	recipeLyeColumnsWithDefault    = []string{}
	recipeLyePrimaryKeyColumns     = []string{"id"}
)

type (
	// RecipeLyeSlice is an alias for a slice of pointers to RecipeLye.
	// This should generally be used opposed to []RecipeLye.
	RecipeLyeSlice []*RecipeLye
	// RecipeLyeHook is the signature for custom RecipeLye hook methods
	RecipeLyeHook func(context.Context, boil.ContextExecutor, *RecipeLye) error

	recipeLyeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	recipeLyeType                 = reflect.TypeOf(&RecipeLye{})
	recipeLyeMapping              = queries.MakeStructMapping(recipeLyeType)
	recipeLyePrimaryKeyMapping, _ = queries.BindMapping(recipeLyeType, recipeLyeMapping, recipeLyePrimaryKeyColumns)
	recipeLyeInsertCacheMut       sync.RWMutex
	recipeLyeInsertCache          = make(map[string]insertCache)
	recipeLyeUpdateCacheMut       sync.RWMutex
	recipeLyeUpdateCache          = make(map[string]updateCache)
	recipeLyeUpsertCacheMut       sync.RWMutex
	recipeLyeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var recipeLyeBeforeInsertHooks []RecipeLyeHook
var recipeLyeBeforeUpdateHooks []RecipeLyeHook
var recipeLyeBeforeDeleteHooks []RecipeLyeHook
var recipeLyeBeforeUpsertHooks []RecipeLyeHook

var recipeLyeAfterInsertHooks []RecipeLyeHook
var recipeLyeAfterSelectHooks []RecipeLyeHook
var recipeLyeAfterUpdateHooks []RecipeLyeHook
var recipeLyeAfterDeleteHooks []RecipeLyeHook
var recipeLyeAfterUpsertHooks []RecipeLyeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RecipeLye) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeLyeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RecipeLye) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeLyeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RecipeLye) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeLyeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RecipeLye) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeLyeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RecipeLye) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeLyeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RecipeLye) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeLyeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RecipeLye) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeLyeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RecipeLye) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeLyeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RecipeLye) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range recipeLyeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRecipeLyeHook registers your hook function for all future operations.
func AddRecipeLyeHook(hookPoint boil.HookPoint, recipeLyeHook RecipeLyeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		recipeLyeBeforeInsertHooks = append(recipeLyeBeforeInsertHooks, recipeLyeHook)
	case boil.BeforeUpdateHook:
		recipeLyeBeforeUpdateHooks = append(recipeLyeBeforeUpdateHooks, recipeLyeHook)
	case boil.BeforeDeleteHook:
		recipeLyeBeforeDeleteHooks = append(recipeLyeBeforeDeleteHooks, recipeLyeHook)
	case boil.BeforeUpsertHook:
		recipeLyeBeforeUpsertHooks = append(recipeLyeBeforeUpsertHooks, recipeLyeHook)
	case boil.AfterInsertHook:
		recipeLyeAfterInsertHooks = append(recipeLyeAfterInsertHooks, recipeLyeHook)
	case boil.AfterSelectHook:
		recipeLyeAfterSelectHooks = append(recipeLyeAfterSelectHooks, recipeLyeHook)
	case boil.AfterUpdateHook:
		recipeLyeAfterUpdateHooks = append(recipeLyeAfterUpdateHooks, recipeLyeHook)
	case boil.AfterDeleteHook:
		recipeLyeAfterDeleteHooks = append(recipeLyeAfterDeleteHooks, recipeLyeHook)
	case boil.AfterUpsertHook:
		recipeLyeAfterUpsertHooks = append(recipeLyeAfterUpsertHooks, recipeLyeHook)
	}
}

// One returns a single recipeLye record from the query.
func (q recipeLyeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RecipeLye, error) {
	o := &RecipeLye{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for recipe_lye")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RecipeLye records from the query.
func (q recipeLyeQuery) All(ctx context.Context, exec boil.ContextExecutor) (RecipeLyeSlice, error) {
	var o []*RecipeLye

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RecipeLye slice")
	}

	if len(recipeLyeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RecipeLye records in the query.
func (q recipeLyeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count recipe_lye rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q recipeLyeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if recipe_lye exists")
	}

	return count > 0, nil
}

// Lye pointed to by the foreign key.
func (o *RecipeLye) Lye(mods ...qm.QueryMod) lyeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LyeID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := Lyes(queryMods...)
	queries.SetFrom(query.Query, "\"lye\"")

	return query
}

// LyeRecipes retrieves all the recipe's Recipes with an executor via lye_id column.
func (o *RecipeLye) LyeRecipes(mods ...qm.QueryMod) recipeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"recipe\".\"lye_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"recipe\".\"deleted_at\""),
	)

	query := Recipes(queryMods...)
	queries.SetFrom(query.Query, "\"recipe\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"recipe\".*"})
	}

	return query
}

// LoadLye allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (recipeLyeL) LoadLye(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecipeLye interface{}, mods queries.Applicator) error {
	var slice []*RecipeLye
	var object *RecipeLye

	if singular {
		object = maybeRecipeLye.(*RecipeLye)
	} else {
		slice = *maybeRecipeLye.(*[]*RecipeLye)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &recipeLyeR{}
		}
		args = append(args, object.LyeID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recipeLyeR{}
			}

			for _, a := range args {
				if a == obj.LyeID {
					continue Outer
				}
			}

			args = append(args, obj.LyeID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`lye`),
		qm.WhereIn(`lye.id in ?`, args...),
		qmhelper.WhereIsNull(`lye.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Lye")
	}

	var resultSlice []*Lye
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Lye")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for lye")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for lye")
	}

	if len(recipeLyeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Lye = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LyeID == foreign.ID {
				local.R.Lye = foreign
				break
			}
		}
	}

	return nil
}

// LoadLyeRecipes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (recipeLyeL) LoadLyeRecipes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRecipeLye interface{}, mods queries.Applicator) error {
	var slice []*RecipeLye
	var object *RecipeLye

	if singular {
		object = maybeRecipeLye.(*RecipeLye)
	} else {
		slice = *maybeRecipeLye.(*[]*RecipeLye)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &recipeLyeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &recipeLyeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`recipe`),
		qm.WhereIn(`recipe.lye_id in ?`, args...),
		qmhelper.WhereIsNull(`recipe.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load recipe")
	}

	var resultSlice []*Recipe
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice recipe")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on recipe")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for recipe")
	}

	if len(recipeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.LyeRecipes = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.LyeID {
				local.R.LyeRecipes = append(local.R.LyeRecipes, foreign)
				break
			}
		}
	}

	return nil
}

// SetLye of the recipeLye to the related item.
// Sets o.R.Lye to related.
// Adds o to related.R.RecipeLyes.
func (o *RecipeLye) SetLye(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Lye) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"recipe_lye\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"lye_id"}),
		strmangle.WhereClause("\"", "\"", 2, recipeLyePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LyeID = related.ID
	if o.R == nil {
		o.R = &recipeLyeR{
			Lye: related,
		}
	} else {
		o.R.Lye = related
	}

	if related.R == nil {
		related.R = &lyeR{
			RecipeLyes: RecipeLyeSlice{o},
		}
	} else {
		related.R.RecipeLyes = append(related.R.RecipeLyes, o)
	}

	return nil
}

// AddLyeRecipes adds the given related objects to the existing relationships
// of the recipe_lye, optionally inserting them as new records.
// Appends related to o.R.LyeRecipes.
// Sets related.R.Lye appropriately.
func (o *RecipeLye) AddLyeRecipes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Recipe) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.LyeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"recipe\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"lye_id"}),
				strmangle.WhereClause("\"", "\"", 2, recipePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.LyeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &recipeLyeR{
			LyeRecipes: related,
		}
	} else {
		o.R.LyeRecipes = append(o.R.LyeRecipes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &recipeR{
				Lye: o,
			}
		} else {
			rel.R.Lye = o
		}
	}
	return nil
}

// RecipeLyes retrieves all the records using an executor.
func RecipeLyes(mods ...qm.QueryMod) recipeLyeQuery {
	mods = append(mods, qm.From("\"recipe_lye\""), qmhelper.WhereIsNull("\"recipe_lye\".\"deleted_at\""))
	return recipeLyeQuery{NewQuery(mods...)}
}

// FindRecipeLye retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRecipeLye(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*RecipeLye, error) {
	recipeLyeObj := &RecipeLye{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"recipe_lye\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, recipeLyeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from recipe_lye")
	}

	return recipeLyeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RecipeLye) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no recipe_lye provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recipeLyeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	recipeLyeInsertCacheMut.RLock()
	cache, cached := recipeLyeInsertCache[key]
	recipeLyeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			recipeLyeAllColumns,
			recipeLyeColumnsWithDefault,
			recipeLyeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(recipeLyeType, recipeLyeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(recipeLyeType, recipeLyeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"recipe_lye\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"recipe_lye\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into recipe_lye")
	}

	if !cached {
		recipeLyeInsertCacheMut.Lock()
		recipeLyeInsertCache[key] = cache
		recipeLyeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RecipeLye.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RecipeLye) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	recipeLyeUpdateCacheMut.RLock()
	cache, cached := recipeLyeUpdateCache[key]
	recipeLyeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			recipeLyeAllColumns,
			recipeLyePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update recipe_lye, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"recipe_lye\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, recipeLyePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(recipeLyeType, recipeLyeMapping, append(wl, recipeLyePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update recipe_lye row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for recipe_lye")
	}

	if !cached {
		recipeLyeUpdateCacheMut.Lock()
		recipeLyeUpdateCache[key] = cache
		recipeLyeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q recipeLyeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for recipe_lye")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for recipe_lye")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RecipeLyeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recipeLyePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"recipe_lye\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, recipeLyePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in recipeLye slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all recipeLye")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RecipeLye) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no recipe_lye provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recipeLyeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	recipeLyeUpsertCacheMut.RLock()
	cache, cached := recipeLyeUpsertCache[key]
	recipeLyeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			recipeLyeAllColumns,
			recipeLyeColumnsWithDefault,
			recipeLyeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			recipeLyeAllColumns,
			recipeLyePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert recipe_lye, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(recipeLyePrimaryKeyColumns))
			copy(conflict, recipeLyePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"recipe_lye\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(recipeLyeType, recipeLyeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(recipeLyeType, recipeLyeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert recipe_lye")
	}

	if !cached {
		recipeLyeUpsertCacheMut.Lock()
		recipeLyeUpsertCache[key] = cache
		recipeLyeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RecipeLye record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RecipeLye) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RecipeLye provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), recipeLyePrimaryKeyMapping)
		sql = "DELETE FROM \"recipe_lye\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"recipe_lye\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(recipeLyeType, recipeLyeMapping, append(wl, recipeLyePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from recipe_lye")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for recipe_lye")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q recipeLyeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no recipeLyeQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from recipe_lye")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for recipe_lye")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RecipeLyeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(recipeLyeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recipeLyePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"recipe_lye\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, recipeLyePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recipeLyePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"recipe_lye\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, recipeLyePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from recipeLye slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for recipe_lye")
	}

	if len(recipeLyeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RecipeLye) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRecipeLye(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RecipeLyeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RecipeLyeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), recipeLyePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"recipe_lye\".* FROM \"recipe_lye\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, recipeLyePrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RecipeLyeSlice")
	}

	*o = slice

	return nil
}

// RecipeLyeExists checks if the RecipeLye row exists.
func RecipeLyeExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"recipe_lye\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if recipe_lye exists")
	}

	return exists, nil
}
