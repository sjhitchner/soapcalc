// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SoapRecipefragrance is an object representing the database table.
type SoapRecipefragrance struct {
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt   null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	ID          string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Percentage  float64   `boil:"percentage" json:"percentage" toml:"percentage" yaml:"percentage"`
	Weight      float64   `boil:"weight" json:"weight" toml:"weight" yaml:"weight"`
	FragranceID int       `boil:"fragrance_id" json:"fragrance_id" toml:"fragrance_id" yaml:"fragrance_id"`

	R *soapRecipefragranceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L soapRecipefragranceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SoapRecipefragranceColumns = struct {
	CreatedAt   string
	UpdatedAt   string
	DeletedAt   string
	ID          string
	Percentage  string
	Weight      string
	FragranceID string
}{
	CreatedAt:   "created_at",
	UpdatedAt:   "updated_at",
	DeletedAt:   "deleted_at",
	ID:          "id",
	Percentage:  "percentage",
	Weight:      "weight",
	FragranceID: "fragrance_id",
}

// Generated where

var SoapRecipefragranceWhere = struct {
	CreatedAt   whereHelpertime_Time
	UpdatedAt   whereHelpertime_Time
	DeletedAt   whereHelpernull_Time
	ID          whereHelperstring
	Percentage  whereHelperfloat64
	Weight      whereHelperfloat64
	FragranceID whereHelperint
}{
	CreatedAt:   whereHelpertime_Time{field: "\"soap_recipefragrance\".\"created_at\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"soap_recipefragrance\".\"updated_at\""},
	DeletedAt:   whereHelpernull_Time{field: "\"soap_recipefragrance\".\"deleted_at\""},
	ID:          whereHelperstring{field: "\"soap_recipefragrance\".\"id\""},
	Percentage:  whereHelperfloat64{field: "\"soap_recipefragrance\".\"percentage\""},
	Weight:      whereHelperfloat64{field: "\"soap_recipefragrance\".\"weight\""},
	FragranceID: whereHelperint{field: "\"soap_recipefragrance\".\"fragrance_id\""},
}

// SoapRecipefragranceRels is where relationship names are stored.
var SoapRecipefragranceRels = struct {
	Fragrance            string
	FragranceSoapRecipes string
}{
	Fragrance:            "Fragrance",
	FragranceSoapRecipes: "FragranceSoapRecipes",
}

// soapRecipefragranceR is where relationships are stored.
type soapRecipefragranceR struct {
	Fragrance            *SoapFragrance  `boil:"Fragrance" json:"Fragrance" toml:"Fragrance" yaml:"Fragrance"`
	FragranceSoapRecipes SoapRecipeSlice `boil:"FragranceSoapRecipes" json:"FragranceSoapRecipes" toml:"FragranceSoapRecipes" yaml:"FragranceSoapRecipes"`
}

// NewStruct creates a new relationship struct
func (*soapRecipefragranceR) NewStruct() *soapRecipefragranceR {
	return &soapRecipefragranceR{}
}

// soapRecipefragranceL is where Load methods for each relationship are stored.
type soapRecipefragranceL struct{}

var (
	soapRecipefragranceAllColumns            = []string{"created_at", "updated_at", "deleted_at", "id", "percentage", "weight", "fragrance_id"}
	soapRecipefragranceColumnsWithoutDefault = []string{"created_at", "updated_at", "deleted_at", "id", "percentage", "weight", "fragrance_id"}
	soapRecipefragranceColumnsWithDefault    = []string{}
	soapRecipefragrancePrimaryKeyColumns     = []string{"id"}
)

type (
	// SoapRecipefragranceSlice is an alias for a slice of pointers to SoapRecipefragrance.
	// This should generally be used opposed to []SoapRecipefragrance.
	SoapRecipefragranceSlice []*SoapRecipefragrance
	// SoapRecipefragranceHook is the signature for custom SoapRecipefragrance hook methods
	SoapRecipefragranceHook func(context.Context, boil.ContextExecutor, *SoapRecipefragrance) error

	soapRecipefragranceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	soapRecipefragranceType                 = reflect.TypeOf(&SoapRecipefragrance{})
	soapRecipefragranceMapping              = queries.MakeStructMapping(soapRecipefragranceType)
	soapRecipefragrancePrimaryKeyMapping, _ = queries.BindMapping(soapRecipefragranceType, soapRecipefragranceMapping, soapRecipefragrancePrimaryKeyColumns)
	soapRecipefragranceInsertCacheMut       sync.RWMutex
	soapRecipefragranceInsertCache          = make(map[string]insertCache)
	soapRecipefragranceUpdateCacheMut       sync.RWMutex
	soapRecipefragranceUpdateCache          = make(map[string]updateCache)
	soapRecipefragranceUpsertCacheMut       sync.RWMutex
	soapRecipefragranceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var soapRecipefragranceBeforeInsertHooks []SoapRecipefragranceHook
var soapRecipefragranceBeforeUpdateHooks []SoapRecipefragranceHook
var soapRecipefragranceBeforeDeleteHooks []SoapRecipefragranceHook
var soapRecipefragranceBeforeUpsertHooks []SoapRecipefragranceHook

var soapRecipefragranceAfterInsertHooks []SoapRecipefragranceHook
var soapRecipefragranceAfterSelectHooks []SoapRecipefragranceHook
var soapRecipefragranceAfterUpdateHooks []SoapRecipefragranceHook
var soapRecipefragranceAfterDeleteHooks []SoapRecipefragranceHook
var soapRecipefragranceAfterUpsertHooks []SoapRecipefragranceHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SoapRecipefragrance) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapRecipefragranceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SoapRecipefragrance) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapRecipefragranceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SoapRecipefragrance) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapRecipefragranceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SoapRecipefragrance) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapRecipefragranceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SoapRecipefragrance) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapRecipefragranceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SoapRecipefragrance) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapRecipefragranceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SoapRecipefragrance) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapRecipefragranceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SoapRecipefragrance) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapRecipefragranceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SoapRecipefragrance) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range soapRecipefragranceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSoapRecipefragranceHook registers your hook function for all future operations.
func AddSoapRecipefragranceHook(hookPoint boil.HookPoint, soapRecipefragranceHook SoapRecipefragranceHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		soapRecipefragranceBeforeInsertHooks = append(soapRecipefragranceBeforeInsertHooks, soapRecipefragranceHook)
	case boil.BeforeUpdateHook:
		soapRecipefragranceBeforeUpdateHooks = append(soapRecipefragranceBeforeUpdateHooks, soapRecipefragranceHook)
	case boil.BeforeDeleteHook:
		soapRecipefragranceBeforeDeleteHooks = append(soapRecipefragranceBeforeDeleteHooks, soapRecipefragranceHook)
	case boil.BeforeUpsertHook:
		soapRecipefragranceBeforeUpsertHooks = append(soapRecipefragranceBeforeUpsertHooks, soapRecipefragranceHook)
	case boil.AfterInsertHook:
		soapRecipefragranceAfterInsertHooks = append(soapRecipefragranceAfterInsertHooks, soapRecipefragranceHook)
	case boil.AfterSelectHook:
		soapRecipefragranceAfterSelectHooks = append(soapRecipefragranceAfterSelectHooks, soapRecipefragranceHook)
	case boil.AfterUpdateHook:
		soapRecipefragranceAfterUpdateHooks = append(soapRecipefragranceAfterUpdateHooks, soapRecipefragranceHook)
	case boil.AfterDeleteHook:
		soapRecipefragranceAfterDeleteHooks = append(soapRecipefragranceAfterDeleteHooks, soapRecipefragranceHook)
	case boil.AfterUpsertHook:
		soapRecipefragranceAfterUpsertHooks = append(soapRecipefragranceAfterUpsertHooks, soapRecipefragranceHook)
	}
}

// One returns a single soapRecipefragrance record from the query.
func (q soapRecipefragranceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SoapRecipefragrance, error) {
	o := &SoapRecipefragrance{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for soap_recipefragrance")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SoapRecipefragrance records from the query.
func (q soapRecipefragranceQuery) All(ctx context.Context, exec boil.ContextExecutor) (SoapRecipefragranceSlice, error) {
	var o []*SoapRecipefragrance

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SoapRecipefragrance slice")
	}

	if len(soapRecipefragranceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SoapRecipefragrance records in the query.
func (q soapRecipefragranceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count soap_recipefragrance rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q soapRecipefragranceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if soap_recipefragrance exists")
	}

	return count > 0, nil
}

// Fragrance pointed to by the foreign key.
func (o *SoapRecipefragrance) Fragrance(mods ...qm.QueryMod) soapFragranceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FragranceID),
		qmhelper.WhereIsNull("deleted_at"),
	}

	queryMods = append(queryMods, mods...)

	query := SoapFragrances(queryMods...)
	queries.SetFrom(query.Query, "\"soap_fragrance\"")

	return query
}

// FragranceSoapRecipes retrieves all the soap_recipe's SoapRecipes with an executor via fragrances_id column.
func (o *SoapRecipefragrance) FragranceSoapRecipes(mods ...qm.QueryMod) soapRecipeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"soap_recipe\".\"fragrances_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"soap_recipe\".\"deleted_at\""),
	)

	query := SoapRecipes(queryMods...)
	queries.SetFrom(query.Query, "\"soap_recipe\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"soap_recipe\".*"})
	}

	return query
}

// LoadFragrance allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (soapRecipefragranceL) LoadFragrance(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSoapRecipefragrance interface{}, mods queries.Applicator) error {
	var slice []*SoapRecipefragrance
	var object *SoapRecipefragrance

	if singular {
		object = maybeSoapRecipefragrance.(*SoapRecipefragrance)
	} else {
		slice = *maybeSoapRecipefragrance.(*[]*SoapRecipefragrance)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &soapRecipefragranceR{}
		}
		args = append(args, object.FragranceID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &soapRecipefragranceR{}
			}

			for _, a := range args {
				if a == obj.FragranceID {
					continue Outer
				}
			}

			args = append(args, obj.FragranceID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`soap_fragrance`),
		qm.WhereIn(`soap_fragrance.id in ?`, args...),
		qmhelper.WhereIsNull(`soap_fragrance.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SoapFragrance")
	}

	var resultSlice []*SoapFragrance
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SoapFragrance")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for soap_fragrance")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for soap_fragrance")
	}

	if len(soapRecipefragranceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Fragrance = foreign
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FragranceID == foreign.ID {
				local.R.Fragrance = foreign
				break
			}
		}
	}

	return nil
}

// LoadFragranceSoapRecipes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (soapRecipefragranceL) LoadFragranceSoapRecipes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSoapRecipefragrance interface{}, mods queries.Applicator) error {
	var slice []*SoapRecipefragrance
	var object *SoapRecipefragrance

	if singular {
		object = maybeSoapRecipefragrance.(*SoapRecipefragrance)
	} else {
		slice = *maybeSoapRecipefragrance.(*[]*SoapRecipefragrance)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &soapRecipefragranceR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &soapRecipefragranceR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`soap_recipe`),
		qm.WhereIn(`soap_recipe.fragrances_id in ?`, args...),
		qmhelper.WhereIsNull(`soap_recipe.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load soap_recipe")
	}

	var resultSlice []*SoapRecipe
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice soap_recipe")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on soap_recipe")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for soap_recipe")
	}

	if len(soapRecipeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FragranceSoapRecipes = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.FragrancesID {
				local.R.FragranceSoapRecipes = append(local.R.FragranceSoapRecipes, foreign)
				break
			}
		}
	}

	return nil
}

// SetFragrance of the soapRecipefragrance to the related item.
// Sets o.R.Fragrance to related.
// Adds o to related.R.FragranceSoapRecipefragrances.
func (o *SoapRecipefragrance) SetFragrance(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SoapFragrance) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"soap_recipefragrance\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"fragrance_id"}),
		strmangle.WhereClause("\"", "\"", 2, soapRecipefragrancePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FragranceID = related.ID
	if o.R == nil {
		o.R = &soapRecipefragranceR{
			Fragrance: related,
		}
	} else {
		o.R.Fragrance = related
	}

	if related.R == nil {
		related.R = &soapFragranceR{
			FragranceSoapRecipefragrances: SoapRecipefragranceSlice{o},
		}
	} else {
		related.R.FragranceSoapRecipefragrances = append(related.R.FragranceSoapRecipefragrances, o)
	}

	return nil
}

// AddFragranceSoapRecipes adds the given related objects to the existing relationships
// of the soap_recipefragrance, optionally inserting them as new records.
// Appends related to o.R.FragranceSoapRecipes.
// Sets related.R.Fragrance appropriately.
func (o *SoapRecipefragrance) AddFragranceSoapRecipes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SoapRecipe) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.FragrancesID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"soap_recipe\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"fragrances_id"}),
				strmangle.WhereClause("\"", "\"", 2, soapRecipePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.FragrancesID = o.ID
		}
	}

	if o.R == nil {
		o.R = &soapRecipefragranceR{
			FragranceSoapRecipes: related,
		}
	} else {
		o.R.FragranceSoapRecipes = append(o.R.FragranceSoapRecipes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &soapRecipeR{
				Fragrance: o,
			}
		} else {
			rel.R.Fragrance = o
		}
	}
	return nil
}

// SoapRecipefragrances retrieves all the records using an executor.
func SoapRecipefragrances(mods ...qm.QueryMod) soapRecipefragranceQuery {
	mods = append(mods, qm.From("\"soap_recipefragrance\""), qmhelper.WhereIsNull("\"soap_recipefragrance\".\"deleted_at\""))
	return soapRecipefragranceQuery{NewQuery(mods...)}
}

// FindSoapRecipefragrance retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSoapRecipefragrance(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*SoapRecipefragrance, error) {
	soapRecipefragranceObj := &SoapRecipefragrance{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"soap_recipefragrance\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, soapRecipefragranceObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from soap_recipefragrance")
	}

	return soapRecipefragranceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SoapRecipefragrance) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no soap_recipefragrance provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(soapRecipefragranceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	soapRecipefragranceInsertCacheMut.RLock()
	cache, cached := soapRecipefragranceInsertCache[key]
	soapRecipefragranceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			soapRecipefragranceAllColumns,
			soapRecipefragranceColumnsWithDefault,
			soapRecipefragranceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(soapRecipefragranceType, soapRecipefragranceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(soapRecipefragranceType, soapRecipefragranceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"soap_recipefragrance\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"soap_recipefragrance\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into soap_recipefragrance")
	}

	if !cached {
		soapRecipefragranceInsertCacheMut.Lock()
		soapRecipefragranceInsertCache[key] = cache
		soapRecipefragranceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SoapRecipefragrance.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SoapRecipefragrance) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	soapRecipefragranceUpdateCacheMut.RLock()
	cache, cached := soapRecipefragranceUpdateCache[key]
	soapRecipefragranceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			soapRecipefragranceAllColumns,
			soapRecipefragrancePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update soap_recipefragrance, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"soap_recipefragrance\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, soapRecipefragrancePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(soapRecipefragranceType, soapRecipefragranceMapping, append(wl, soapRecipefragrancePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update soap_recipefragrance row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for soap_recipefragrance")
	}

	if !cached {
		soapRecipefragranceUpdateCacheMut.Lock()
		soapRecipefragranceUpdateCache[key] = cache
		soapRecipefragranceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q soapRecipefragranceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for soap_recipefragrance")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for soap_recipefragrance")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SoapRecipefragranceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), soapRecipefragrancePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"soap_recipefragrance\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, soapRecipefragrancePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in soapRecipefragrance slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all soapRecipefragrance")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SoapRecipefragrance) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no soap_recipefragrance provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(soapRecipefragranceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	soapRecipefragranceUpsertCacheMut.RLock()
	cache, cached := soapRecipefragranceUpsertCache[key]
	soapRecipefragranceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			soapRecipefragranceAllColumns,
			soapRecipefragranceColumnsWithDefault,
			soapRecipefragranceColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			soapRecipefragranceAllColumns,
			soapRecipefragrancePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert soap_recipefragrance, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(soapRecipefragrancePrimaryKeyColumns))
			copy(conflict, soapRecipefragrancePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"soap_recipefragrance\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(soapRecipefragranceType, soapRecipefragranceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(soapRecipefragranceType, soapRecipefragranceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert soap_recipefragrance")
	}

	if !cached {
		soapRecipefragranceUpsertCacheMut.Lock()
		soapRecipefragranceUpsertCache[key] = cache
		soapRecipefragranceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SoapRecipefragrance record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SoapRecipefragrance) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SoapRecipefragrance provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), soapRecipefragrancePrimaryKeyMapping)
		sql = "DELETE FROM \"soap_recipefragrance\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"soap_recipefragrance\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(soapRecipefragranceType, soapRecipefragranceMapping, append(wl, soapRecipefragrancePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from soap_recipefragrance")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for soap_recipefragrance")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q soapRecipefragranceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no soapRecipefragranceQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from soap_recipefragrance")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for soap_recipefragrance")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SoapRecipefragranceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(soapRecipefragranceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), soapRecipefragrancePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"soap_recipefragrance\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, soapRecipefragrancePrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), soapRecipefragrancePrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"soap_recipefragrance\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, soapRecipefragrancePrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from soapRecipefragrance slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for soap_recipefragrance")
	}

	if len(soapRecipefragranceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SoapRecipefragrance) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSoapRecipefragrance(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SoapRecipefragranceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SoapRecipefragranceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), soapRecipefragrancePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"soap_recipefragrance\".* FROM \"soap_recipefragrance\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, soapRecipefragrancePrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SoapRecipefragranceSlice")
	}

	*o = slice

	return nil
}

// SoapRecipefragranceExists checks if the SoapRecipefragrance row exists.
func SoapRecipefragranceExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"soap_recipefragrance\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if soap_recipefragrance exists")
	}

	return exists, nil
}
