// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("SoapAdditives", testSoapAdditives)
	t.Run("SoapAdditiveinventories", testSoapAdditiveinventories)
	t.Run("SoapFragrances", testSoapFragrances)
	t.Run("SoapFragranceinventories", testSoapFragranceinventories)
	t.Run("SoapLipids", testSoapLipids)
	t.Run("SoapLipidinventories", testSoapLipidinventories)
	t.Run("SoapLyes", testSoapLyes)
	t.Run("SoapLyeinventories", testSoapLyeinventories)
	t.Run("SoapRecipes", testSoapRecipes)
	t.Run("SoapRecipeadditives", testSoapRecipeadditives)
	t.Run("SoapRecipefragrances", testSoapRecipefragrances)
	t.Run("SoapRecipelipids", testSoapRecipelipids)
	t.Run("SoapRecipelyes", testSoapRecipelyes)
	t.Run("SoapSuppliers", testSoapSuppliers)
}

func TestSoftDelete(t *testing.T) {
	t.Run("SoapAdditives", testSoapAdditivesSoftDelete)
	t.Run("SoapAdditiveinventories", testSoapAdditiveinventoriesSoftDelete)
	t.Run("SoapFragrances", testSoapFragrancesSoftDelete)
	t.Run("SoapFragranceinventories", testSoapFragranceinventoriesSoftDelete)
	t.Run("SoapLipids", testSoapLipidsSoftDelete)
	t.Run("SoapLipidinventories", testSoapLipidinventoriesSoftDelete)
	t.Run("SoapLyes", testSoapLyesSoftDelete)
	t.Run("SoapLyeinventories", testSoapLyeinventoriesSoftDelete)
	t.Run("SoapRecipes", testSoapRecipesSoftDelete)
	t.Run("SoapRecipeadditives", testSoapRecipeadditivesSoftDelete)
	t.Run("SoapRecipefragrances", testSoapRecipefragrancesSoftDelete)
	t.Run("SoapRecipelipids", testSoapRecipelipidsSoftDelete)
	t.Run("SoapRecipelyes", testSoapRecipelyesSoftDelete)
	t.Run("SoapSuppliers", testSoapSuppliersSoftDelete)
}

func TestQuerySoftDeleteAll(t *testing.T) {
	t.Run("SoapAdditives", testSoapAdditivesQuerySoftDeleteAll)
	t.Run("SoapAdditiveinventories", testSoapAdditiveinventoriesQuerySoftDeleteAll)
	t.Run("SoapFragrances", testSoapFragrancesQuerySoftDeleteAll)
	t.Run("SoapFragranceinventories", testSoapFragranceinventoriesQuerySoftDeleteAll)
	t.Run("SoapLipids", testSoapLipidsQuerySoftDeleteAll)
	t.Run("SoapLipidinventories", testSoapLipidinventoriesQuerySoftDeleteAll)
	t.Run("SoapLyes", testSoapLyesQuerySoftDeleteAll)
	t.Run("SoapLyeinventories", testSoapLyeinventoriesQuerySoftDeleteAll)
	t.Run("SoapRecipes", testSoapRecipesQuerySoftDeleteAll)
	t.Run("SoapRecipeadditives", testSoapRecipeadditivesQuerySoftDeleteAll)
	t.Run("SoapRecipefragrances", testSoapRecipefragrancesQuerySoftDeleteAll)
	t.Run("SoapRecipelipids", testSoapRecipelipidsQuerySoftDeleteAll)
	t.Run("SoapRecipelyes", testSoapRecipelyesQuerySoftDeleteAll)
	t.Run("SoapSuppliers", testSoapSuppliersQuerySoftDeleteAll)
}

func TestSliceSoftDeleteAll(t *testing.T) {
	t.Run("SoapAdditives", testSoapAdditivesSliceSoftDeleteAll)
	t.Run("SoapAdditiveinventories", testSoapAdditiveinventoriesSliceSoftDeleteAll)
	t.Run("SoapFragrances", testSoapFragrancesSliceSoftDeleteAll)
	t.Run("SoapFragranceinventories", testSoapFragranceinventoriesSliceSoftDeleteAll)
	t.Run("SoapLipids", testSoapLipidsSliceSoftDeleteAll)
	t.Run("SoapLipidinventories", testSoapLipidinventoriesSliceSoftDeleteAll)
	t.Run("SoapLyes", testSoapLyesSliceSoftDeleteAll)
	t.Run("SoapLyeinventories", testSoapLyeinventoriesSliceSoftDeleteAll)
	t.Run("SoapRecipes", testSoapRecipesSliceSoftDeleteAll)
	t.Run("SoapRecipeadditives", testSoapRecipeadditivesSliceSoftDeleteAll)
	t.Run("SoapRecipefragrances", testSoapRecipefragrancesSliceSoftDeleteAll)
	t.Run("SoapRecipelipids", testSoapRecipelipidsSliceSoftDeleteAll)
	t.Run("SoapRecipelyes", testSoapRecipelyesSliceSoftDeleteAll)
	t.Run("SoapSuppliers", testSoapSuppliersSliceSoftDeleteAll)
}

func TestDelete(t *testing.T) {
	t.Run("SoapAdditives", testSoapAdditivesDelete)
	t.Run("SoapAdditiveinventories", testSoapAdditiveinventoriesDelete)
	t.Run("SoapFragrances", testSoapFragrancesDelete)
	t.Run("SoapFragranceinventories", testSoapFragranceinventoriesDelete)
	t.Run("SoapLipids", testSoapLipidsDelete)
	t.Run("SoapLipidinventories", testSoapLipidinventoriesDelete)
	t.Run("SoapLyes", testSoapLyesDelete)
	t.Run("SoapLyeinventories", testSoapLyeinventoriesDelete)
	t.Run("SoapRecipes", testSoapRecipesDelete)
	t.Run("SoapRecipeadditives", testSoapRecipeadditivesDelete)
	t.Run("SoapRecipefragrances", testSoapRecipefragrancesDelete)
	t.Run("SoapRecipelipids", testSoapRecipelipidsDelete)
	t.Run("SoapRecipelyes", testSoapRecipelyesDelete)
	t.Run("SoapSuppliers", testSoapSuppliersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("SoapAdditives", testSoapAdditivesQueryDeleteAll)
	t.Run("SoapAdditiveinventories", testSoapAdditiveinventoriesQueryDeleteAll)
	t.Run("SoapFragrances", testSoapFragrancesQueryDeleteAll)
	t.Run("SoapFragranceinventories", testSoapFragranceinventoriesQueryDeleteAll)
	t.Run("SoapLipids", testSoapLipidsQueryDeleteAll)
	t.Run("SoapLipidinventories", testSoapLipidinventoriesQueryDeleteAll)
	t.Run("SoapLyes", testSoapLyesQueryDeleteAll)
	t.Run("SoapLyeinventories", testSoapLyeinventoriesQueryDeleteAll)
	t.Run("SoapRecipes", testSoapRecipesQueryDeleteAll)
	t.Run("SoapRecipeadditives", testSoapRecipeadditivesQueryDeleteAll)
	t.Run("SoapRecipefragrances", testSoapRecipefragrancesQueryDeleteAll)
	t.Run("SoapRecipelipids", testSoapRecipelipidsQueryDeleteAll)
	t.Run("SoapRecipelyes", testSoapRecipelyesQueryDeleteAll)
	t.Run("SoapSuppliers", testSoapSuppliersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("SoapAdditives", testSoapAdditivesSliceDeleteAll)
	t.Run("SoapAdditiveinventories", testSoapAdditiveinventoriesSliceDeleteAll)
	t.Run("SoapFragrances", testSoapFragrancesSliceDeleteAll)
	t.Run("SoapFragranceinventories", testSoapFragranceinventoriesSliceDeleteAll)
	t.Run("SoapLipids", testSoapLipidsSliceDeleteAll)
	t.Run("SoapLipidinventories", testSoapLipidinventoriesSliceDeleteAll)
	t.Run("SoapLyes", testSoapLyesSliceDeleteAll)
	t.Run("SoapLyeinventories", testSoapLyeinventoriesSliceDeleteAll)
	t.Run("SoapRecipes", testSoapRecipesSliceDeleteAll)
	t.Run("SoapRecipeadditives", testSoapRecipeadditivesSliceDeleteAll)
	t.Run("SoapRecipefragrances", testSoapRecipefragrancesSliceDeleteAll)
	t.Run("SoapRecipelipids", testSoapRecipelipidsSliceDeleteAll)
	t.Run("SoapRecipelyes", testSoapRecipelyesSliceDeleteAll)
	t.Run("SoapSuppliers", testSoapSuppliersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("SoapAdditives", testSoapAdditivesExists)
	t.Run("SoapAdditiveinventories", testSoapAdditiveinventoriesExists)
	t.Run("SoapFragrances", testSoapFragrancesExists)
	t.Run("SoapFragranceinventories", testSoapFragranceinventoriesExists)
	t.Run("SoapLipids", testSoapLipidsExists)
	t.Run("SoapLipidinventories", testSoapLipidinventoriesExists)
	t.Run("SoapLyes", testSoapLyesExists)
	t.Run("SoapLyeinventories", testSoapLyeinventoriesExists)
	t.Run("SoapRecipes", testSoapRecipesExists)
	t.Run("SoapRecipeadditives", testSoapRecipeadditivesExists)
	t.Run("SoapRecipefragrances", testSoapRecipefragrancesExists)
	t.Run("SoapRecipelipids", testSoapRecipelipidsExists)
	t.Run("SoapRecipelyes", testSoapRecipelyesExists)
	t.Run("SoapSuppliers", testSoapSuppliersExists)
}

func TestFind(t *testing.T) {
	t.Run("SoapAdditives", testSoapAdditivesFind)
	t.Run("SoapAdditiveinventories", testSoapAdditiveinventoriesFind)
	t.Run("SoapFragrances", testSoapFragrancesFind)
	t.Run("SoapFragranceinventories", testSoapFragranceinventoriesFind)
	t.Run("SoapLipids", testSoapLipidsFind)
	t.Run("SoapLipidinventories", testSoapLipidinventoriesFind)
	t.Run("SoapLyes", testSoapLyesFind)
	t.Run("SoapLyeinventories", testSoapLyeinventoriesFind)
	t.Run("SoapRecipes", testSoapRecipesFind)
	t.Run("SoapRecipeadditives", testSoapRecipeadditivesFind)
	t.Run("SoapRecipefragrances", testSoapRecipefragrancesFind)
	t.Run("SoapRecipelipids", testSoapRecipelipidsFind)
	t.Run("SoapRecipelyes", testSoapRecipelyesFind)
	t.Run("SoapSuppliers", testSoapSuppliersFind)
}

func TestBind(t *testing.T) {
	t.Run("SoapAdditives", testSoapAdditivesBind)
	t.Run("SoapAdditiveinventories", testSoapAdditiveinventoriesBind)
	t.Run("SoapFragrances", testSoapFragrancesBind)
	t.Run("SoapFragranceinventories", testSoapFragranceinventoriesBind)
	t.Run("SoapLipids", testSoapLipidsBind)
	t.Run("SoapLipidinventories", testSoapLipidinventoriesBind)
	t.Run("SoapLyes", testSoapLyesBind)
	t.Run("SoapLyeinventories", testSoapLyeinventoriesBind)
	t.Run("SoapRecipes", testSoapRecipesBind)
	t.Run("SoapRecipeadditives", testSoapRecipeadditivesBind)
	t.Run("SoapRecipefragrances", testSoapRecipefragrancesBind)
	t.Run("SoapRecipelipids", testSoapRecipelipidsBind)
	t.Run("SoapRecipelyes", testSoapRecipelyesBind)
	t.Run("SoapSuppliers", testSoapSuppliersBind)
}

func TestOne(t *testing.T) {
	t.Run("SoapAdditives", testSoapAdditivesOne)
	t.Run("SoapAdditiveinventories", testSoapAdditiveinventoriesOne)
	t.Run("SoapFragrances", testSoapFragrancesOne)
	t.Run("SoapFragranceinventories", testSoapFragranceinventoriesOne)
	t.Run("SoapLipids", testSoapLipidsOne)
	t.Run("SoapLipidinventories", testSoapLipidinventoriesOne)
	t.Run("SoapLyes", testSoapLyesOne)
	t.Run("SoapLyeinventories", testSoapLyeinventoriesOne)
	t.Run("SoapRecipes", testSoapRecipesOne)
	t.Run("SoapRecipeadditives", testSoapRecipeadditivesOne)
	t.Run("SoapRecipefragrances", testSoapRecipefragrancesOne)
	t.Run("SoapRecipelipids", testSoapRecipelipidsOne)
	t.Run("SoapRecipelyes", testSoapRecipelyesOne)
	t.Run("SoapSuppliers", testSoapSuppliersOne)
}

func TestAll(t *testing.T) {
	t.Run("SoapAdditives", testSoapAdditivesAll)
	t.Run("SoapAdditiveinventories", testSoapAdditiveinventoriesAll)
	t.Run("SoapFragrances", testSoapFragrancesAll)
	t.Run("SoapFragranceinventories", testSoapFragranceinventoriesAll)
	t.Run("SoapLipids", testSoapLipidsAll)
	t.Run("SoapLipidinventories", testSoapLipidinventoriesAll)
	t.Run("SoapLyes", testSoapLyesAll)
	t.Run("SoapLyeinventories", testSoapLyeinventoriesAll)
	t.Run("SoapRecipes", testSoapRecipesAll)
	t.Run("SoapRecipeadditives", testSoapRecipeadditivesAll)
	t.Run("SoapRecipefragrances", testSoapRecipefragrancesAll)
	t.Run("SoapRecipelipids", testSoapRecipelipidsAll)
	t.Run("SoapRecipelyes", testSoapRecipelyesAll)
	t.Run("SoapSuppliers", testSoapSuppliersAll)
}

func TestCount(t *testing.T) {
	t.Run("SoapAdditives", testSoapAdditivesCount)
	t.Run("SoapAdditiveinventories", testSoapAdditiveinventoriesCount)
	t.Run("SoapFragrances", testSoapFragrancesCount)
	t.Run("SoapFragranceinventories", testSoapFragranceinventoriesCount)
	t.Run("SoapLipids", testSoapLipidsCount)
	t.Run("SoapLipidinventories", testSoapLipidinventoriesCount)
	t.Run("SoapLyes", testSoapLyesCount)
	t.Run("SoapLyeinventories", testSoapLyeinventoriesCount)
	t.Run("SoapRecipes", testSoapRecipesCount)
	t.Run("SoapRecipeadditives", testSoapRecipeadditivesCount)
	t.Run("SoapRecipefragrances", testSoapRecipefragrancesCount)
	t.Run("SoapRecipelipids", testSoapRecipelipidsCount)
	t.Run("SoapRecipelyes", testSoapRecipelyesCount)
	t.Run("SoapSuppliers", testSoapSuppliersCount)
}

func TestHooks(t *testing.T) {
	t.Run("SoapAdditives", testSoapAdditivesHooks)
	t.Run("SoapAdditiveinventories", testSoapAdditiveinventoriesHooks)
	t.Run("SoapFragrances", testSoapFragrancesHooks)
	t.Run("SoapFragranceinventories", testSoapFragranceinventoriesHooks)
	t.Run("SoapLipids", testSoapLipidsHooks)
	t.Run("SoapLipidinventories", testSoapLipidinventoriesHooks)
	t.Run("SoapLyes", testSoapLyesHooks)
	t.Run("SoapLyeinventories", testSoapLyeinventoriesHooks)
	t.Run("SoapRecipes", testSoapRecipesHooks)
	t.Run("SoapRecipeadditives", testSoapRecipeadditivesHooks)
	t.Run("SoapRecipefragrances", testSoapRecipefragrancesHooks)
	t.Run("SoapRecipelipids", testSoapRecipelipidsHooks)
	t.Run("SoapRecipelyes", testSoapRecipelyesHooks)
	t.Run("SoapSuppliers", testSoapSuppliersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("SoapAdditives", testSoapAdditivesInsert)
	t.Run("SoapAdditives", testSoapAdditivesInsertWhitelist)
	t.Run("SoapAdditiveinventories", testSoapAdditiveinventoriesInsert)
	t.Run("SoapAdditiveinventories", testSoapAdditiveinventoriesInsertWhitelist)
	t.Run("SoapFragrances", testSoapFragrancesInsert)
	t.Run("SoapFragrances", testSoapFragrancesInsertWhitelist)
	t.Run("SoapFragranceinventories", testSoapFragranceinventoriesInsert)
	t.Run("SoapFragranceinventories", testSoapFragranceinventoriesInsertWhitelist)
	t.Run("SoapLipids", testSoapLipidsInsert)
	t.Run("SoapLipids", testSoapLipidsInsertWhitelist)
	t.Run("SoapLipidinventories", testSoapLipidinventoriesInsert)
	t.Run("SoapLipidinventories", testSoapLipidinventoriesInsertWhitelist)
	t.Run("SoapLyes", testSoapLyesInsert)
	t.Run("SoapLyes", testSoapLyesInsertWhitelist)
	t.Run("SoapLyeinventories", testSoapLyeinventoriesInsert)
	t.Run("SoapLyeinventories", testSoapLyeinventoriesInsertWhitelist)
	t.Run("SoapRecipes", testSoapRecipesInsert)
	t.Run("SoapRecipes", testSoapRecipesInsertWhitelist)
	t.Run("SoapRecipeadditives", testSoapRecipeadditivesInsert)
	t.Run("SoapRecipeadditives", testSoapRecipeadditivesInsertWhitelist)
	t.Run("SoapRecipefragrances", testSoapRecipefragrancesInsert)
	t.Run("SoapRecipefragrances", testSoapRecipefragrancesInsertWhitelist)
	t.Run("SoapRecipelipids", testSoapRecipelipidsInsert)
	t.Run("SoapRecipelipids", testSoapRecipelipidsInsertWhitelist)
	t.Run("SoapRecipelyes", testSoapRecipelyesInsert)
	t.Run("SoapRecipelyes", testSoapRecipelyesInsertWhitelist)
	t.Run("SoapSuppliers", testSoapSuppliersInsert)
	t.Run("SoapSuppliers", testSoapSuppliersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("SoapAdditiveinventoryToSoapAdditiveUsingAdditive", testSoapAdditiveinventoryToOneSoapAdditiveUsingAdditive)
	t.Run("SoapAdditiveinventoryToSoapSupplierUsingSupplier", testSoapAdditiveinventoryToOneSoapSupplierUsingSupplier)
	t.Run("SoapFragranceinventoryToSoapFragranceUsingFragrance", testSoapFragranceinventoryToOneSoapFragranceUsingFragrance)
	t.Run("SoapFragranceinventoryToSoapSupplierUsingSupplier", testSoapFragranceinventoryToOneSoapSupplierUsingSupplier)
	t.Run("SoapLipidinventoryToSoapLipidUsingLipid", testSoapLipidinventoryToOneSoapLipidUsingLipid)
	t.Run("SoapLipidinventoryToSoapSupplierUsingSupplier", testSoapLipidinventoryToOneSoapSupplierUsingSupplier)
	t.Run("SoapLyeinventoryToSoapLyeinventoryUsingLye", testSoapLyeinventoryToOneSoapLyeinventoryUsingLye)
	t.Run("SoapLyeinventoryToSoapSupplierUsingSupplier", testSoapLyeinventoryToOneSoapSupplierUsingSupplier)
	t.Run("SoapRecipeToSoapRecipeadditiveUsingAdditive", testSoapRecipeToOneSoapRecipeadditiveUsingAdditive)
	t.Run("SoapRecipeToSoapRecipefragranceUsingFragrance", testSoapRecipeToOneSoapRecipefragranceUsingFragrance)
	t.Run("SoapRecipeToSoapRecipelipidUsingLipid", testSoapRecipeToOneSoapRecipelipidUsingLipid)
	t.Run("SoapRecipeToSoapRecipelyeUsingLye", testSoapRecipeToOneSoapRecipelyeUsingLye)
	t.Run("SoapRecipeadditiveToSoapAdditiveUsingAdditive", testSoapRecipeadditiveToOneSoapAdditiveUsingAdditive)
	t.Run("SoapRecipefragranceToSoapFragranceUsingFragrance", testSoapRecipefragranceToOneSoapFragranceUsingFragrance)
	t.Run("SoapRecipelipidToSoapLipidUsingLipid", testSoapRecipelipidToOneSoapLipidUsingLipid)
	t.Run("SoapRecipelyeToSoapLyeUsingLye", testSoapRecipelyeToOneSoapLyeUsingLye)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("SoapAdditiveToAdditiveSoapAdditiveinventories", testSoapAdditiveToManyAdditiveSoapAdditiveinventories)
	t.Run("SoapAdditiveToAdditiveSoapRecipeadditives", testSoapAdditiveToManyAdditiveSoapRecipeadditives)
	t.Run("SoapFragranceToFragranceSoapFragranceinventories", testSoapFragranceToManyFragranceSoapFragranceinventories)
	t.Run("SoapFragranceToFragranceSoapRecipefragrances", testSoapFragranceToManyFragranceSoapRecipefragrances)
	t.Run("SoapLipidToLipidSoapLipidinventories", testSoapLipidToManyLipidSoapLipidinventories)
	t.Run("SoapLipidToLipidSoapRecipelipids", testSoapLipidToManyLipidSoapRecipelipids)
	t.Run("SoapLyeToLyeSoapRecipelyes", testSoapLyeToManyLyeSoapRecipelyes)
	t.Run("SoapLyeinventoryToLyeSoapLyeinventories", testSoapLyeinventoryToManyLyeSoapLyeinventories)
	t.Run("SoapRecipeadditiveToAdditiveSoapRecipes", testSoapRecipeadditiveToManyAdditiveSoapRecipes)
	t.Run("SoapRecipefragranceToFragranceSoapRecipes", testSoapRecipefragranceToManyFragranceSoapRecipes)
	t.Run("SoapRecipelipidToLipidSoapRecipes", testSoapRecipelipidToManyLipidSoapRecipes)
	t.Run("SoapRecipelyeToLyeSoapRecipes", testSoapRecipelyeToManyLyeSoapRecipes)
	t.Run("SoapSupplierToSupplierSoapAdditiveinventories", testSoapSupplierToManySupplierSoapAdditiveinventories)
	t.Run("SoapSupplierToSupplierSoapFragranceinventories", testSoapSupplierToManySupplierSoapFragranceinventories)
	t.Run("SoapSupplierToSupplierSoapLipidinventories", testSoapSupplierToManySupplierSoapLipidinventories)
	t.Run("SoapSupplierToSupplierSoapLyeinventories", testSoapSupplierToManySupplierSoapLyeinventories)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("SoapAdditiveinventoryToSoapAdditiveUsingAdditiveSoapAdditiveinventories", testSoapAdditiveinventoryToOneSetOpSoapAdditiveUsingAdditive)
	t.Run("SoapAdditiveinventoryToSoapSupplierUsingSupplierSoapAdditiveinventories", testSoapAdditiveinventoryToOneSetOpSoapSupplierUsingSupplier)
	t.Run("SoapFragranceinventoryToSoapFragranceUsingFragranceSoapFragranceinventories", testSoapFragranceinventoryToOneSetOpSoapFragranceUsingFragrance)
	t.Run("SoapFragranceinventoryToSoapSupplierUsingSupplierSoapFragranceinventories", testSoapFragranceinventoryToOneSetOpSoapSupplierUsingSupplier)
	t.Run("SoapLipidinventoryToSoapLipidUsingLipidSoapLipidinventories", testSoapLipidinventoryToOneSetOpSoapLipidUsingLipid)
	t.Run("SoapLipidinventoryToSoapSupplierUsingSupplierSoapLipidinventories", testSoapLipidinventoryToOneSetOpSoapSupplierUsingSupplier)
	t.Run("SoapLyeinventoryToSoapLyeinventoryUsingLyeSoapLyeinventories", testSoapLyeinventoryToOneSetOpSoapLyeinventoryUsingLye)
	t.Run("SoapLyeinventoryToSoapSupplierUsingSupplierSoapLyeinventories", testSoapLyeinventoryToOneSetOpSoapSupplierUsingSupplier)
	t.Run("SoapRecipeToSoapRecipeadditiveUsingAdditiveSoapRecipes", testSoapRecipeToOneSetOpSoapRecipeadditiveUsingAdditive)
	t.Run("SoapRecipeToSoapRecipefragranceUsingFragranceSoapRecipes", testSoapRecipeToOneSetOpSoapRecipefragranceUsingFragrance)
	t.Run("SoapRecipeToSoapRecipelipidUsingLipidSoapRecipes", testSoapRecipeToOneSetOpSoapRecipelipidUsingLipid)
	t.Run("SoapRecipeToSoapRecipelyeUsingLyeSoapRecipes", testSoapRecipeToOneSetOpSoapRecipelyeUsingLye)
	t.Run("SoapRecipeadditiveToSoapAdditiveUsingAdditiveSoapRecipeadditives", testSoapRecipeadditiveToOneSetOpSoapAdditiveUsingAdditive)
	t.Run("SoapRecipefragranceToSoapFragranceUsingFragranceSoapRecipefragrances", testSoapRecipefragranceToOneSetOpSoapFragranceUsingFragrance)
	t.Run("SoapRecipelipidToSoapLipidUsingLipidSoapRecipelipids", testSoapRecipelipidToOneSetOpSoapLipidUsingLipid)
	t.Run("SoapRecipelyeToSoapLyeUsingLyeSoapRecipelyes", testSoapRecipelyeToOneSetOpSoapLyeUsingLye)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("SoapAdditiveToAdditiveSoapAdditiveinventories", testSoapAdditiveToManyAddOpAdditiveSoapAdditiveinventories)
	t.Run("SoapAdditiveToAdditiveSoapRecipeadditives", testSoapAdditiveToManyAddOpAdditiveSoapRecipeadditives)
	t.Run("SoapFragranceToFragranceSoapFragranceinventories", testSoapFragranceToManyAddOpFragranceSoapFragranceinventories)
	t.Run("SoapFragranceToFragranceSoapRecipefragrances", testSoapFragranceToManyAddOpFragranceSoapRecipefragrances)
	t.Run("SoapLipidToLipidSoapLipidinventories", testSoapLipidToManyAddOpLipidSoapLipidinventories)
	t.Run("SoapLipidToLipidSoapRecipelipids", testSoapLipidToManyAddOpLipidSoapRecipelipids)
	t.Run("SoapLyeToLyeSoapRecipelyes", testSoapLyeToManyAddOpLyeSoapRecipelyes)
	t.Run("SoapLyeinventoryToLyeSoapLyeinventories", testSoapLyeinventoryToManyAddOpLyeSoapLyeinventories)
	t.Run("SoapRecipeadditiveToAdditiveSoapRecipes", testSoapRecipeadditiveToManyAddOpAdditiveSoapRecipes)
	t.Run("SoapRecipefragranceToFragranceSoapRecipes", testSoapRecipefragranceToManyAddOpFragranceSoapRecipes)
	t.Run("SoapRecipelipidToLipidSoapRecipes", testSoapRecipelipidToManyAddOpLipidSoapRecipes)
	t.Run("SoapRecipelyeToLyeSoapRecipes", testSoapRecipelyeToManyAddOpLyeSoapRecipes)
	t.Run("SoapSupplierToSupplierSoapAdditiveinventories", testSoapSupplierToManyAddOpSupplierSoapAdditiveinventories)
	t.Run("SoapSupplierToSupplierSoapFragranceinventories", testSoapSupplierToManyAddOpSupplierSoapFragranceinventories)
	t.Run("SoapSupplierToSupplierSoapLipidinventories", testSoapSupplierToManyAddOpSupplierSoapLipidinventories)
	t.Run("SoapSupplierToSupplierSoapLyeinventories", testSoapSupplierToManyAddOpSupplierSoapLyeinventories)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("SoapAdditives", testSoapAdditivesReload)
	t.Run("SoapAdditiveinventories", testSoapAdditiveinventoriesReload)
	t.Run("SoapFragrances", testSoapFragrancesReload)
	t.Run("SoapFragranceinventories", testSoapFragranceinventoriesReload)
	t.Run("SoapLipids", testSoapLipidsReload)
	t.Run("SoapLipidinventories", testSoapLipidinventoriesReload)
	t.Run("SoapLyes", testSoapLyesReload)
	t.Run("SoapLyeinventories", testSoapLyeinventoriesReload)
	t.Run("SoapRecipes", testSoapRecipesReload)
	t.Run("SoapRecipeadditives", testSoapRecipeadditivesReload)
	t.Run("SoapRecipefragrances", testSoapRecipefragrancesReload)
	t.Run("SoapRecipelipids", testSoapRecipelipidsReload)
	t.Run("SoapRecipelyes", testSoapRecipelyesReload)
	t.Run("SoapSuppliers", testSoapSuppliersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("SoapAdditives", testSoapAdditivesReloadAll)
	t.Run("SoapAdditiveinventories", testSoapAdditiveinventoriesReloadAll)
	t.Run("SoapFragrances", testSoapFragrancesReloadAll)
	t.Run("SoapFragranceinventories", testSoapFragranceinventoriesReloadAll)
	t.Run("SoapLipids", testSoapLipidsReloadAll)
	t.Run("SoapLipidinventories", testSoapLipidinventoriesReloadAll)
	t.Run("SoapLyes", testSoapLyesReloadAll)
	t.Run("SoapLyeinventories", testSoapLyeinventoriesReloadAll)
	t.Run("SoapRecipes", testSoapRecipesReloadAll)
	t.Run("SoapRecipeadditives", testSoapRecipeadditivesReloadAll)
	t.Run("SoapRecipefragrances", testSoapRecipefragrancesReloadAll)
	t.Run("SoapRecipelipids", testSoapRecipelipidsReloadAll)
	t.Run("SoapRecipelyes", testSoapRecipelyesReloadAll)
	t.Run("SoapSuppliers", testSoapSuppliersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("SoapAdditives", testSoapAdditivesSelect)
	t.Run("SoapAdditiveinventories", testSoapAdditiveinventoriesSelect)
	t.Run("SoapFragrances", testSoapFragrancesSelect)
	t.Run("SoapFragranceinventories", testSoapFragranceinventoriesSelect)
	t.Run("SoapLipids", testSoapLipidsSelect)
	t.Run("SoapLipidinventories", testSoapLipidinventoriesSelect)
	t.Run("SoapLyes", testSoapLyesSelect)
	t.Run("SoapLyeinventories", testSoapLyeinventoriesSelect)
	t.Run("SoapRecipes", testSoapRecipesSelect)
	t.Run("SoapRecipeadditives", testSoapRecipeadditivesSelect)
	t.Run("SoapRecipefragrances", testSoapRecipefragrancesSelect)
	t.Run("SoapRecipelipids", testSoapRecipelipidsSelect)
	t.Run("SoapRecipelyes", testSoapRecipelyesSelect)
	t.Run("SoapSuppliers", testSoapSuppliersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("SoapAdditives", testSoapAdditivesUpdate)
	t.Run("SoapAdditiveinventories", testSoapAdditiveinventoriesUpdate)
	t.Run("SoapFragrances", testSoapFragrancesUpdate)
	t.Run("SoapFragranceinventories", testSoapFragranceinventoriesUpdate)
	t.Run("SoapLipids", testSoapLipidsUpdate)
	t.Run("SoapLipidinventories", testSoapLipidinventoriesUpdate)
	t.Run("SoapLyes", testSoapLyesUpdate)
	t.Run("SoapLyeinventories", testSoapLyeinventoriesUpdate)
	t.Run("SoapRecipes", testSoapRecipesUpdate)
	t.Run("SoapRecipeadditives", testSoapRecipeadditivesUpdate)
	t.Run("SoapRecipefragrances", testSoapRecipefragrancesUpdate)
	t.Run("SoapRecipelipids", testSoapRecipelipidsUpdate)
	t.Run("SoapRecipelyes", testSoapRecipelyesUpdate)
	t.Run("SoapSuppliers", testSoapSuppliersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("SoapAdditives", testSoapAdditivesSliceUpdateAll)
	t.Run("SoapAdditiveinventories", testSoapAdditiveinventoriesSliceUpdateAll)
	t.Run("SoapFragrances", testSoapFragrancesSliceUpdateAll)
	t.Run("SoapFragranceinventories", testSoapFragranceinventoriesSliceUpdateAll)
	t.Run("SoapLipids", testSoapLipidsSliceUpdateAll)
	t.Run("SoapLipidinventories", testSoapLipidinventoriesSliceUpdateAll)
	t.Run("SoapLyes", testSoapLyesSliceUpdateAll)
	t.Run("SoapLyeinventories", testSoapLyeinventoriesSliceUpdateAll)
	t.Run("SoapRecipes", testSoapRecipesSliceUpdateAll)
	t.Run("SoapRecipeadditives", testSoapRecipeadditivesSliceUpdateAll)
	t.Run("SoapRecipefragrances", testSoapRecipefragrancesSliceUpdateAll)
	t.Run("SoapRecipelipids", testSoapRecipelipidsSliceUpdateAll)
	t.Run("SoapRecipelyes", testSoapRecipelyesSliceUpdateAll)
	t.Run("SoapSuppliers", testSoapSuppliersSliceUpdateAll)
}
