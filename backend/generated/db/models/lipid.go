// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Lipid is an object representing the database table.
type Lipid struct {
	ID           int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt    time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt    null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`
	Name         string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Lauric       int       `boil:"lauric" json:"lauric" toml:"lauric" yaml:"lauric"`
	Myristic     int       `boil:"myristic" json:"myristic" toml:"myristic" yaml:"myristic"`
	Palmitic     int       `boil:"palmitic" json:"palmitic" toml:"palmitic" yaml:"palmitic"`
	Stearic      int       `boil:"stearic" json:"stearic" toml:"stearic" yaml:"stearic"`
	Ricinoleic   int       `boil:"ricinoleic" json:"ricinoleic" toml:"ricinoleic" yaml:"ricinoleic"`
	Oleic        int       `boil:"oleic" json:"oleic" toml:"oleic" yaml:"oleic"`
	Linoleic     int       `boil:"linoleic" json:"linoleic" toml:"linoleic" yaml:"linoleic"`
	Linolenic    int       `boil:"linolenic" json:"linolenic" toml:"linolenic" yaml:"linolenic"`
	Hardness     int       `boil:"hardness" json:"hardness" toml:"hardness" yaml:"hardness"`
	Cleansing    int       `boil:"cleansing" json:"cleansing" toml:"cleansing" yaml:"cleansing"`
	Conditioning int       `boil:"conditioning" json:"conditioning" toml:"conditioning" yaml:"conditioning"`
	Bubbly       int       `boil:"bubbly" json:"bubbly" toml:"bubbly" yaml:"bubbly"`
	Creamy       int       `boil:"creamy" json:"creamy" toml:"creamy" yaml:"creamy"`
	Iodine       int       `boil:"iodine" json:"iodine" toml:"iodine" yaml:"iodine"`
	Ins          int       `boil:"ins" json:"ins" toml:"ins" yaml:"ins"`
	InciName     string    `boil:"inci_name" json:"inci_name" toml:"inci_name" yaml:"inci_name"`
	Family       string    `boil:"family" json:"family" toml:"family" yaml:"family"`
	Naoh         float64   `boil:"naoh" json:"naoh" toml:"naoh" yaml:"naoh"`

	R *lipidR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L lipidL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LipidColumns = struct {
	ID           string
	CreatedAt    string
	UpdatedAt    string
	DeletedAt    string
	Name         string
	Lauric       string
	Myristic     string
	Palmitic     string
	Stearic      string
	Ricinoleic   string
	Oleic        string
	Linoleic     string
	Linolenic    string
	Hardness     string
	Cleansing    string
	Conditioning string
	Bubbly       string
	Creamy       string
	Iodine       string
	Ins          string
	InciName     string
	Family       string
	Naoh         string
}{
	ID:           "id",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
	DeletedAt:    "deleted_at",
	Name:         "name",
	Lauric:       "lauric",
	Myristic:     "myristic",
	Palmitic:     "palmitic",
	Stearic:      "stearic",
	Ricinoleic:   "ricinoleic",
	Oleic:        "oleic",
	Linoleic:     "linoleic",
	Linolenic:    "linolenic",
	Hardness:     "hardness",
	Cleansing:    "cleansing",
	Conditioning: "conditioning",
	Bubbly:       "bubbly",
	Creamy:       "creamy",
	Iodine:       "iodine",
	Ins:          "ins",
	InciName:     "inci_name",
	Family:       "family",
	Naoh:         "naoh",
}

// Generated where

var LipidWhere = struct {
	ID           whereHelperint
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
	DeletedAt    whereHelpernull_Time
	Name         whereHelperstring
	Lauric       whereHelperint
	Myristic     whereHelperint
	Palmitic     whereHelperint
	Stearic      whereHelperint
	Ricinoleic   whereHelperint
	Oleic        whereHelperint
	Linoleic     whereHelperint
	Linolenic    whereHelperint
	Hardness     whereHelperint
	Cleansing    whereHelperint
	Conditioning whereHelperint
	Bubbly       whereHelperint
	Creamy       whereHelperint
	Iodine       whereHelperint
	Ins          whereHelperint
	InciName     whereHelperstring
	Family       whereHelperstring
	Naoh         whereHelperfloat64
}{
	ID:           whereHelperint{field: "\"lipid\".\"id\""},
	CreatedAt:    whereHelpertime_Time{field: "\"lipid\".\"created_at\""},
	UpdatedAt:    whereHelpertime_Time{field: "\"lipid\".\"updated_at\""},
	DeletedAt:    whereHelpernull_Time{field: "\"lipid\".\"deleted_at\""},
	Name:         whereHelperstring{field: "\"lipid\".\"name\""},
	Lauric:       whereHelperint{field: "\"lipid\".\"lauric\""},
	Myristic:     whereHelperint{field: "\"lipid\".\"myristic\""},
	Palmitic:     whereHelperint{field: "\"lipid\".\"palmitic\""},
	Stearic:      whereHelperint{field: "\"lipid\".\"stearic\""},
	Ricinoleic:   whereHelperint{field: "\"lipid\".\"ricinoleic\""},
	Oleic:        whereHelperint{field: "\"lipid\".\"oleic\""},
	Linoleic:     whereHelperint{field: "\"lipid\".\"linoleic\""},
	Linolenic:    whereHelperint{field: "\"lipid\".\"linolenic\""},
	Hardness:     whereHelperint{field: "\"lipid\".\"hardness\""},
	Cleansing:    whereHelperint{field: "\"lipid\".\"cleansing\""},
	Conditioning: whereHelperint{field: "\"lipid\".\"conditioning\""},
	Bubbly:       whereHelperint{field: "\"lipid\".\"bubbly\""},
	Creamy:       whereHelperint{field: "\"lipid\".\"creamy\""},
	Iodine:       whereHelperint{field: "\"lipid\".\"iodine\""},
	Ins:          whereHelperint{field: "\"lipid\".\"ins\""},
	InciName:     whereHelperstring{field: "\"lipid\".\"inci_name\""},
	Family:       whereHelperstring{field: "\"lipid\".\"family\""},
	Naoh:         whereHelperfloat64{field: "\"lipid\".\"naoh\""},
}

// LipidRels is where relationship names are stored.
var LipidRels = struct {
	LipidInventories  string
	RecipeBatchLipids string
	RecipeLipids      string
}{
	LipidInventories:  "LipidInventories",
	RecipeBatchLipids: "RecipeBatchLipids",
	RecipeLipids:      "RecipeLipids",
}

// lipidR is where relationships are stored.
type lipidR struct {
	LipidInventories  LipidInventorySlice   `boil:"LipidInventories" json:"LipidInventories" toml:"LipidInventories" yaml:"LipidInventories"`
	RecipeBatchLipids RecipeBatchLipidSlice `boil:"RecipeBatchLipids" json:"RecipeBatchLipids" toml:"RecipeBatchLipids" yaml:"RecipeBatchLipids"`
	RecipeLipids      RecipeLipidSlice      `boil:"RecipeLipids" json:"RecipeLipids" toml:"RecipeLipids" yaml:"RecipeLipids"`
}

// NewStruct creates a new relationship struct
func (*lipidR) NewStruct() *lipidR {
	return &lipidR{}
}

// lipidL is where Load methods for each relationship are stored.
type lipidL struct{}

var (
	lipidAllColumns            = []string{"id", "created_at", "updated_at", "deleted_at", "name", "lauric", "myristic", "palmitic", "stearic", "ricinoleic", "oleic", "linoleic", "linolenic", "hardness", "cleansing", "conditioning", "bubbly", "creamy", "iodine", "ins", "inci_name", "family", "naoh"}
	lipidColumnsWithoutDefault = []string{"created_at", "updated_at", "deleted_at", "name", "lauric", "myristic", "palmitic", "stearic", "ricinoleic", "oleic", "linoleic", "linolenic", "hardness", "cleansing", "conditioning", "bubbly", "creamy", "iodine", "ins", "inci_name", "family", "naoh"}
	lipidColumnsWithDefault    = []string{"id"}
	lipidPrimaryKeyColumns     = []string{"id"}
)

type (
	// LipidSlice is an alias for a slice of pointers to Lipid.
	// This should generally be used opposed to []Lipid.
	LipidSlice []*Lipid
	// LipidHook is the signature for custom Lipid hook methods
	LipidHook func(context.Context, boil.ContextExecutor, *Lipid) error

	lipidQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	lipidType                 = reflect.TypeOf(&Lipid{})
	lipidMapping              = queries.MakeStructMapping(lipidType)
	lipidPrimaryKeyMapping, _ = queries.BindMapping(lipidType, lipidMapping, lipidPrimaryKeyColumns)
	lipidInsertCacheMut       sync.RWMutex
	lipidInsertCache          = make(map[string]insertCache)
	lipidUpdateCacheMut       sync.RWMutex
	lipidUpdateCache          = make(map[string]updateCache)
	lipidUpsertCacheMut       sync.RWMutex
	lipidUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var lipidBeforeInsertHooks []LipidHook
var lipidBeforeUpdateHooks []LipidHook
var lipidBeforeDeleteHooks []LipidHook
var lipidBeforeUpsertHooks []LipidHook

var lipidAfterInsertHooks []LipidHook
var lipidAfterSelectHooks []LipidHook
var lipidAfterUpdateHooks []LipidHook
var lipidAfterDeleteHooks []LipidHook
var lipidAfterUpsertHooks []LipidHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Lipid) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lipidBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Lipid) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lipidBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Lipid) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lipidBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Lipid) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lipidBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Lipid) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lipidAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Lipid) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lipidAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Lipid) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lipidAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Lipid) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lipidAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Lipid) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range lipidAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLipidHook registers your hook function for all future operations.
func AddLipidHook(hookPoint boil.HookPoint, lipidHook LipidHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		lipidBeforeInsertHooks = append(lipidBeforeInsertHooks, lipidHook)
	case boil.BeforeUpdateHook:
		lipidBeforeUpdateHooks = append(lipidBeforeUpdateHooks, lipidHook)
	case boil.BeforeDeleteHook:
		lipidBeforeDeleteHooks = append(lipidBeforeDeleteHooks, lipidHook)
	case boil.BeforeUpsertHook:
		lipidBeforeUpsertHooks = append(lipidBeforeUpsertHooks, lipidHook)
	case boil.AfterInsertHook:
		lipidAfterInsertHooks = append(lipidAfterInsertHooks, lipidHook)
	case boil.AfterSelectHook:
		lipidAfterSelectHooks = append(lipidAfterSelectHooks, lipidHook)
	case boil.AfterUpdateHook:
		lipidAfterUpdateHooks = append(lipidAfterUpdateHooks, lipidHook)
	case boil.AfterDeleteHook:
		lipidAfterDeleteHooks = append(lipidAfterDeleteHooks, lipidHook)
	case boil.AfterUpsertHook:
		lipidAfterUpsertHooks = append(lipidAfterUpsertHooks, lipidHook)
	}
}

// One returns a single lipid record from the query.
func (q lipidQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Lipid, error) {
	o := &Lipid{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for lipid")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Lipid records from the query.
func (q lipidQuery) All(ctx context.Context, exec boil.ContextExecutor) (LipidSlice, error) {
	var o []*Lipid

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Lipid slice")
	}

	if len(lipidAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Lipid records in the query.
func (q lipidQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count lipid rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q lipidQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if lipid exists")
	}

	return count > 0, nil
}

// LipidInventories retrieves all the lipid_inventory's LipidInventories with an executor.
func (o *Lipid) LipidInventories(mods ...qm.QueryMod) lipidInventoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"lipid_inventory\".\"lipid_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"lipid_inventory\".\"deleted_at\""),
	)

	query := LipidInventories(queryMods...)
	queries.SetFrom(query.Query, "\"lipid_inventory\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"lipid_inventory\".*"})
	}

	return query
}

// RecipeBatchLipids retrieves all the recipe_batch_lipid's RecipeBatchLipids with an executor.
func (o *Lipid) RecipeBatchLipids(mods ...qm.QueryMod) recipeBatchLipidQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"recipe_batch_lipid\".\"lipid_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"recipe_batch_lipid\".\"deleted_at\""),
	)

	query := RecipeBatchLipids(queryMods...)
	queries.SetFrom(query.Query, "\"recipe_batch_lipid\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"recipe_batch_lipid\".*"})
	}

	return query
}

// RecipeLipids retrieves all the recipe_lipid's RecipeLipids with an executor.
func (o *Lipid) RecipeLipids(mods ...qm.QueryMod) recipeLipidQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"recipe_lipid\".\"lipid_id\"=?", o.ID),
		qmhelper.WhereIsNull("\"recipe_lipid\".\"deleted_at\""),
	)

	query := RecipeLipids(queryMods...)
	queries.SetFrom(query.Query, "\"recipe_lipid\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"recipe_lipid\".*"})
	}

	return query
}

// LoadLipidInventories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (lipidL) LoadLipidInventories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLipid interface{}, mods queries.Applicator) error {
	var slice []*Lipid
	var object *Lipid

	if singular {
		object = maybeLipid.(*Lipid)
	} else {
		slice = *maybeLipid.(*[]*Lipid)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &lipidR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &lipidR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`lipid_inventory`),
		qm.WhereIn(`lipid_inventory.lipid_id in ?`, args...),
		qmhelper.WhereIsNull(`lipid_inventory.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load lipid_inventory")
	}

	var resultSlice []*LipidInventory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice lipid_inventory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on lipid_inventory")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for lipid_inventory")
	}

	if len(lipidInventoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.LipidInventories = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.LipidID {
				local.R.LipidInventories = append(local.R.LipidInventories, foreign)
				break
			}
		}
	}

	return nil
}

// LoadRecipeBatchLipids allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (lipidL) LoadRecipeBatchLipids(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLipid interface{}, mods queries.Applicator) error {
	var slice []*Lipid
	var object *Lipid

	if singular {
		object = maybeLipid.(*Lipid)
	} else {
		slice = *maybeLipid.(*[]*Lipid)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &lipidR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &lipidR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`recipe_batch_lipid`),
		qm.WhereIn(`recipe_batch_lipid.lipid_id in ?`, args...),
		qmhelper.WhereIsNull(`recipe_batch_lipid.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load recipe_batch_lipid")
	}

	var resultSlice []*RecipeBatchLipid
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice recipe_batch_lipid")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on recipe_batch_lipid")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for recipe_batch_lipid")
	}

	if len(recipeBatchLipidAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RecipeBatchLipids = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.LipidID {
				local.R.RecipeBatchLipids = append(local.R.RecipeBatchLipids, foreign)
				break
			}
		}
	}

	return nil
}

// LoadRecipeLipids allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (lipidL) LoadRecipeLipids(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLipid interface{}, mods queries.Applicator) error {
	var slice []*Lipid
	var object *Lipid

	if singular {
		object = maybeLipid.(*Lipid)
	} else {
		slice = *maybeLipid.(*[]*Lipid)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &lipidR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &lipidR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`recipe_lipid`),
		qm.WhereIn(`recipe_lipid.lipid_id in ?`, args...),
		qmhelper.WhereIsNull(`recipe_lipid.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load recipe_lipid")
	}

	var resultSlice []*RecipeLipid
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice recipe_lipid")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on recipe_lipid")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for recipe_lipid")
	}

	if len(recipeLipidAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RecipeLipids = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.LipidID {
				local.R.RecipeLipids = append(local.R.RecipeLipids, foreign)
				break
			}
		}
	}

	return nil
}

// AddLipidInventories adds the given related objects to the existing relationships
// of the lipid, optionally inserting them as new records.
// Appends related to o.R.LipidInventories.
// Sets related.R.Lipid appropriately.
func (o *Lipid) AddLipidInventories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*LipidInventory) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.LipidID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"lipid_inventory\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"lipid_id"}),
				strmangle.WhereClause("\"", "\"", 2, lipidInventoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.LipidID = o.ID
		}
	}

	if o.R == nil {
		o.R = &lipidR{
			LipidInventories: related,
		}
	} else {
		o.R.LipidInventories = append(o.R.LipidInventories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &lipidInventoryR{
				Lipid: o,
			}
		} else {
			rel.R.Lipid = o
		}
	}
	return nil
}

// AddRecipeBatchLipids adds the given related objects to the existing relationships
// of the lipid, optionally inserting them as new records.
// Appends related to o.R.RecipeBatchLipids.
// Sets related.R.Lipid appropriately.
func (o *Lipid) AddRecipeBatchLipids(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RecipeBatchLipid) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.LipidID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"recipe_batch_lipid\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"lipid_id"}),
				strmangle.WhereClause("\"", "\"", 2, recipeBatchLipidPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.LipidID = o.ID
		}
	}

	if o.R == nil {
		o.R = &lipidR{
			RecipeBatchLipids: related,
		}
	} else {
		o.R.RecipeBatchLipids = append(o.R.RecipeBatchLipids, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &recipeBatchLipidR{
				Lipid: o,
			}
		} else {
			rel.R.Lipid = o
		}
	}
	return nil
}

// AddRecipeLipids adds the given related objects to the existing relationships
// of the lipid, optionally inserting them as new records.
// Appends related to o.R.RecipeLipids.
// Sets related.R.Lipid appropriately.
func (o *Lipid) AddRecipeLipids(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RecipeLipid) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.LipidID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"recipe_lipid\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"lipid_id"}),
				strmangle.WhereClause("\"", "\"", 2, recipeLipidPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.LipidID = o.ID
		}
	}

	if o.R == nil {
		o.R = &lipidR{
			RecipeLipids: related,
		}
	} else {
		o.R.RecipeLipids = append(o.R.RecipeLipids, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &recipeLipidR{
				Lipid: o,
			}
		} else {
			rel.R.Lipid = o
		}
	}
	return nil
}

// Lipids retrieves all the records using an executor.
func Lipids(mods ...qm.QueryMod) lipidQuery {
	mods = append(mods, qm.From("\"lipid\""), qmhelper.WhereIsNull("\"lipid\".\"deleted_at\""))
	return lipidQuery{NewQuery(mods...)}
}

// FindLipid retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLipid(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Lipid, error) {
	lipidObj := &Lipid{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"lipid\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, lipidObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from lipid")
	}

	return lipidObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Lipid) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no lipid provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(lipidColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	lipidInsertCacheMut.RLock()
	cache, cached := lipidInsertCache[key]
	lipidInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			lipidAllColumns,
			lipidColumnsWithDefault,
			lipidColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(lipidType, lipidMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(lipidType, lipidMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"lipid\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"lipid\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into lipid")
	}

	if !cached {
		lipidInsertCacheMut.Lock()
		lipidInsertCache[key] = cache
		lipidInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Lipid.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Lipid) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	lipidUpdateCacheMut.RLock()
	cache, cached := lipidUpdateCache[key]
	lipidUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			lipidAllColumns,
			lipidPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update lipid, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"lipid\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, lipidPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(lipidType, lipidMapping, append(wl, lipidPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update lipid row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for lipid")
	}

	if !cached {
		lipidUpdateCacheMut.Lock()
		lipidUpdateCache[key] = cache
		lipidUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q lipidQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for lipid")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for lipid")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LipidSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lipidPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"lipid\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, lipidPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in lipid slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all lipid")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Lipid) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no lipid provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(lipidColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	lipidUpsertCacheMut.RLock()
	cache, cached := lipidUpsertCache[key]
	lipidUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			lipidAllColumns,
			lipidColumnsWithDefault,
			lipidColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			lipidAllColumns,
			lipidPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert lipid, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(lipidPrimaryKeyColumns))
			copy(conflict, lipidPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"lipid\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(lipidType, lipidMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(lipidType, lipidMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert lipid")
	}

	if !cached {
		lipidUpsertCacheMut.Lock()
		lipidUpsertCache[key] = cache
		lipidUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Lipid record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Lipid) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Lipid provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), lipidPrimaryKeyMapping)
		sql = "DELETE FROM \"lipid\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"lipid\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(lipidType, lipidMapping, append(wl, lipidPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from lipid")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for lipid")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q lipidQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no lipidQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from lipid")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for lipid")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LipidSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(lipidBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lipidPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"lipid\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, lipidPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lipidPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"lipid\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, lipidPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from lipid slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for lipid")
	}

	if len(lipidAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Lipid) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindLipid(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LipidSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LipidSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), lipidPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"lipid\".* FROM \"lipid\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, lipidPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in LipidSlice")
	}

	*o = slice

	return nil
}

// LipidExists checks if the Lipid row exists.
func LipidExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"lipid\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if lipid exists")
	}

	return exists, nil
}
