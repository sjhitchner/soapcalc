// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Additive struct {
	ID        string       `json:"id"`
	Name      string       `json:"name"`
	Note      string       `json:"note"`
	Inventory []*Inventory `json:"inventory"`
}

type CreateRecipe struct {
	Lye              LyeType `json:"lye"`
	LipidWeight      float64 `json:"lipidWeight"`
	LyeConcentration float64 `json:"lyeConcentration"`
	LyeDiscount      float64 `json:"lyeDiscount"`
}

type Fragrance struct {
	ID            string       `json:"id"`
	Name          string       `json:"name"`
	GramsPerLiter float64      `json:"gramsPerLiter"`
	Inventory     []*Inventory `json:"inventory"`
	Note          string       `json:"note"`
}

type Inventory struct {
	ID           string     `json:"id"`
	Supplier     *Supplier  `json:"supplier"`
	PurchaseDate time.Time  `json:"purchaseDate"`
	ExpiryDate   *time.Time `json:"expiryDate"`
	Cost         float64    `json:"cost"`
	Weight       float64    `json:"weight"`
}

type Lipid struct {
	ID            string       `json:"id"`
	Name          string       `json:"name"`
	Type          string       `json:"type"`
	Naoh          float64      `json:"naoh"`
	Koh           float64      `json:"koh"`
	InciName      string       `json:"inciName"`
	GramsPerLiter float64      `json:"gramsPerLiter"`
	Inventory     []*Inventory `json:"inventory"`
}

type Lye struct {
	ID        string       `json:"id"`
	Name      string       `json:"name"`
	Note      string       `json:"note"`
	Inventory []*Inventory `json:"inventory"`
}

type Recipe struct {
	ID          string             `json:"id"`
	Name        string             `json:"name"`
	Lye         *RecipeLye         `json:"lye"`
	Additives   []*RecipeAdditive  `json:"additives"`
	Lipids      []*RecipeLipid     `json:"lipids"`
	LipidWeight float64            `json:"lipidWeight"`
	Fragrances  []*RecipeFragrance `json:"fragrances"`
	Quality     *RecipeQuality     `json:"quality"`
	Composition *RecipeComposition `json:"composition"`
	Cost        float64            `json:"cost"`
}

type RecipeAdditive struct {
	ID         string    `json:"id"`
	Additive   *Additive `json:"additive"`
	Percentage float64   `json:"percentage"`
	Weight     float64   `json:"weight"`
	Cost       float64   `json:"cost"`
}

type RecipeComposition struct {
	ID         string `json:"id"`
	Lauric     int    `json:"lauric"`
	Myristic   int    `json:"myristic"`
	Palmitic   int    `json:"palmitic"`
	Stearic    int    `json:"stearic"`
	Ricinoleic int    `json:"ricinoleic"`
	Oleic      int    `json:"oleic"`
	Linoleic   int    `json:"linoleic"`
	Linolenic  int    `json:"linolenic"`
}

type RecipeFragrance struct {
	ID         string     `json:"id"`
	Fragrance  *Fragrance `json:"fragrance"`
	Percentage float64    `json:"percentage"`
	Weight     float64    `json:"weight"`
}

type RecipeLipid struct {
	ID         string  `json:"id"`
	Lipid      *Lipid  `json:"lipid"`
	Percentage float64 `json:"percentage"`
	Weight     float64 `json:"weight"`
	Cost       float64 `json:"cost"`
}

type RecipeLye struct {
	ID            string  `json:"id"`
	Type          LyeType `json:"type"`
	Weight        float64 `json:"weight"`
	Concentration float64 `json:"concentration"`
	Discount      float64 `json:"discount"`
	Cost          float64 `json:"cost"`
}

type RecipeQuality struct {
	ID           string `json:"id"`
	Hardness     int    `json:"hardness"`
	Cleansing    int    `json:"cleansing"`
	Conditioning int    `json:"conditioning"`
	Bubbly       int    `json:"bubbly"`
	Creamy       int    `json:"creamy"`
	Iodine       int    `json:"iodine"`
	Ins          int    `json:"ins"`
}

type Supplier struct {
	ID   string `json:"id"`
	Name string `json:"name"`
	Note string `json:"note"`
}

type LyeType string

const (
	LyeTypeNaOh LyeType = "NaOH"
	LyeTypeKoh  LyeType = "KOH"
)

var AllLyeType = []LyeType{
	LyeTypeNaOh,
	LyeTypeKoh,
}

func (e LyeType) IsValid() bool {
	switch e {
	case LyeTypeNaOh, LyeTypeKoh:
		return true
	}
	return false
}

func (e LyeType) String() string {
	return string(e)
}

func (e *LyeType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LyeType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LyeType", str)
	}
	return nil
}

func (e LyeType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
