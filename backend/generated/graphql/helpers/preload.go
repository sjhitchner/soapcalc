// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package helpers

import (
	"context"

	"github.com/sjhitchner/soapcalc/backend/generated/db/models"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/web-ridge/utils-go/boilergql"
)

var TablePreloadMap = map[string]map[string]boilergql.ColumnSetting{
	models.TableNames.Additive: {
		"additiveInventories": {
			Name:                  models.AdditiveRels.AdditiveInventories,
			RelationshipModelName: models.TableNames.AdditiveInventory,
			IDAvailable:           false,
		},
	},
	models.TableNames.AdditiveInventory: {
		"additive": {
			Name:                  models.AdditiveInventoryRels.Additive,
			RelationshipModelName: models.TableNames.Additive,
			IDAvailable:           true,
		},
		"supplier": {
			Name:                  models.AdditiveInventoryRels.Supplier,
			RelationshipModelName: models.TableNames.Supplier,
			IDAvailable:           true,
		},
	},
	models.TableNames.Fragrance: {
		"fragranceInventories": {
			Name:                  models.FragranceRels.FragranceInventories,
			RelationshipModelName: models.TableNames.FragranceInventory,
			IDAvailable:           false,
		},
	},
	models.TableNames.FragranceInventory: {
		"fragrance": {
			Name:                  models.FragranceInventoryRels.Fragrance,
			RelationshipModelName: models.TableNames.Fragrance,
			IDAvailable:           true,
		},
		"supplier": {
			Name:                  models.FragranceInventoryRels.Supplier,
			RelationshipModelName: models.TableNames.Supplier,
			IDAvailable:           true,
		},
	},
	models.TableNames.Lipid: {
		"lipidInventories": {
			Name:                  models.LipidRels.LipidInventories,
			RelationshipModelName: models.TableNames.LipidInventory,
			IDAvailable:           false,
		},
	},
	models.TableNames.LipidInventory: {
		"lipid": {
			Name:                  models.LipidInventoryRels.Lipid,
			RelationshipModelName: models.TableNames.Lipid,
			IDAvailable:           true,
		},
		"supplier": {
			Name:                  models.LipidInventoryRels.Supplier,
			RelationshipModelName: models.TableNames.Supplier,
			IDAvailable:           true,
		},
	},
	models.TableNames.Lye: {},
	models.TableNames.LyeInventory: {
		"lye": {
			Name:                  models.LyeInventoryRels.Lye,
			RelationshipModelName: models.TableNames.Lye,
			IDAvailable:           true,
		},
		"supplier": {
			Name:                  models.LyeInventoryRels.Supplier,
			RelationshipModelName: models.TableNames.Supplier,
			IDAvailable:           true,
		},
	},
	models.TableNames.Recipe: {},
	models.TableNames.RecipeAdditive: {
		"additive": {
			Name:                  models.RecipeAdditiveRels.Additive,
			RelationshipModelName: models.TableNames.Additive,
			IDAvailable:           true,
		},
		"recipe": {
			Name:                  models.RecipeAdditiveRels.Recipe,
			RelationshipModelName: models.TableNames.Recipe,
			IDAvailable:           true,
		},
	},
	models.TableNames.RecipeBatch: {
		"recipe": {
			Name:                  models.RecipeBatchRels.Recipe,
			RelationshipModelName: models.TableNames.Recipe,
			IDAvailable:           true,
		},
	},
	models.TableNames.RecipeBatchAdditive: {
		"additive": {
			Name:                  models.RecipeBatchAdditiveRels.Additive,
			RelationshipModelName: models.TableNames.Additive,
			IDAvailable:           true,
		},
		"batch": {
			Name:                  models.RecipeBatchAdditiveRels.Batch,
			RelationshipModelName: models.TableNames.RecipeBatch,
			IDAvailable:           true,
		},
	},
	models.TableNames.RecipeBatchFragrance: {
		"batch": {
			Name:                  models.RecipeBatchFragranceRels.Batch,
			RelationshipModelName: models.TableNames.RecipeBatch,
			IDAvailable:           true,
		},
		"fragrance": {
			Name:                  models.RecipeBatchFragranceRels.Fragrance,
			RelationshipModelName: models.TableNames.Fragrance,
			IDAvailable:           true,
		},
	},
	models.TableNames.RecipeBatchLipid: {
		"batch": {
			Name:                  models.RecipeBatchLipidRels.Batch,
			RelationshipModelName: models.TableNames.RecipeBatch,
			IDAvailable:           true,
		},
		"lipid": {
			Name:                  models.RecipeBatchLipidRels.Lipid,
			RelationshipModelName: models.TableNames.Lipid,
			IDAvailable:           true,
		},
	},
	models.TableNames.RecipeBatchLye: {
		"batch": {
			Name:                  models.RecipeBatchLyeRels.Batch,
			RelationshipModelName: models.TableNames.RecipeBatch,
			IDAvailable:           true,
		},
		"lye": {
			Name:                  models.RecipeBatchLyeRels.Lye,
			RelationshipModelName: models.TableNames.Lye,
			IDAvailable:           true,
		},
	},
	models.TableNames.RecipeFragrance: {
		"fragrance": {
			Name:                  models.RecipeFragranceRels.Fragrance,
			RelationshipModelName: models.TableNames.Fragrance,
			IDAvailable:           true,
		},
		"recipe": {
			Name:                  models.RecipeFragranceRels.Recipe,
			RelationshipModelName: models.TableNames.Recipe,
			IDAvailable:           true,
		},
	},
	models.TableNames.RecipeLipid: {
		"lipid": {
			Name:                  models.RecipeLipidRels.Lipid,
			RelationshipModelName: models.TableNames.Lipid,
			IDAvailable:           true,
		},
		"recipe": {
			Name:                  models.RecipeLipidRels.Recipe,
			RelationshipModelName: models.TableNames.Recipe,
			IDAvailable:           true,
		},
	},
	models.TableNames.Supplier: {
		"additiveInventories": {
			Name:                  models.SupplierRels.AdditiveInventories,
			RelationshipModelName: models.TableNames.AdditiveInventory,
			IDAvailable:           false,
		},
		"fragranceInventories": {
			Name:                  models.SupplierRels.FragranceInventories,
			RelationshipModelName: models.TableNames.FragranceInventory,
			IDAvailable:           false,
		},
		"lipidInventories": {
			Name:                  models.SupplierRels.LipidInventories,
			RelationshipModelName: models.TableNames.LipidInventory,
			IDAvailable:           false,
		},
		"lyeInventories": {
			Name:                  models.SupplierRels.LyeInventories,
			RelationshipModelName: models.TableNames.LyeInventory,
			IDAvailable:           false,
		},
	},
}

func GetAdditivePreloadMods(ctx context.Context) (queryMods []qm.QueryMod) {
	return boilergql.GetPreloadModsWithLevel(ctx, TablePreloadMap, models.TableNames.Additive, "")
}

func GetAdditivePreloadModsWithLevel(ctx context.Context, level string) (queryMods []qm.QueryMod) {
	return boilergql.GetPreloadModsWithLevel(ctx, TablePreloadMap, models.TableNames.Additive, level)
}

func GetAdditiveInventoryPreloadMods(ctx context.Context) (queryMods []qm.QueryMod) {
	return boilergql.GetPreloadModsWithLevel(ctx, TablePreloadMap, models.TableNames.AdditiveInventory, "")
}

func GetAdditiveInventoryPreloadModsWithLevel(ctx context.Context, level string) (queryMods []qm.QueryMod) {
	return boilergql.GetPreloadModsWithLevel(ctx, TablePreloadMap, models.TableNames.AdditiveInventory, level)
}

func GetFragrancePreloadMods(ctx context.Context) (queryMods []qm.QueryMod) {
	return boilergql.GetPreloadModsWithLevel(ctx, TablePreloadMap, models.TableNames.Fragrance, "")
}

func GetFragrancePreloadModsWithLevel(ctx context.Context, level string) (queryMods []qm.QueryMod) {
	return boilergql.GetPreloadModsWithLevel(ctx, TablePreloadMap, models.TableNames.Fragrance, level)
}

func GetFragranceInventoryPreloadMods(ctx context.Context) (queryMods []qm.QueryMod) {
	return boilergql.GetPreloadModsWithLevel(ctx, TablePreloadMap, models.TableNames.FragranceInventory, "")
}

func GetFragranceInventoryPreloadModsWithLevel(ctx context.Context, level string) (queryMods []qm.QueryMod) {
	return boilergql.GetPreloadModsWithLevel(ctx, TablePreloadMap, models.TableNames.FragranceInventory, level)
}

func GetLipidPreloadMods(ctx context.Context) (queryMods []qm.QueryMod) {
	return boilergql.GetPreloadModsWithLevel(ctx, TablePreloadMap, models.TableNames.Lipid, "")
}

func GetLipidPreloadModsWithLevel(ctx context.Context, level string) (queryMods []qm.QueryMod) {
	return boilergql.GetPreloadModsWithLevel(ctx, TablePreloadMap, models.TableNames.Lipid, level)
}

func GetLipidInventoryPreloadMods(ctx context.Context) (queryMods []qm.QueryMod) {
	return boilergql.GetPreloadModsWithLevel(ctx, TablePreloadMap, models.TableNames.LipidInventory, "")
}

func GetLipidInventoryPreloadModsWithLevel(ctx context.Context, level string) (queryMods []qm.QueryMod) {
	return boilergql.GetPreloadModsWithLevel(ctx, TablePreloadMap, models.TableNames.LipidInventory, level)
}

func GetLyePreloadMods(ctx context.Context) (queryMods []qm.QueryMod) {
	return boilergql.GetPreloadModsWithLevel(ctx, TablePreloadMap, models.TableNames.Lye, "")
}

func GetLyePreloadModsWithLevel(ctx context.Context, level string) (queryMods []qm.QueryMod) {
	return boilergql.GetPreloadModsWithLevel(ctx, TablePreloadMap, models.TableNames.Lye, level)
}

func GetLyeInventoryPreloadMods(ctx context.Context) (queryMods []qm.QueryMod) {
	return boilergql.GetPreloadModsWithLevel(ctx, TablePreloadMap, models.TableNames.LyeInventory, "")
}

func GetLyeInventoryPreloadModsWithLevel(ctx context.Context, level string) (queryMods []qm.QueryMod) {
	return boilergql.GetPreloadModsWithLevel(ctx, TablePreloadMap, models.TableNames.LyeInventory, level)
}

func GetRecipePreloadMods(ctx context.Context) (queryMods []qm.QueryMod) {
	return boilergql.GetPreloadModsWithLevel(ctx, TablePreloadMap, models.TableNames.Recipe, "")
}

func GetRecipePreloadModsWithLevel(ctx context.Context, level string) (queryMods []qm.QueryMod) {
	return boilergql.GetPreloadModsWithLevel(ctx, TablePreloadMap, models.TableNames.Recipe, level)
}

func GetRecipeAdditivePreloadMods(ctx context.Context) (queryMods []qm.QueryMod) {
	return boilergql.GetPreloadModsWithLevel(ctx, TablePreloadMap, models.TableNames.RecipeAdditive, "")
}

func GetRecipeAdditivePreloadModsWithLevel(ctx context.Context, level string) (queryMods []qm.QueryMod) {
	return boilergql.GetPreloadModsWithLevel(ctx, TablePreloadMap, models.TableNames.RecipeAdditive, level)
}

func GetRecipeBatchPreloadMods(ctx context.Context) (queryMods []qm.QueryMod) {
	return boilergql.GetPreloadModsWithLevel(ctx, TablePreloadMap, models.TableNames.RecipeBatch, "")
}

func GetRecipeBatchPreloadModsWithLevel(ctx context.Context, level string) (queryMods []qm.QueryMod) {
	return boilergql.GetPreloadModsWithLevel(ctx, TablePreloadMap, models.TableNames.RecipeBatch, level)
}

func GetRecipeBatchAdditivePreloadMods(ctx context.Context) (queryMods []qm.QueryMod) {
	return boilergql.GetPreloadModsWithLevel(ctx, TablePreloadMap, models.TableNames.RecipeBatchAdditive, "")
}

func GetRecipeBatchAdditivePreloadModsWithLevel(ctx context.Context, level string) (queryMods []qm.QueryMod) {
	return boilergql.GetPreloadModsWithLevel(ctx, TablePreloadMap, models.TableNames.RecipeBatchAdditive, level)
}

func GetRecipeBatchFragrancePreloadMods(ctx context.Context) (queryMods []qm.QueryMod) {
	return boilergql.GetPreloadModsWithLevel(ctx, TablePreloadMap, models.TableNames.RecipeBatchFragrance, "")
}

func GetRecipeBatchFragrancePreloadModsWithLevel(ctx context.Context, level string) (queryMods []qm.QueryMod) {
	return boilergql.GetPreloadModsWithLevel(ctx, TablePreloadMap, models.TableNames.RecipeBatchFragrance, level)
}

func GetRecipeBatchLipidPreloadMods(ctx context.Context) (queryMods []qm.QueryMod) {
	return boilergql.GetPreloadModsWithLevel(ctx, TablePreloadMap, models.TableNames.RecipeBatchLipid, "")
}

func GetRecipeBatchLipidPreloadModsWithLevel(ctx context.Context, level string) (queryMods []qm.QueryMod) {
	return boilergql.GetPreloadModsWithLevel(ctx, TablePreloadMap, models.TableNames.RecipeBatchLipid, level)
}

func GetRecipeBatchLyePreloadMods(ctx context.Context) (queryMods []qm.QueryMod) {
	return boilergql.GetPreloadModsWithLevel(ctx, TablePreloadMap, models.TableNames.RecipeBatchLye, "")
}

func GetRecipeBatchLyePreloadModsWithLevel(ctx context.Context, level string) (queryMods []qm.QueryMod) {
	return boilergql.GetPreloadModsWithLevel(ctx, TablePreloadMap, models.TableNames.RecipeBatchLye, level)
}

func GetRecipeFragrancePreloadMods(ctx context.Context) (queryMods []qm.QueryMod) {
	return boilergql.GetPreloadModsWithLevel(ctx, TablePreloadMap, models.TableNames.RecipeFragrance, "")
}

func GetRecipeFragrancePreloadModsWithLevel(ctx context.Context, level string) (queryMods []qm.QueryMod) {
	return boilergql.GetPreloadModsWithLevel(ctx, TablePreloadMap, models.TableNames.RecipeFragrance, level)
}

func GetRecipeLipidPreloadMods(ctx context.Context) (queryMods []qm.QueryMod) {
	return boilergql.GetPreloadModsWithLevel(ctx, TablePreloadMap, models.TableNames.RecipeLipid, "")
}

func GetRecipeLipidPreloadModsWithLevel(ctx context.Context, level string) (queryMods []qm.QueryMod) {
	return boilergql.GetPreloadModsWithLevel(ctx, TablePreloadMap, models.TableNames.RecipeLipid, level)
}

func GetSupplierPreloadMods(ctx context.Context) (queryMods []qm.QueryMod) {
	return boilergql.GetPreloadModsWithLevel(ctx, TablePreloadMap, models.TableNames.Supplier, "")
}

func GetSupplierPreloadModsWithLevel(ctx context.Context, level string) (queryMods []qm.QueryMod) {
	return boilergql.GetPreloadModsWithLevel(ctx, TablePreloadMap, models.TableNames.Supplier, level)
}

var AdditiveInventoryPayloadPreloadLevels = struct {
	AdditiveInventory string
}{
	AdditiveInventory: "additiveInventory",
}

var AdditivePayloadPreloadLevels = struct {
	Additive string
}{
	Additive: "additive",
}

var FragranceInventoryPayloadPreloadLevels = struct {
	FragranceInventory string
}{
	FragranceInventory: "fragranceInventory",
}

var FragrancePayloadPreloadLevels = struct {
	Fragrance string
}{
	Fragrance: "fragrance",
}

var LipidInventoryPayloadPreloadLevels = struct {
	LipidInventory string
}{
	LipidInventory: "lipidInventory",
}

var LipidPayloadPreloadLevels = struct {
	Lipid string
}{
	Lipid: "lipid",
}

var LyeInventoryPayloadPreloadLevels = struct {
	LyeInventory string
}{
	LyeInventory: "lyeInventory",
}

var LyePayloadPreloadLevels = struct {
	Lye string
}{
	Lye: "lye",
}

var RecipeAdditivePayloadPreloadLevels = struct {
	RecipeAdditive string
}{
	RecipeAdditive: "recipeAdditive",
}

var RecipeBatchAdditivePayloadPreloadLevels = struct {
	RecipeBatchAdditive string
}{
	RecipeBatchAdditive: "recipeBatchAdditive",
}

var RecipeBatchFragrancePayloadPreloadLevels = struct {
	RecipeBatchFragrance string
}{
	RecipeBatchFragrance: "recipeBatchFragrance",
}

var RecipeBatchLipidPayloadPreloadLevels = struct {
	RecipeBatchLipid string
}{
	RecipeBatchLipid: "recipeBatchLipid",
}

var RecipeBatchLyePayloadPreloadLevels = struct {
	RecipeBatchLye string
}{
	RecipeBatchLye: "recipeBatchLye",
}

var RecipeBatchPayloadPreloadLevels = struct {
	RecipeBatch string
}{
	RecipeBatch: "recipeBatch",
}

var RecipeFragrancePayloadPreloadLevels = struct {
	RecipeFragrance string
}{
	RecipeFragrance: "recipeFragrance",
}

var RecipeLipidPayloadPreloadLevels = struct {
	RecipeLipid string
}{
	RecipeLipid: "recipeLipid",
}

var RecipePayloadPreloadLevels = struct {
	Recipe string
}{
	Recipe: "recipe",
}

var SupplierPayloadPreloadLevels = struct {
	Supplier string
}{
	Supplier: "supplier",
}
