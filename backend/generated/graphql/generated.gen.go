// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gmodels "github.com/sjhitchner/soapcalc/backend/generated/graphql/models"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Additive struct {
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Inventory func(childComplexity int) int
		Name      func(childComplexity int) int
		Note      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	AdditiveDeletePayload struct {
		ID func(childComplexity int) int
	}

	AdditiveInventory struct {
		Additive     func(childComplexity int) int
		Cost         func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		DeletedAt    func(childComplexity int) int
		ExpiryDate   func(childComplexity int) int
		ID           func(childComplexity int) int
		PurchaseDate func(childComplexity int) int
		Supplier     func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		Weight       func(childComplexity int) int
	}

	AdditiveInventoryDeletePayload struct {
		ID func(childComplexity int) int
	}

	AdditiveInventoryPayload struct {
		AdditiveInventory func(childComplexity int) int
	}

	AdditivePayload struct {
		Additive func(childComplexity int) int
	}

	Fragrance struct {
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Inventory func(childComplexity int) int
		Name      func(childComplexity int) int
		Note      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	FragranceDeletePayload struct {
		ID func(childComplexity int) int
	}

	FragranceInventory struct {
		Cost         func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		DeletedAt    func(childComplexity int) int
		ExpiryDate   func(childComplexity int) int
		Fragrance    func(childComplexity int) int
		ID           func(childComplexity int) int
		PurchaseDate func(childComplexity int) int
		Supplier     func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		Weight       func(childComplexity int) int
	}

	FragranceInventoryDeletePayload struct {
		ID func(childComplexity int) int
	}

	FragranceInventoryPayload struct {
		FragranceInventory func(childComplexity int) int
	}

	FragrancePayload struct {
		Fragrance func(childComplexity int) int
	}

	Lipid struct {
		Bubbly       func(childComplexity int) int
		Cleansing    func(childComplexity int) int
		Conditioning func(childComplexity int) int
		Creamy       func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		DeletedAt    func(childComplexity int) int
		Family       func(childComplexity int) int
		Hardness     func(childComplexity int) int
		ID           func(childComplexity int) int
		InciName     func(childComplexity int) int
		Ins          func(childComplexity int) int
		Inventory    func(childComplexity int) int
		Iodine       func(childComplexity int) int
		Lauric       func(childComplexity int) int
		Linoleic     func(childComplexity int) int
		Linolenic    func(childComplexity int) int
		Myristic     func(childComplexity int) int
		Name         func(childComplexity int) int
		Naoh         func(childComplexity int) int
		Oleic        func(childComplexity int) int
		Palmitic     func(childComplexity int) int
		Ricinoleic   func(childComplexity int) int
		Stearic      func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
	}

	LipidDeletePayload struct {
		ID func(childComplexity int) int
	}

	LipidInventory struct {
		Cost          func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		DeletedAt     func(childComplexity int) int
		ExpiryDate    func(childComplexity int) int
		GramsPerLiter func(childComplexity int) int
		ID            func(childComplexity int) int
		Koh           func(childComplexity int) int
		Lipid         func(childComplexity int) int
		Naoh          func(childComplexity int) int
		PurchaseDate  func(childComplexity int) int
		Sap           func(childComplexity int) int
		Supplier      func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		Weight        func(childComplexity int) int
	}

	LipidInventoryDeletePayload struct {
		ID func(childComplexity int) int
	}

	LipidInventoryPayload struct {
		LipidInventory func(childComplexity int) int
	}

	LipidPayload struct {
		Lipid func(childComplexity int) int
	}

	Lye struct {
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Inventory func(childComplexity int) int
		Kind      func(childComplexity int) int
		Name      func(childComplexity int) int
		Note      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	LyeDeletePayload struct {
		ID func(childComplexity int) int
	}

	LyeInventory struct {
		Concentration func(childComplexity int) int
		Cost          func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		DeletedAt     func(childComplexity int) int
		ExpiryDate    func(childComplexity int) int
		ID            func(childComplexity int) int
		Lye           func(childComplexity int) int
		PurchaseDate  func(childComplexity int) int
		Supplier      func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
		Weight        func(childComplexity int) int
	}

	LyeInventoryDeletePayload struct {
		ID func(childComplexity int) int
	}

	LyeInventoryPayload struct {
		LyeInventory func(childComplexity int) int
	}

	LyePayload struct {
		Lye func(childComplexity int) int
	}

	Mutation struct {
		CreateAdditive             func(childComplexity int, input gmodels.AdditiveCreateInput) int
		CreateAdditiveInventory    func(childComplexity int, input gmodels.AdditiveInventoryCreateInput) int
		CreateFragrance            func(childComplexity int, input gmodels.FragranceCreateInput) int
		CreateFragranceInventory   func(childComplexity int, input gmodels.FragranceInventoryCreateInput) int
		CreateLipid                func(childComplexity int, input gmodels.LipidCreateInput) int
		CreateLipidInventory       func(childComplexity int, input gmodels.LipidInventoryCreateInput) int
		CreateLye                  func(childComplexity int, input gmodels.LyeCreateInput) int
		CreateLyeInventory         func(childComplexity int, input gmodels.LyeInventoryCreateInput) int
		CreateRecipe               func(childComplexity int, input gmodels.RecipeCreateInput) int
		CreateRecipeAdditive       func(childComplexity int, input gmodels.RecipeAdditiveCreateInput) int
		CreateRecipeBatch          func(childComplexity int, input gmodels.RecipeBatchCreateInput) int
		CreateRecipeBatchAdditive  func(childComplexity int, input gmodels.RecipeBatchAdditiveCreateInput) int
		CreateRecipeBatchFragrance func(childComplexity int, input gmodels.RecipeBatchFragranceCreateInput) int
		CreateRecipeBatchLipid     func(childComplexity int, input gmodels.RecipeBatchLipidCreateInput) int
		CreateRecipeBatchLye       func(childComplexity int, input gmodels.RecipeBatchLyeCreateInput) int
		CreateRecipeBatchNote      func(childComplexity int, input gmodels.RecipeBatchNoteCreateInput) int
		CreateRecipeFragrance      func(childComplexity int, input gmodels.RecipeFragranceCreateInput) int
		CreateRecipeLipid          func(childComplexity int, input gmodels.RecipeLipidCreateInput) int
		CreateRecipeStep           func(childComplexity int, input gmodels.RecipeStepCreateInput) int
		CreateSupplier             func(childComplexity int, input gmodels.SupplierCreateInput) int
		DeleteAdditive             func(childComplexity int, id string) int
		DeleteAdditiveInventory    func(childComplexity int, id string) int
		DeleteFragrance            func(childComplexity int, id string) int
		DeleteFragranceInventory   func(childComplexity int, id string) int
		DeleteLipid                func(childComplexity int, id string) int
		DeleteLipidInventory       func(childComplexity int, id string) int
		DeleteLye                  func(childComplexity int, id string) int
		DeleteLyeInventory         func(childComplexity int, id string) int
		DeleteRecipe               func(childComplexity int, id string) int
		DeleteRecipeAdditive       func(childComplexity int, id string) int
		DeleteRecipeBatch          func(childComplexity int, id string) int
		DeleteRecipeBatchAdditive  func(childComplexity int, id string) int
		DeleteRecipeBatchFragrance func(childComplexity int, id string) int
		DeleteRecipeBatchLipid     func(childComplexity int, id string) int
		DeleteRecipeBatchLye       func(childComplexity int, id string) int
		DeleteRecipeBatchNote      func(childComplexity int, id string) int
		DeleteRecipeFragrance      func(childComplexity int, id string) int
		DeleteRecipeLipid          func(childComplexity int, id string) int
		DeleteRecipeStep           func(childComplexity int, id string) int
		DeleteSupplier             func(childComplexity int, id string) int
		UpdateAdditive             func(childComplexity int, id string, input gmodels.AdditiveUpdateInput) int
		UpdateAdditiveInventory    func(childComplexity int, id string, input gmodels.AdditiveInventoryUpdateInput) int
		UpdateFragrance            func(childComplexity int, id string, input gmodels.FragranceUpdateInput) int
		UpdateFragranceInventory   func(childComplexity int, id string, input gmodels.FragranceInventoryUpdateInput) int
		UpdateLipid                func(childComplexity int, id string, input gmodels.LipidUpdateInput) int
		UpdateLipidInventory       func(childComplexity int, id string, input gmodels.LipidInventoryUpdateInput) int
		UpdateLye                  func(childComplexity int, id string, input gmodels.LyeUpdateInput) int
		UpdateLyeInventory         func(childComplexity int, id string, input gmodels.LyeInventoryUpdateInput) int
		UpdateRecipe               func(childComplexity int, id string, input gmodels.RecipeUpdateInput) int
		UpdateRecipeAdditive       func(childComplexity int, id string, input gmodels.RecipeAdditiveUpdateInput) int
		UpdateRecipeBatch          func(childComplexity int, id string, input gmodels.RecipeBatchUpdateInput) int
		UpdateRecipeBatchAdditive  func(childComplexity int, id string, input gmodels.RecipeBatchAdditiveUpdateInput) int
		UpdateRecipeBatchFragrance func(childComplexity int, id string, input gmodels.RecipeBatchFragranceUpdateInput) int
		UpdateRecipeBatchLipid     func(childComplexity int, id string, input gmodels.RecipeBatchLipidUpdateInput) int
		UpdateRecipeBatchLye       func(childComplexity int, id string, input gmodels.RecipeBatchLyeUpdateInput) int
		UpdateRecipeBatchNote      func(childComplexity int, id string, input gmodels.RecipeBatchNoteUpdateInput) int
		UpdateRecipeFragrance      func(childComplexity int, id string, input gmodels.RecipeFragranceUpdateInput) int
		UpdateRecipeLipid          func(childComplexity int, id string, input gmodels.RecipeLipidUpdateInput) int
		UpdateRecipeStep           func(childComplexity int, id string, input gmodels.RecipeStepUpdateInput) int
		UpdateSupplier             func(childComplexity int, id string, input gmodels.SupplierUpdateInput) int
	}

	Query struct {
		Additive              func(childComplexity int, id string) int
		Additives             func(childComplexity int, filter *gmodels.AdditiveFilter) int
		Fragrance             func(childComplexity int, id string) int
		Fragrances            func(childComplexity int, filter *gmodels.FragranceFilter) int
		Lipid                 func(childComplexity int, id string) int
		Lipids                func(childComplexity int, filter *gmodels.LipidFilter) int
		Lye                   func(childComplexity int, id string) int
		Lyes                  func(childComplexity int, filter *gmodels.LyeFilter) int
		Recipe                func(childComplexity int, id string) int
		RecipeAdditive        func(childComplexity int, id string) int
		RecipeAdditives       func(childComplexity int, filter *gmodels.RecipeAdditiveFilter) int
		RecipeBatch           func(childComplexity int, id string) int
		RecipeBatchAdditive   func(childComplexity int, id string) int
		RecipeBatchAdditives  func(childComplexity int, filter *gmodels.RecipeBatchAdditiveFilter) int
		RecipeBatchFragrance  func(childComplexity int, id string) int
		RecipeBatchFragrances func(childComplexity int, filter *gmodels.RecipeBatchFragranceFilter) int
		RecipeBatchLipid      func(childComplexity int, id string) int
		RecipeBatchLipids     func(childComplexity int, filter *gmodels.RecipeBatchLipidFilter) int
		RecipeBatchLye        func(childComplexity int, id string) int
		RecipeBatchLyes       func(childComplexity int, filter *gmodels.RecipeBatchLyeFilter) int
		RecipeBatchNote       func(childComplexity int, id string) int
		RecipeBatchNotes      func(childComplexity int, filter *gmodels.RecipeBatchNoteFilter) int
		RecipeBatches         func(childComplexity int, filter *gmodels.RecipeBatchFilter) int
		RecipeFragrance       func(childComplexity int, id string) int
		RecipeFragrances      func(childComplexity int, filter *gmodels.RecipeFragranceFilter) int
		RecipeLipid           func(childComplexity int, id string) int
		RecipeLipids          func(childComplexity int, filter *gmodels.RecipeLipidFilter) int
		RecipeStep            func(childComplexity int, id string) int
		RecipeSteps           func(childComplexity int, filter *gmodels.RecipeStepFilter) int
		Recipes               func(childComplexity int, filter *gmodels.RecipeFilter) int
		Supplier              func(childComplexity int, id string) int
		Suppliers             func(childComplexity int, filter *gmodels.SupplierFilter) int
	}

	Recipe struct {
		Additives  func(childComplexity int) int
		Batches    func(childComplexity int) int
		CreatedAt  func(childComplexity int) int
		DeletedAt  func(childComplexity int) int
		Fragrances func(childComplexity int) int
		ID         func(childComplexity int) int
		Lipids     func(childComplexity int) int
		Name       func(childComplexity int) int
		Note       func(childComplexity int) int
		Steps      func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
	}

	RecipeAdditive struct {
		Additive   func(childComplexity int) int
		CreatedAt  func(childComplexity int) int
		DeletedAt  func(childComplexity int) int
		ID         func(childComplexity int) int
		Percentage func(childComplexity int) int
		Recipe     func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
	}

	RecipeAdditiveDeletePayload struct {
		ID func(childComplexity int) int
	}

	RecipeAdditivePayload struct {
		RecipeAdditive func(childComplexity int) int
	}

	RecipeBatch struct {
		Additives        func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		CuredWeight      func(childComplexity int) int
		DeletedAt        func(childComplexity int) int
		Fragrances       func(childComplexity int) int
		ID               func(childComplexity int) int
		LipidWeight      func(childComplexity int) int
		Lipids           func(childComplexity int) int
		Lye              func(childComplexity int) int
		Note             func(childComplexity int) int
		Notes            func(childComplexity int) int
		ProductionDate   func(childComplexity int) int
		ProductionWeight func(childComplexity int) int
		Recipe           func(childComplexity int) int
		SellableDate     func(childComplexity int) int
		Tag              func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
	}

	RecipeBatchAdditive struct {
		Additive  func(childComplexity int) int
		Batch     func(childComplexity int) int
		Cost      func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		Weight    func(childComplexity int) int
	}

	RecipeBatchAdditiveDeletePayload struct {
		ID func(childComplexity int) int
	}

	RecipeBatchAdditivePayload struct {
		RecipeBatchAdditive func(childComplexity int) int
	}

	RecipeBatchDeletePayload struct {
		ID func(childComplexity int) int
	}

	RecipeBatchFragrance struct {
		Batch     func(childComplexity int) int
		Cost      func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		Fragrance func(childComplexity int) int
		ID        func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		Weight    func(childComplexity int) int
	}

	RecipeBatchFragranceDeletePayload struct {
		ID func(childComplexity int) int
	}

	RecipeBatchFragrancePayload struct {
		RecipeBatchFragrance func(childComplexity int) int
	}

	RecipeBatchLipid struct {
		Batch     func(childComplexity int) int
		Cost      func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Lipid     func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		Weight    func(childComplexity int) int
	}

	RecipeBatchLipidDeletePayload struct {
		ID func(childComplexity int) int
	}

	RecipeBatchLipidPayload struct {
		RecipeBatchLipid func(childComplexity int) int
	}

	RecipeBatchLye struct {
		Batch     func(childComplexity int) int
		Cost      func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		Discount  func(childComplexity int) int
		ID        func(childComplexity int) int
		Lye       func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		Weight    func(childComplexity int) int
	}

	RecipeBatchLyeDeletePayload struct {
		ID func(childComplexity int) int
	}

	RecipeBatchLyePayload struct {
		RecipeBatchLye func(childComplexity int) int
	}

	RecipeBatchNote struct {
		Batch     func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Link      func(childComplexity int) int
		Note      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	RecipeBatchNoteDeletePayload struct {
		ID func(childComplexity int) int
	}

	RecipeBatchNotePayload struct {
		RecipeBatchNote func(childComplexity int) int
	}

	RecipeBatchPayload struct {
		RecipeBatch func(childComplexity int) int
	}

	RecipeDeletePayload struct {
		ID func(childComplexity int) int
	}

	RecipeFragrance struct {
		CreatedAt  func(childComplexity int) int
		DeletedAt  func(childComplexity int) int
		Fragrance  func(childComplexity int) int
		ID         func(childComplexity int) int
		Percentage func(childComplexity int) int
		Recipe     func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
	}

	RecipeFragranceDeletePayload struct {
		ID func(childComplexity int) int
	}

	RecipeFragrancePayload struct {
		RecipeFragrance func(childComplexity int) int
	}

	RecipeLipid struct {
		CreatedAt  func(childComplexity int) int
		DeletedAt  func(childComplexity int) int
		ID         func(childComplexity int) int
		Lipid      func(childComplexity int) int
		Percentage func(childComplexity int) int
		Recipe     func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
	}

	RecipeLipidDeletePayload struct {
		ID func(childComplexity int) int
	}

	RecipeLipidPayload struct {
		RecipeLipid func(childComplexity int) int
	}

	RecipePayload struct {
		Recipe func(childComplexity int) int
	}

	RecipeStep struct {
		CreatedAt func(childComplexity int) int
		DeletedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Note      func(childComplexity int) int
		Num       func(childComplexity int) int
		Recipe    func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	RecipeStepDeletePayload struct {
		ID func(childComplexity int) int
	}

	RecipeStepPayload struct {
		RecipeStep func(childComplexity int) int
	}

	Supplier struct {
		AdditiveInventory  func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		DeletedAt          func(childComplexity int) int
		FragranceInventory func(childComplexity int) int
		ID                 func(childComplexity int) int
		LipidInventory     func(childComplexity int) int
		LyeInventory       func(childComplexity int) int
		Name               func(childComplexity int) int
		Note               func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
		Website            func(childComplexity int) int
	}

	SupplierDeletePayload struct {
		ID func(childComplexity int) int
	}

	SupplierPayload struct {
		Supplier func(childComplexity int) int
	}
}

type MutationResolver interface {
	CreateAdditive(ctx context.Context, input gmodels.AdditiveCreateInput) (*gmodels.AdditivePayload, error)
	UpdateAdditive(ctx context.Context, id string, input gmodels.AdditiveUpdateInput) (*gmodels.AdditivePayload, error)
	DeleteAdditive(ctx context.Context, id string) (*gmodels.AdditiveDeletePayload, error)
	CreateAdditiveInventory(ctx context.Context, input gmodels.AdditiveInventoryCreateInput) (*gmodels.AdditiveInventoryPayload, error)
	UpdateAdditiveInventory(ctx context.Context, id string, input gmodels.AdditiveInventoryUpdateInput) (*gmodels.AdditiveInventoryPayload, error)
	DeleteAdditiveInventory(ctx context.Context, id string) (*gmodels.AdditiveInventoryDeletePayload, error)
	CreateFragrance(ctx context.Context, input gmodels.FragranceCreateInput) (*gmodels.FragrancePayload, error)
	UpdateFragrance(ctx context.Context, id string, input gmodels.FragranceUpdateInput) (*gmodels.FragrancePayload, error)
	DeleteFragrance(ctx context.Context, id string) (*gmodels.FragranceDeletePayload, error)
	CreateFragranceInventory(ctx context.Context, input gmodels.FragranceInventoryCreateInput) (*gmodels.FragranceInventoryPayload, error)
	UpdateFragranceInventory(ctx context.Context, id string, input gmodels.FragranceInventoryUpdateInput) (*gmodels.FragranceInventoryPayload, error)
	DeleteFragranceInventory(ctx context.Context, id string) (*gmodels.FragranceInventoryDeletePayload, error)
	CreateLipid(ctx context.Context, input gmodels.LipidCreateInput) (*gmodels.LipidPayload, error)
	UpdateLipid(ctx context.Context, id string, input gmodels.LipidUpdateInput) (*gmodels.LipidPayload, error)
	DeleteLipid(ctx context.Context, id string) (*gmodels.LipidDeletePayload, error)
	CreateLipidInventory(ctx context.Context, input gmodels.LipidInventoryCreateInput) (*gmodels.LipidInventoryPayload, error)
	UpdateLipidInventory(ctx context.Context, id string, input gmodels.LipidInventoryUpdateInput) (*gmodels.LipidInventoryPayload, error)
	DeleteLipidInventory(ctx context.Context, id string) (*gmodels.LipidInventoryDeletePayload, error)
	CreateLye(ctx context.Context, input gmodels.LyeCreateInput) (*gmodels.LyePayload, error)
	UpdateLye(ctx context.Context, id string, input gmodels.LyeUpdateInput) (*gmodels.LyePayload, error)
	DeleteLye(ctx context.Context, id string) (*gmodels.LyeDeletePayload, error)
	CreateLyeInventory(ctx context.Context, input gmodels.LyeInventoryCreateInput) (*gmodels.LyeInventoryPayload, error)
	UpdateLyeInventory(ctx context.Context, id string, input gmodels.LyeInventoryUpdateInput) (*gmodels.LyeInventoryPayload, error)
	DeleteLyeInventory(ctx context.Context, id string) (*gmodels.LyeInventoryDeletePayload, error)
	CreateRecipe(ctx context.Context, input gmodels.RecipeCreateInput) (*gmodels.RecipePayload, error)
	UpdateRecipe(ctx context.Context, id string, input gmodels.RecipeUpdateInput) (*gmodels.RecipePayload, error)
	DeleteRecipe(ctx context.Context, id string) (*gmodels.RecipeDeletePayload, error)
	CreateRecipeAdditive(ctx context.Context, input gmodels.RecipeAdditiveCreateInput) (*gmodels.RecipeAdditivePayload, error)
	UpdateRecipeAdditive(ctx context.Context, id string, input gmodels.RecipeAdditiveUpdateInput) (*gmodels.RecipeAdditivePayload, error)
	DeleteRecipeAdditive(ctx context.Context, id string) (*gmodels.RecipeAdditiveDeletePayload, error)
	CreateRecipeBatch(ctx context.Context, input gmodels.RecipeBatchCreateInput) (*gmodels.RecipeBatchPayload, error)
	UpdateRecipeBatch(ctx context.Context, id string, input gmodels.RecipeBatchUpdateInput) (*gmodels.RecipeBatchPayload, error)
	DeleteRecipeBatch(ctx context.Context, id string) (*gmodels.RecipeBatchDeletePayload, error)
	CreateRecipeBatchAdditive(ctx context.Context, input gmodels.RecipeBatchAdditiveCreateInput) (*gmodels.RecipeBatchAdditivePayload, error)
	UpdateRecipeBatchAdditive(ctx context.Context, id string, input gmodels.RecipeBatchAdditiveUpdateInput) (*gmodels.RecipeBatchAdditivePayload, error)
	DeleteRecipeBatchAdditive(ctx context.Context, id string) (*gmodels.RecipeBatchAdditiveDeletePayload, error)
	CreateRecipeBatchFragrance(ctx context.Context, input gmodels.RecipeBatchFragranceCreateInput) (*gmodels.RecipeBatchFragrancePayload, error)
	UpdateRecipeBatchFragrance(ctx context.Context, id string, input gmodels.RecipeBatchFragranceUpdateInput) (*gmodels.RecipeBatchFragrancePayload, error)
	DeleteRecipeBatchFragrance(ctx context.Context, id string) (*gmodels.RecipeBatchFragranceDeletePayload, error)
	CreateRecipeBatchLipid(ctx context.Context, input gmodels.RecipeBatchLipidCreateInput) (*gmodels.RecipeBatchLipidPayload, error)
	UpdateRecipeBatchLipid(ctx context.Context, id string, input gmodels.RecipeBatchLipidUpdateInput) (*gmodels.RecipeBatchLipidPayload, error)
	DeleteRecipeBatchLipid(ctx context.Context, id string) (*gmodels.RecipeBatchLipidDeletePayload, error)
	CreateRecipeBatchLye(ctx context.Context, input gmodels.RecipeBatchLyeCreateInput) (*gmodels.RecipeBatchLyePayload, error)
	UpdateRecipeBatchLye(ctx context.Context, id string, input gmodels.RecipeBatchLyeUpdateInput) (*gmodels.RecipeBatchLyePayload, error)
	DeleteRecipeBatchLye(ctx context.Context, id string) (*gmodels.RecipeBatchLyeDeletePayload, error)
	CreateRecipeBatchNote(ctx context.Context, input gmodels.RecipeBatchNoteCreateInput) (*gmodels.RecipeBatchNotePayload, error)
	UpdateRecipeBatchNote(ctx context.Context, id string, input gmodels.RecipeBatchNoteUpdateInput) (*gmodels.RecipeBatchNotePayload, error)
	DeleteRecipeBatchNote(ctx context.Context, id string) (*gmodels.RecipeBatchNoteDeletePayload, error)
	CreateRecipeFragrance(ctx context.Context, input gmodels.RecipeFragranceCreateInput) (*gmodels.RecipeFragrancePayload, error)
	UpdateRecipeFragrance(ctx context.Context, id string, input gmodels.RecipeFragranceUpdateInput) (*gmodels.RecipeFragrancePayload, error)
	DeleteRecipeFragrance(ctx context.Context, id string) (*gmodels.RecipeFragranceDeletePayload, error)
	CreateRecipeLipid(ctx context.Context, input gmodels.RecipeLipidCreateInput) (*gmodels.RecipeLipidPayload, error)
	UpdateRecipeLipid(ctx context.Context, id string, input gmodels.RecipeLipidUpdateInput) (*gmodels.RecipeLipidPayload, error)
	DeleteRecipeLipid(ctx context.Context, id string) (*gmodels.RecipeLipidDeletePayload, error)
	CreateRecipeStep(ctx context.Context, input gmodels.RecipeStepCreateInput) (*gmodels.RecipeStepPayload, error)
	UpdateRecipeStep(ctx context.Context, id string, input gmodels.RecipeStepUpdateInput) (*gmodels.RecipeStepPayload, error)
	DeleteRecipeStep(ctx context.Context, id string) (*gmodels.RecipeStepDeletePayload, error)
	CreateSupplier(ctx context.Context, input gmodels.SupplierCreateInput) (*gmodels.SupplierPayload, error)
	UpdateSupplier(ctx context.Context, id string, input gmodels.SupplierUpdateInput) (*gmodels.SupplierPayload, error)
	DeleteSupplier(ctx context.Context, id string) (*gmodels.SupplierDeletePayload, error)
}
type QueryResolver interface {
	Additive(ctx context.Context, id string) (*gmodels.Additive, error)
	Additives(ctx context.Context, filter *gmodels.AdditiveFilter) ([]*gmodels.Additive, error)
	Fragrance(ctx context.Context, id string) (*gmodels.Fragrance, error)
	Fragrances(ctx context.Context, filter *gmodels.FragranceFilter) ([]*gmodels.Fragrance, error)
	Lipid(ctx context.Context, id string) (*gmodels.Lipid, error)
	Lipids(ctx context.Context, filter *gmodels.LipidFilter) ([]*gmodels.Lipid, error)
	Lye(ctx context.Context, id string) (*gmodels.Lye, error)
	Lyes(ctx context.Context, filter *gmodels.LyeFilter) ([]*gmodels.Lye, error)
	Recipe(ctx context.Context, id string) (*gmodels.Recipe, error)
	Recipes(ctx context.Context, filter *gmodels.RecipeFilter) ([]*gmodels.Recipe, error)
	RecipeAdditive(ctx context.Context, id string) (*gmodels.RecipeAdditive, error)
	RecipeAdditives(ctx context.Context, filter *gmodels.RecipeAdditiveFilter) ([]*gmodels.RecipeAdditive, error)
	RecipeBatch(ctx context.Context, id string) (*gmodels.RecipeBatch, error)
	RecipeBatches(ctx context.Context, filter *gmodels.RecipeBatchFilter) ([]*gmodels.RecipeBatch, error)
	RecipeBatchAdditive(ctx context.Context, id string) (*gmodels.RecipeBatchAdditive, error)
	RecipeBatchAdditives(ctx context.Context, filter *gmodels.RecipeBatchAdditiveFilter) ([]*gmodels.RecipeBatchAdditive, error)
	RecipeBatchFragrance(ctx context.Context, id string) (*gmodels.RecipeBatchFragrance, error)
	RecipeBatchFragrances(ctx context.Context, filter *gmodels.RecipeBatchFragranceFilter) ([]*gmodels.RecipeBatchFragrance, error)
	RecipeBatchLipid(ctx context.Context, id string) (*gmodels.RecipeBatchLipid, error)
	RecipeBatchLipids(ctx context.Context, filter *gmodels.RecipeBatchLipidFilter) ([]*gmodels.RecipeBatchLipid, error)
	RecipeBatchLye(ctx context.Context, id string) (*gmodels.RecipeBatchLye, error)
	RecipeBatchLyes(ctx context.Context, filter *gmodels.RecipeBatchLyeFilter) ([]*gmodels.RecipeBatchLye, error)
	RecipeBatchNote(ctx context.Context, id string) (*gmodels.RecipeBatchNote, error)
	RecipeBatchNotes(ctx context.Context, filter *gmodels.RecipeBatchNoteFilter) ([]*gmodels.RecipeBatchNote, error)
	RecipeFragrance(ctx context.Context, id string) (*gmodels.RecipeFragrance, error)
	RecipeFragrances(ctx context.Context, filter *gmodels.RecipeFragranceFilter) ([]*gmodels.RecipeFragrance, error)
	RecipeLipid(ctx context.Context, id string) (*gmodels.RecipeLipid, error)
	RecipeLipids(ctx context.Context, filter *gmodels.RecipeLipidFilter) ([]*gmodels.RecipeLipid, error)
	RecipeStep(ctx context.Context, id string) (*gmodels.RecipeStep, error)
	RecipeSteps(ctx context.Context, filter *gmodels.RecipeStepFilter) ([]*gmodels.RecipeStep, error)
	Supplier(ctx context.Context, id string) (*gmodels.Supplier, error)
	Suppliers(ctx context.Context, filter *gmodels.SupplierFilter) ([]*gmodels.Supplier, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Additive.createdAt":
		if e.complexity.Additive.CreatedAt == nil {
			break
		}

		return e.complexity.Additive.CreatedAt(childComplexity), true

	case "Additive.deletedAt":
		if e.complexity.Additive.DeletedAt == nil {
			break
		}

		return e.complexity.Additive.DeletedAt(childComplexity), true

	case "Additive.id":
		if e.complexity.Additive.ID == nil {
			break
		}

		return e.complexity.Additive.ID(childComplexity), true

	case "Additive.inventory":
		if e.complexity.Additive.Inventory == nil {
			break
		}

		return e.complexity.Additive.Inventory(childComplexity), true

	case "Additive.name":
		if e.complexity.Additive.Name == nil {
			break
		}

		return e.complexity.Additive.Name(childComplexity), true

	case "Additive.note":
		if e.complexity.Additive.Note == nil {
			break
		}

		return e.complexity.Additive.Note(childComplexity), true

	case "Additive.updatedAt":
		if e.complexity.Additive.UpdatedAt == nil {
			break
		}

		return e.complexity.Additive.UpdatedAt(childComplexity), true

	case "AdditiveDeletePayload.id":
		if e.complexity.AdditiveDeletePayload.ID == nil {
			break
		}

		return e.complexity.AdditiveDeletePayload.ID(childComplexity), true

	case "AdditiveInventory.additive":
		if e.complexity.AdditiveInventory.Additive == nil {
			break
		}

		return e.complexity.AdditiveInventory.Additive(childComplexity), true

	case "AdditiveInventory.cost":
		if e.complexity.AdditiveInventory.Cost == nil {
			break
		}

		return e.complexity.AdditiveInventory.Cost(childComplexity), true

	case "AdditiveInventory.createdAt":
		if e.complexity.AdditiveInventory.CreatedAt == nil {
			break
		}

		return e.complexity.AdditiveInventory.CreatedAt(childComplexity), true

	case "AdditiveInventory.deletedAt":
		if e.complexity.AdditiveInventory.DeletedAt == nil {
			break
		}

		return e.complexity.AdditiveInventory.DeletedAt(childComplexity), true

	case "AdditiveInventory.expiryDate":
		if e.complexity.AdditiveInventory.ExpiryDate == nil {
			break
		}

		return e.complexity.AdditiveInventory.ExpiryDate(childComplexity), true

	case "AdditiveInventory.id":
		if e.complexity.AdditiveInventory.ID == nil {
			break
		}

		return e.complexity.AdditiveInventory.ID(childComplexity), true

	case "AdditiveInventory.purchaseDate":
		if e.complexity.AdditiveInventory.PurchaseDate == nil {
			break
		}

		return e.complexity.AdditiveInventory.PurchaseDate(childComplexity), true

	case "AdditiveInventory.supplier":
		if e.complexity.AdditiveInventory.Supplier == nil {
			break
		}

		return e.complexity.AdditiveInventory.Supplier(childComplexity), true

	case "AdditiveInventory.updatedAt":
		if e.complexity.AdditiveInventory.UpdatedAt == nil {
			break
		}

		return e.complexity.AdditiveInventory.UpdatedAt(childComplexity), true

	case "AdditiveInventory.weight":
		if e.complexity.AdditiveInventory.Weight == nil {
			break
		}

		return e.complexity.AdditiveInventory.Weight(childComplexity), true

	case "AdditiveInventoryDeletePayload.id":
		if e.complexity.AdditiveInventoryDeletePayload.ID == nil {
			break
		}

		return e.complexity.AdditiveInventoryDeletePayload.ID(childComplexity), true

	case "AdditiveInventoryPayload.additiveInventory":
		if e.complexity.AdditiveInventoryPayload.AdditiveInventory == nil {
			break
		}

		return e.complexity.AdditiveInventoryPayload.AdditiveInventory(childComplexity), true

	case "AdditivePayload.additive":
		if e.complexity.AdditivePayload.Additive == nil {
			break
		}

		return e.complexity.AdditivePayload.Additive(childComplexity), true

	case "Fragrance.createdAt":
		if e.complexity.Fragrance.CreatedAt == nil {
			break
		}

		return e.complexity.Fragrance.CreatedAt(childComplexity), true

	case "Fragrance.deletedAt":
		if e.complexity.Fragrance.DeletedAt == nil {
			break
		}

		return e.complexity.Fragrance.DeletedAt(childComplexity), true

	case "Fragrance.id":
		if e.complexity.Fragrance.ID == nil {
			break
		}

		return e.complexity.Fragrance.ID(childComplexity), true

	case "Fragrance.inventory":
		if e.complexity.Fragrance.Inventory == nil {
			break
		}

		return e.complexity.Fragrance.Inventory(childComplexity), true

	case "Fragrance.name":
		if e.complexity.Fragrance.Name == nil {
			break
		}

		return e.complexity.Fragrance.Name(childComplexity), true

	case "Fragrance.note":
		if e.complexity.Fragrance.Note == nil {
			break
		}

		return e.complexity.Fragrance.Note(childComplexity), true

	case "Fragrance.updatedAt":
		if e.complexity.Fragrance.UpdatedAt == nil {
			break
		}

		return e.complexity.Fragrance.UpdatedAt(childComplexity), true

	case "FragranceDeletePayload.id":
		if e.complexity.FragranceDeletePayload.ID == nil {
			break
		}

		return e.complexity.FragranceDeletePayload.ID(childComplexity), true

	case "FragranceInventory.cost":
		if e.complexity.FragranceInventory.Cost == nil {
			break
		}

		return e.complexity.FragranceInventory.Cost(childComplexity), true

	case "FragranceInventory.createdAt":
		if e.complexity.FragranceInventory.CreatedAt == nil {
			break
		}

		return e.complexity.FragranceInventory.CreatedAt(childComplexity), true

	case "FragranceInventory.deletedAt":
		if e.complexity.FragranceInventory.DeletedAt == nil {
			break
		}

		return e.complexity.FragranceInventory.DeletedAt(childComplexity), true

	case "FragranceInventory.expiryDate":
		if e.complexity.FragranceInventory.ExpiryDate == nil {
			break
		}

		return e.complexity.FragranceInventory.ExpiryDate(childComplexity), true

	case "FragranceInventory.fragrance":
		if e.complexity.FragranceInventory.Fragrance == nil {
			break
		}

		return e.complexity.FragranceInventory.Fragrance(childComplexity), true

	case "FragranceInventory.id":
		if e.complexity.FragranceInventory.ID == nil {
			break
		}

		return e.complexity.FragranceInventory.ID(childComplexity), true

	case "FragranceInventory.purchaseDate":
		if e.complexity.FragranceInventory.PurchaseDate == nil {
			break
		}

		return e.complexity.FragranceInventory.PurchaseDate(childComplexity), true

	case "FragranceInventory.supplier":
		if e.complexity.FragranceInventory.Supplier == nil {
			break
		}

		return e.complexity.FragranceInventory.Supplier(childComplexity), true

	case "FragranceInventory.updatedAt":
		if e.complexity.FragranceInventory.UpdatedAt == nil {
			break
		}

		return e.complexity.FragranceInventory.UpdatedAt(childComplexity), true

	case "FragranceInventory.weight":
		if e.complexity.FragranceInventory.Weight == nil {
			break
		}

		return e.complexity.FragranceInventory.Weight(childComplexity), true

	case "FragranceInventoryDeletePayload.id":
		if e.complexity.FragranceInventoryDeletePayload.ID == nil {
			break
		}

		return e.complexity.FragranceInventoryDeletePayload.ID(childComplexity), true

	case "FragranceInventoryPayload.fragranceInventory":
		if e.complexity.FragranceInventoryPayload.FragranceInventory == nil {
			break
		}

		return e.complexity.FragranceInventoryPayload.FragranceInventory(childComplexity), true

	case "FragrancePayload.fragrance":
		if e.complexity.FragrancePayload.Fragrance == nil {
			break
		}

		return e.complexity.FragrancePayload.Fragrance(childComplexity), true

	case "Lipid.bubbly":
		if e.complexity.Lipid.Bubbly == nil {
			break
		}

		return e.complexity.Lipid.Bubbly(childComplexity), true

	case "Lipid.cleansing":
		if e.complexity.Lipid.Cleansing == nil {
			break
		}

		return e.complexity.Lipid.Cleansing(childComplexity), true

	case "Lipid.conditioning":
		if e.complexity.Lipid.Conditioning == nil {
			break
		}

		return e.complexity.Lipid.Conditioning(childComplexity), true

	case "Lipid.creamy":
		if e.complexity.Lipid.Creamy == nil {
			break
		}

		return e.complexity.Lipid.Creamy(childComplexity), true

	case "Lipid.createdAt":
		if e.complexity.Lipid.CreatedAt == nil {
			break
		}

		return e.complexity.Lipid.CreatedAt(childComplexity), true

	case "Lipid.deletedAt":
		if e.complexity.Lipid.DeletedAt == nil {
			break
		}

		return e.complexity.Lipid.DeletedAt(childComplexity), true

	case "Lipid.family":
		if e.complexity.Lipid.Family == nil {
			break
		}

		return e.complexity.Lipid.Family(childComplexity), true

	case "Lipid.hardness":
		if e.complexity.Lipid.Hardness == nil {
			break
		}

		return e.complexity.Lipid.Hardness(childComplexity), true

	case "Lipid.id":
		if e.complexity.Lipid.ID == nil {
			break
		}

		return e.complexity.Lipid.ID(childComplexity), true

	case "Lipid.inciName":
		if e.complexity.Lipid.InciName == nil {
			break
		}

		return e.complexity.Lipid.InciName(childComplexity), true

	case "Lipid.ins":
		if e.complexity.Lipid.Ins == nil {
			break
		}

		return e.complexity.Lipid.Ins(childComplexity), true

	case "Lipid.inventory":
		if e.complexity.Lipid.Inventory == nil {
			break
		}

		return e.complexity.Lipid.Inventory(childComplexity), true

	case "Lipid.iodine":
		if e.complexity.Lipid.Iodine == nil {
			break
		}

		return e.complexity.Lipid.Iodine(childComplexity), true

	case "Lipid.lauric":
		if e.complexity.Lipid.Lauric == nil {
			break
		}

		return e.complexity.Lipid.Lauric(childComplexity), true

	case "Lipid.linoleic":
		if e.complexity.Lipid.Linoleic == nil {
			break
		}

		return e.complexity.Lipid.Linoleic(childComplexity), true

	case "Lipid.linolenic":
		if e.complexity.Lipid.Linolenic == nil {
			break
		}

		return e.complexity.Lipid.Linolenic(childComplexity), true

	case "Lipid.myristic":
		if e.complexity.Lipid.Myristic == nil {
			break
		}

		return e.complexity.Lipid.Myristic(childComplexity), true

	case "Lipid.name":
		if e.complexity.Lipid.Name == nil {
			break
		}

		return e.complexity.Lipid.Name(childComplexity), true

	case "Lipid.naoh":
		if e.complexity.Lipid.Naoh == nil {
			break
		}

		return e.complexity.Lipid.Naoh(childComplexity), true

	case "Lipid.oleic":
		if e.complexity.Lipid.Oleic == nil {
			break
		}

		return e.complexity.Lipid.Oleic(childComplexity), true

	case "Lipid.palmitic":
		if e.complexity.Lipid.Palmitic == nil {
			break
		}

		return e.complexity.Lipid.Palmitic(childComplexity), true

	case "Lipid.ricinoleic":
		if e.complexity.Lipid.Ricinoleic == nil {
			break
		}

		return e.complexity.Lipid.Ricinoleic(childComplexity), true

	case "Lipid.stearic":
		if e.complexity.Lipid.Stearic == nil {
			break
		}

		return e.complexity.Lipid.Stearic(childComplexity), true

	case "Lipid.updatedAt":
		if e.complexity.Lipid.UpdatedAt == nil {
			break
		}

		return e.complexity.Lipid.UpdatedAt(childComplexity), true

	case "LipidDeletePayload.id":
		if e.complexity.LipidDeletePayload.ID == nil {
			break
		}

		return e.complexity.LipidDeletePayload.ID(childComplexity), true

	case "LipidInventory.cost":
		if e.complexity.LipidInventory.Cost == nil {
			break
		}

		return e.complexity.LipidInventory.Cost(childComplexity), true

	case "LipidInventory.createdAt":
		if e.complexity.LipidInventory.CreatedAt == nil {
			break
		}

		return e.complexity.LipidInventory.CreatedAt(childComplexity), true

	case "LipidInventory.deletedAt":
		if e.complexity.LipidInventory.DeletedAt == nil {
			break
		}

		return e.complexity.LipidInventory.DeletedAt(childComplexity), true

	case "LipidInventory.expiryDate":
		if e.complexity.LipidInventory.ExpiryDate == nil {
			break
		}

		return e.complexity.LipidInventory.ExpiryDate(childComplexity), true

	case "LipidInventory.gramsPerLiter":
		if e.complexity.LipidInventory.GramsPerLiter == nil {
			break
		}

		return e.complexity.LipidInventory.GramsPerLiter(childComplexity), true

	case "LipidInventory.id":
		if e.complexity.LipidInventory.ID == nil {
			break
		}

		return e.complexity.LipidInventory.ID(childComplexity), true

	case "LipidInventory.koh":
		if e.complexity.LipidInventory.Koh == nil {
			break
		}

		return e.complexity.LipidInventory.Koh(childComplexity), true

	case "LipidInventory.lipid":
		if e.complexity.LipidInventory.Lipid == nil {
			break
		}

		return e.complexity.LipidInventory.Lipid(childComplexity), true

	case "LipidInventory.naoh":
		if e.complexity.LipidInventory.Naoh == nil {
			break
		}

		return e.complexity.LipidInventory.Naoh(childComplexity), true

	case "LipidInventory.purchaseDate":
		if e.complexity.LipidInventory.PurchaseDate == nil {
			break
		}

		return e.complexity.LipidInventory.PurchaseDate(childComplexity), true

	case "LipidInventory.sap":
		if e.complexity.LipidInventory.Sap == nil {
			break
		}

		return e.complexity.LipidInventory.Sap(childComplexity), true

	case "LipidInventory.supplier":
		if e.complexity.LipidInventory.Supplier == nil {
			break
		}

		return e.complexity.LipidInventory.Supplier(childComplexity), true

	case "LipidInventory.updatedAt":
		if e.complexity.LipidInventory.UpdatedAt == nil {
			break
		}

		return e.complexity.LipidInventory.UpdatedAt(childComplexity), true

	case "LipidInventory.weight":
		if e.complexity.LipidInventory.Weight == nil {
			break
		}

		return e.complexity.LipidInventory.Weight(childComplexity), true

	case "LipidInventoryDeletePayload.id":
		if e.complexity.LipidInventoryDeletePayload.ID == nil {
			break
		}

		return e.complexity.LipidInventoryDeletePayload.ID(childComplexity), true

	case "LipidInventoryPayload.lipidInventory":
		if e.complexity.LipidInventoryPayload.LipidInventory == nil {
			break
		}

		return e.complexity.LipidInventoryPayload.LipidInventory(childComplexity), true

	case "LipidPayload.lipid":
		if e.complexity.LipidPayload.Lipid == nil {
			break
		}

		return e.complexity.LipidPayload.Lipid(childComplexity), true

	case "Lye.createdAt":
		if e.complexity.Lye.CreatedAt == nil {
			break
		}

		return e.complexity.Lye.CreatedAt(childComplexity), true

	case "Lye.deletedAt":
		if e.complexity.Lye.DeletedAt == nil {
			break
		}

		return e.complexity.Lye.DeletedAt(childComplexity), true

	case "Lye.id":
		if e.complexity.Lye.ID == nil {
			break
		}

		return e.complexity.Lye.ID(childComplexity), true

	case "Lye.inventory":
		if e.complexity.Lye.Inventory == nil {
			break
		}

		return e.complexity.Lye.Inventory(childComplexity), true

	case "Lye.kind":
		if e.complexity.Lye.Kind == nil {
			break
		}

		return e.complexity.Lye.Kind(childComplexity), true

	case "Lye.name":
		if e.complexity.Lye.Name == nil {
			break
		}

		return e.complexity.Lye.Name(childComplexity), true

	case "Lye.note":
		if e.complexity.Lye.Note == nil {
			break
		}

		return e.complexity.Lye.Note(childComplexity), true

	case "Lye.updatedAt":
		if e.complexity.Lye.UpdatedAt == nil {
			break
		}

		return e.complexity.Lye.UpdatedAt(childComplexity), true

	case "LyeDeletePayload.id":
		if e.complexity.LyeDeletePayload.ID == nil {
			break
		}

		return e.complexity.LyeDeletePayload.ID(childComplexity), true

	case "LyeInventory.concentration":
		if e.complexity.LyeInventory.Concentration == nil {
			break
		}

		return e.complexity.LyeInventory.Concentration(childComplexity), true

	case "LyeInventory.cost":
		if e.complexity.LyeInventory.Cost == nil {
			break
		}

		return e.complexity.LyeInventory.Cost(childComplexity), true

	case "LyeInventory.createdAt":
		if e.complexity.LyeInventory.CreatedAt == nil {
			break
		}

		return e.complexity.LyeInventory.CreatedAt(childComplexity), true

	case "LyeInventory.deletedAt":
		if e.complexity.LyeInventory.DeletedAt == nil {
			break
		}

		return e.complexity.LyeInventory.DeletedAt(childComplexity), true

	case "LyeInventory.expiryDate":
		if e.complexity.LyeInventory.ExpiryDate == nil {
			break
		}

		return e.complexity.LyeInventory.ExpiryDate(childComplexity), true

	case "LyeInventory.id":
		if e.complexity.LyeInventory.ID == nil {
			break
		}

		return e.complexity.LyeInventory.ID(childComplexity), true

	case "LyeInventory.lye":
		if e.complexity.LyeInventory.Lye == nil {
			break
		}

		return e.complexity.LyeInventory.Lye(childComplexity), true

	case "LyeInventory.purchaseDate":
		if e.complexity.LyeInventory.PurchaseDate == nil {
			break
		}

		return e.complexity.LyeInventory.PurchaseDate(childComplexity), true

	case "LyeInventory.supplier":
		if e.complexity.LyeInventory.Supplier == nil {
			break
		}

		return e.complexity.LyeInventory.Supplier(childComplexity), true

	case "LyeInventory.updatedAt":
		if e.complexity.LyeInventory.UpdatedAt == nil {
			break
		}

		return e.complexity.LyeInventory.UpdatedAt(childComplexity), true

	case "LyeInventory.weight":
		if e.complexity.LyeInventory.Weight == nil {
			break
		}

		return e.complexity.LyeInventory.Weight(childComplexity), true

	case "LyeInventoryDeletePayload.id":
		if e.complexity.LyeInventoryDeletePayload.ID == nil {
			break
		}

		return e.complexity.LyeInventoryDeletePayload.ID(childComplexity), true

	case "LyeInventoryPayload.lyeInventory":
		if e.complexity.LyeInventoryPayload.LyeInventory == nil {
			break
		}

		return e.complexity.LyeInventoryPayload.LyeInventory(childComplexity), true

	case "LyePayload.lye":
		if e.complexity.LyePayload.Lye == nil {
			break
		}

		return e.complexity.LyePayload.Lye(childComplexity), true

	case "Mutation.createAdditive":
		if e.complexity.Mutation.CreateAdditive == nil {
			break
		}

		args, err := ec.field_Mutation_createAdditive_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAdditive(childComplexity, args["input"].(gmodels.AdditiveCreateInput)), true

	case "Mutation.createAdditiveInventory":
		if e.complexity.Mutation.CreateAdditiveInventory == nil {
			break
		}

		args, err := ec.field_Mutation_createAdditiveInventory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAdditiveInventory(childComplexity, args["input"].(gmodels.AdditiveInventoryCreateInput)), true

	case "Mutation.createFragrance":
		if e.complexity.Mutation.CreateFragrance == nil {
			break
		}

		args, err := ec.field_Mutation_createFragrance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateFragrance(childComplexity, args["input"].(gmodels.FragranceCreateInput)), true

	case "Mutation.createFragranceInventory":
		if e.complexity.Mutation.CreateFragranceInventory == nil {
			break
		}

		args, err := ec.field_Mutation_createFragranceInventory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateFragranceInventory(childComplexity, args["input"].(gmodels.FragranceInventoryCreateInput)), true

	case "Mutation.createLipid":
		if e.complexity.Mutation.CreateLipid == nil {
			break
		}

		args, err := ec.field_Mutation_createLipid_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateLipid(childComplexity, args["input"].(gmodels.LipidCreateInput)), true

	case "Mutation.createLipidInventory":
		if e.complexity.Mutation.CreateLipidInventory == nil {
			break
		}

		args, err := ec.field_Mutation_createLipidInventory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateLipidInventory(childComplexity, args["input"].(gmodels.LipidInventoryCreateInput)), true

	case "Mutation.createLye":
		if e.complexity.Mutation.CreateLye == nil {
			break
		}

		args, err := ec.field_Mutation_createLye_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateLye(childComplexity, args["input"].(gmodels.LyeCreateInput)), true

	case "Mutation.createLyeInventory":
		if e.complexity.Mutation.CreateLyeInventory == nil {
			break
		}

		args, err := ec.field_Mutation_createLyeInventory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateLyeInventory(childComplexity, args["input"].(gmodels.LyeInventoryCreateInput)), true

	case "Mutation.createRecipe":
		if e.complexity.Mutation.CreateRecipe == nil {
			break
		}

		args, err := ec.field_Mutation_createRecipe_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateRecipe(childComplexity, args["input"].(gmodels.RecipeCreateInput)), true

	case "Mutation.createRecipeAdditive":
		if e.complexity.Mutation.CreateRecipeAdditive == nil {
			break
		}

		args, err := ec.field_Mutation_createRecipeAdditive_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateRecipeAdditive(childComplexity, args["input"].(gmodels.RecipeAdditiveCreateInput)), true

	case "Mutation.createRecipeBatch":
		if e.complexity.Mutation.CreateRecipeBatch == nil {
			break
		}

		args, err := ec.field_Mutation_createRecipeBatch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateRecipeBatch(childComplexity, args["input"].(gmodels.RecipeBatchCreateInput)), true

	case "Mutation.createRecipeBatchAdditive":
		if e.complexity.Mutation.CreateRecipeBatchAdditive == nil {
			break
		}

		args, err := ec.field_Mutation_createRecipeBatchAdditive_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateRecipeBatchAdditive(childComplexity, args["input"].(gmodels.RecipeBatchAdditiveCreateInput)), true

	case "Mutation.createRecipeBatchFragrance":
		if e.complexity.Mutation.CreateRecipeBatchFragrance == nil {
			break
		}

		args, err := ec.field_Mutation_createRecipeBatchFragrance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateRecipeBatchFragrance(childComplexity, args["input"].(gmodels.RecipeBatchFragranceCreateInput)), true

	case "Mutation.createRecipeBatchLipid":
		if e.complexity.Mutation.CreateRecipeBatchLipid == nil {
			break
		}

		args, err := ec.field_Mutation_createRecipeBatchLipid_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateRecipeBatchLipid(childComplexity, args["input"].(gmodels.RecipeBatchLipidCreateInput)), true

	case "Mutation.createRecipeBatchLye":
		if e.complexity.Mutation.CreateRecipeBatchLye == nil {
			break
		}

		args, err := ec.field_Mutation_createRecipeBatchLye_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateRecipeBatchLye(childComplexity, args["input"].(gmodels.RecipeBatchLyeCreateInput)), true

	case "Mutation.createRecipeBatchNote":
		if e.complexity.Mutation.CreateRecipeBatchNote == nil {
			break
		}

		args, err := ec.field_Mutation_createRecipeBatchNote_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateRecipeBatchNote(childComplexity, args["input"].(gmodels.RecipeBatchNoteCreateInput)), true

	case "Mutation.createRecipeFragrance":
		if e.complexity.Mutation.CreateRecipeFragrance == nil {
			break
		}

		args, err := ec.field_Mutation_createRecipeFragrance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateRecipeFragrance(childComplexity, args["input"].(gmodels.RecipeFragranceCreateInput)), true

	case "Mutation.createRecipeLipid":
		if e.complexity.Mutation.CreateRecipeLipid == nil {
			break
		}

		args, err := ec.field_Mutation_createRecipeLipid_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateRecipeLipid(childComplexity, args["input"].(gmodels.RecipeLipidCreateInput)), true

	case "Mutation.createRecipeStep":
		if e.complexity.Mutation.CreateRecipeStep == nil {
			break
		}

		args, err := ec.field_Mutation_createRecipeStep_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateRecipeStep(childComplexity, args["input"].(gmodels.RecipeStepCreateInput)), true

	case "Mutation.createSupplier":
		if e.complexity.Mutation.CreateSupplier == nil {
			break
		}

		args, err := ec.field_Mutation_createSupplier_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSupplier(childComplexity, args["input"].(gmodels.SupplierCreateInput)), true

	case "Mutation.deleteAdditive":
		if e.complexity.Mutation.DeleteAdditive == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAdditive_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAdditive(childComplexity, args["id"].(string)), true

	case "Mutation.deleteAdditiveInventory":
		if e.complexity.Mutation.DeleteAdditiveInventory == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAdditiveInventory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAdditiveInventory(childComplexity, args["id"].(string)), true

	case "Mutation.deleteFragrance":
		if e.complexity.Mutation.DeleteFragrance == nil {
			break
		}

		args, err := ec.field_Mutation_deleteFragrance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteFragrance(childComplexity, args["id"].(string)), true

	case "Mutation.deleteFragranceInventory":
		if e.complexity.Mutation.DeleteFragranceInventory == nil {
			break
		}

		args, err := ec.field_Mutation_deleteFragranceInventory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteFragranceInventory(childComplexity, args["id"].(string)), true

	case "Mutation.deleteLipid":
		if e.complexity.Mutation.DeleteLipid == nil {
			break
		}

		args, err := ec.field_Mutation_deleteLipid_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteLipid(childComplexity, args["id"].(string)), true

	case "Mutation.deleteLipidInventory":
		if e.complexity.Mutation.DeleteLipidInventory == nil {
			break
		}

		args, err := ec.field_Mutation_deleteLipidInventory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteLipidInventory(childComplexity, args["id"].(string)), true

	case "Mutation.deleteLye":
		if e.complexity.Mutation.DeleteLye == nil {
			break
		}

		args, err := ec.field_Mutation_deleteLye_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteLye(childComplexity, args["id"].(string)), true

	case "Mutation.deleteLyeInventory":
		if e.complexity.Mutation.DeleteLyeInventory == nil {
			break
		}

		args, err := ec.field_Mutation_deleteLyeInventory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteLyeInventory(childComplexity, args["id"].(string)), true

	case "Mutation.deleteRecipe":
		if e.complexity.Mutation.DeleteRecipe == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRecipe_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRecipe(childComplexity, args["id"].(string)), true

	case "Mutation.deleteRecipeAdditive":
		if e.complexity.Mutation.DeleteRecipeAdditive == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRecipeAdditive_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRecipeAdditive(childComplexity, args["id"].(string)), true

	case "Mutation.deleteRecipeBatch":
		if e.complexity.Mutation.DeleteRecipeBatch == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRecipeBatch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRecipeBatch(childComplexity, args["id"].(string)), true

	case "Mutation.deleteRecipeBatchAdditive":
		if e.complexity.Mutation.DeleteRecipeBatchAdditive == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRecipeBatchAdditive_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRecipeBatchAdditive(childComplexity, args["id"].(string)), true

	case "Mutation.deleteRecipeBatchFragrance":
		if e.complexity.Mutation.DeleteRecipeBatchFragrance == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRecipeBatchFragrance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRecipeBatchFragrance(childComplexity, args["id"].(string)), true

	case "Mutation.deleteRecipeBatchLipid":
		if e.complexity.Mutation.DeleteRecipeBatchLipid == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRecipeBatchLipid_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRecipeBatchLipid(childComplexity, args["id"].(string)), true

	case "Mutation.deleteRecipeBatchLye":
		if e.complexity.Mutation.DeleteRecipeBatchLye == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRecipeBatchLye_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRecipeBatchLye(childComplexity, args["id"].(string)), true

	case "Mutation.deleteRecipeBatchNote":
		if e.complexity.Mutation.DeleteRecipeBatchNote == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRecipeBatchNote_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRecipeBatchNote(childComplexity, args["id"].(string)), true

	case "Mutation.deleteRecipeFragrance":
		if e.complexity.Mutation.DeleteRecipeFragrance == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRecipeFragrance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRecipeFragrance(childComplexity, args["id"].(string)), true

	case "Mutation.deleteRecipeLipid":
		if e.complexity.Mutation.DeleteRecipeLipid == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRecipeLipid_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRecipeLipid(childComplexity, args["id"].(string)), true

	case "Mutation.deleteRecipeStep":
		if e.complexity.Mutation.DeleteRecipeStep == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRecipeStep_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRecipeStep(childComplexity, args["id"].(string)), true

	case "Mutation.deleteSupplier":
		if e.complexity.Mutation.DeleteSupplier == nil {
			break
		}

		args, err := ec.field_Mutation_deleteSupplier_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSupplier(childComplexity, args["id"].(string)), true

	case "Mutation.updateAdditive":
		if e.complexity.Mutation.UpdateAdditive == nil {
			break
		}

		args, err := ec.field_Mutation_updateAdditive_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAdditive(childComplexity, args["id"].(string), args["input"].(gmodels.AdditiveUpdateInput)), true

	case "Mutation.updateAdditiveInventory":
		if e.complexity.Mutation.UpdateAdditiveInventory == nil {
			break
		}

		args, err := ec.field_Mutation_updateAdditiveInventory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAdditiveInventory(childComplexity, args["id"].(string), args["input"].(gmodels.AdditiveInventoryUpdateInput)), true

	case "Mutation.updateFragrance":
		if e.complexity.Mutation.UpdateFragrance == nil {
			break
		}

		args, err := ec.field_Mutation_updateFragrance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateFragrance(childComplexity, args["id"].(string), args["input"].(gmodels.FragranceUpdateInput)), true

	case "Mutation.updateFragranceInventory":
		if e.complexity.Mutation.UpdateFragranceInventory == nil {
			break
		}

		args, err := ec.field_Mutation_updateFragranceInventory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateFragranceInventory(childComplexity, args["id"].(string), args["input"].(gmodels.FragranceInventoryUpdateInput)), true

	case "Mutation.updateLipid":
		if e.complexity.Mutation.UpdateLipid == nil {
			break
		}

		args, err := ec.field_Mutation_updateLipid_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLipid(childComplexity, args["id"].(string), args["input"].(gmodels.LipidUpdateInput)), true

	case "Mutation.updateLipidInventory":
		if e.complexity.Mutation.UpdateLipidInventory == nil {
			break
		}

		args, err := ec.field_Mutation_updateLipidInventory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLipidInventory(childComplexity, args["id"].(string), args["input"].(gmodels.LipidInventoryUpdateInput)), true

	case "Mutation.updateLye":
		if e.complexity.Mutation.UpdateLye == nil {
			break
		}

		args, err := ec.field_Mutation_updateLye_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLye(childComplexity, args["id"].(string), args["input"].(gmodels.LyeUpdateInput)), true

	case "Mutation.updateLyeInventory":
		if e.complexity.Mutation.UpdateLyeInventory == nil {
			break
		}

		args, err := ec.field_Mutation_updateLyeInventory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateLyeInventory(childComplexity, args["id"].(string), args["input"].(gmodels.LyeInventoryUpdateInput)), true

	case "Mutation.updateRecipe":
		if e.complexity.Mutation.UpdateRecipe == nil {
			break
		}

		args, err := ec.field_Mutation_updateRecipe_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRecipe(childComplexity, args["id"].(string), args["input"].(gmodels.RecipeUpdateInput)), true

	case "Mutation.updateRecipeAdditive":
		if e.complexity.Mutation.UpdateRecipeAdditive == nil {
			break
		}

		args, err := ec.field_Mutation_updateRecipeAdditive_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRecipeAdditive(childComplexity, args["id"].(string), args["input"].(gmodels.RecipeAdditiveUpdateInput)), true

	case "Mutation.updateRecipeBatch":
		if e.complexity.Mutation.UpdateRecipeBatch == nil {
			break
		}

		args, err := ec.field_Mutation_updateRecipeBatch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRecipeBatch(childComplexity, args["id"].(string), args["input"].(gmodels.RecipeBatchUpdateInput)), true

	case "Mutation.updateRecipeBatchAdditive":
		if e.complexity.Mutation.UpdateRecipeBatchAdditive == nil {
			break
		}

		args, err := ec.field_Mutation_updateRecipeBatchAdditive_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRecipeBatchAdditive(childComplexity, args["id"].(string), args["input"].(gmodels.RecipeBatchAdditiveUpdateInput)), true

	case "Mutation.updateRecipeBatchFragrance":
		if e.complexity.Mutation.UpdateRecipeBatchFragrance == nil {
			break
		}

		args, err := ec.field_Mutation_updateRecipeBatchFragrance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRecipeBatchFragrance(childComplexity, args["id"].(string), args["input"].(gmodels.RecipeBatchFragranceUpdateInput)), true

	case "Mutation.updateRecipeBatchLipid":
		if e.complexity.Mutation.UpdateRecipeBatchLipid == nil {
			break
		}

		args, err := ec.field_Mutation_updateRecipeBatchLipid_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRecipeBatchLipid(childComplexity, args["id"].(string), args["input"].(gmodels.RecipeBatchLipidUpdateInput)), true

	case "Mutation.updateRecipeBatchLye":
		if e.complexity.Mutation.UpdateRecipeBatchLye == nil {
			break
		}

		args, err := ec.field_Mutation_updateRecipeBatchLye_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRecipeBatchLye(childComplexity, args["id"].(string), args["input"].(gmodels.RecipeBatchLyeUpdateInput)), true

	case "Mutation.updateRecipeBatchNote":
		if e.complexity.Mutation.UpdateRecipeBatchNote == nil {
			break
		}

		args, err := ec.field_Mutation_updateRecipeBatchNote_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRecipeBatchNote(childComplexity, args["id"].(string), args["input"].(gmodels.RecipeBatchNoteUpdateInput)), true

	case "Mutation.updateRecipeFragrance":
		if e.complexity.Mutation.UpdateRecipeFragrance == nil {
			break
		}

		args, err := ec.field_Mutation_updateRecipeFragrance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRecipeFragrance(childComplexity, args["id"].(string), args["input"].(gmodels.RecipeFragranceUpdateInput)), true

	case "Mutation.updateRecipeLipid":
		if e.complexity.Mutation.UpdateRecipeLipid == nil {
			break
		}

		args, err := ec.field_Mutation_updateRecipeLipid_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRecipeLipid(childComplexity, args["id"].(string), args["input"].(gmodels.RecipeLipidUpdateInput)), true

	case "Mutation.updateRecipeStep":
		if e.complexity.Mutation.UpdateRecipeStep == nil {
			break
		}

		args, err := ec.field_Mutation_updateRecipeStep_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRecipeStep(childComplexity, args["id"].(string), args["input"].(gmodels.RecipeStepUpdateInput)), true

	case "Mutation.updateSupplier":
		if e.complexity.Mutation.UpdateSupplier == nil {
			break
		}

		args, err := ec.field_Mutation_updateSupplier_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateSupplier(childComplexity, args["id"].(string), args["input"].(gmodels.SupplierUpdateInput)), true

	case "Query.additive":
		if e.complexity.Query.Additive == nil {
			break
		}

		args, err := ec.field_Query_additive_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Additive(childComplexity, args["id"].(string)), true

	case "Query.additives":
		if e.complexity.Query.Additives == nil {
			break
		}

		args, err := ec.field_Query_additives_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Additives(childComplexity, args["filter"].(*gmodels.AdditiveFilter)), true

	case "Query.fragrance":
		if e.complexity.Query.Fragrance == nil {
			break
		}

		args, err := ec.field_Query_fragrance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Fragrance(childComplexity, args["id"].(string)), true

	case "Query.fragrances":
		if e.complexity.Query.Fragrances == nil {
			break
		}

		args, err := ec.field_Query_fragrances_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Fragrances(childComplexity, args["filter"].(*gmodels.FragranceFilter)), true

	case "Query.lipid":
		if e.complexity.Query.Lipid == nil {
			break
		}

		args, err := ec.field_Query_lipid_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Lipid(childComplexity, args["id"].(string)), true

	case "Query.lipids":
		if e.complexity.Query.Lipids == nil {
			break
		}

		args, err := ec.field_Query_lipids_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Lipids(childComplexity, args["filter"].(*gmodels.LipidFilter)), true

	case "Query.lye":
		if e.complexity.Query.Lye == nil {
			break
		}

		args, err := ec.field_Query_lye_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Lye(childComplexity, args["id"].(string)), true

	case "Query.lyes":
		if e.complexity.Query.Lyes == nil {
			break
		}

		args, err := ec.field_Query_lyes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Lyes(childComplexity, args["filter"].(*gmodels.LyeFilter)), true

	case "Query.recipe":
		if e.complexity.Query.Recipe == nil {
			break
		}

		args, err := ec.field_Query_recipe_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Recipe(childComplexity, args["id"].(string)), true

	case "Query.recipeAdditive":
		if e.complexity.Query.RecipeAdditive == nil {
			break
		}

		args, err := ec.field_Query_recipeAdditive_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecipeAdditive(childComplexity, args["id"].(string)), true

	case "Query.recipeAdditives":
		if e.complexity.Query.RecipeAdditives == nil {
			break
		}

		args, err := ec.field_Query_recipeAdditives_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecipeAdditives(childComplexity, args["filter"].(*gmodels.RecipeAdditiveFilter)), true

	case "Query.recipeBatch":
		if e.complexity.Query.RecipeBatch == nil {
			break
		}

		args, err := ec.field_Query_recipeBatch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecipeBatch(childComplexity, args["id"].(string)), true

	case "Query.recipeBatchAdditive":
		if e.complexity.Query.RecipeBatchAdditive == nil {
			break
		}

		args, err := ec.field_Query_recipeBatchAdditive_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecipeBatchAdditive(childComplexity, args["id"].(string)), true

	case "Query.recipeBatchAdditives":
		if e.complexity.Query.RecipeBatchAdditives == nil {
			break
		}

		args, err := ec.field_Query_recipeBatchAdditives_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecipeBatchAdditives(childComplexity, args["filter"].(*gmodels.RecipeBatchAdditiveFilter)), true

	case "Query.recipeBatchFragrance":
		if e.complexity.Query.RecipeBatchFragrance == nil {
			break
		}

		args, err := ec.field_Query_recipeBatchFragrance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecipeBatchFragrance(childComplexity, args["id"].(string)), true

	case "Query.recipeBatchFragrances":
		if e.complexity.Query.RecipeBatchFragrances == nil {
			break
		}

		args, err := ec.field_Query_recipeBatchFragrances_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecipeBatchFragrances(childComplexity, args["filter"].(*gmodels.RecipeBatchFragranceFilter)), true

	case "Query.recipeBatchLipid":
		if e.complexity.Query.RecipeBatchLipid == nil {
			break
		}

		args, err := ec.field_Query_recipeBatchLipid_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecipeBatchLipid(childComplexity, args["id"].(string)), true

	case "Query.recipeBatchLipids":
		if e.complexity.Query.RecipeBatchLipids == nil {
			break
		}

		args, err := ec.field_Query_recipeBatchLipids_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecipeBatchLipids(childComplexity, args["filter"].(*gmodels.RecipeBatchLipidFilter)), true

	case "Query.recipeBatchLye":
		if e.complexity.Query.RecipeBatchLye == nil {
			break
		}

		args, err := ec.field_Query_recipeBatchLye_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecipeBatchLye(childComplexity, args["id"].(string)), true

	case "Query.recipeBatchLyes":
		if e.complexity.Query.RecipeBatchLyes == nil {
			break
		}

		args, err := ec.field_Query_recipeBatchLyes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecipeBatchLyes(childComplexity, args["filter"].(*gmodels.RecipeBatchLyeFilter)), true

	case "Query.recipeBatchNote":
		if e.complexity.Query.RecipeBatchNote == nil {
			break
		}

		args, err := ec.field_Query_recipeBatchNote_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecipeBatchNote(childComplexity, args["id"].(string)), true

	case "Query.recipeBatchNotes":
		if e.complexity.Query.RecipeBatchNotes == nil {
			break
		}

		args, err := ec.field_Query_recipeBatchNotes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecipeBatchNotes(childComplexity, args["filter"].(*gmodels.RecipeBatchNoteFilter)), true

	case "Query.recipeBatches":
		if e.complexity.Query.RecipeBatches == nil {
			break
		}

		args, err := ec.field_Query_recipeBatches_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecipeBatches(childComplexity, args["filter"].(*gmodels.RecipeBatchFilter)), true

	case "Query.recipeFragrance":
		if e.complexity.Query.RecipeFragrance == nil {
			break
		}

		args, err := ec.field_Query_recipeFragrance_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecipeFragrance(childComplexity, args["id"].(string)), true

	case "Query.recipeFragrances":
		if e.complexity.Query.RecipeFragrances == nil {
			break
		}

		args, err := ec.field_Query_recipeFragrances_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecipeFragrances(childComplexity, args["filter"].(*gmodels.RecipeFragranceFilter)), true

	case "Query.recipeLipid":
		if e.complexity.Query.RecipeLipid == nil {
			break
		}

		args, err := ec.field_Query_recipeLipid_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecipeLipid(childComplexity, args["id"].(string)), true

	case "Query.recipeLipids":
		if e.complexity.Query.RecipeLipids == nil {
			break
		}

		args, err := ec.field_Query_recipeLipids_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecipeLipids(childComplexity, args["filter"].(*gmodels.RecipeLipidFilter)), true

	case "Query.recipeStep":
		if e.complexity.Query.RecipeStep == nil {
			break
		}

		args, err := ec.field_Query_recipeStep_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecipeStep(childComplexity, args["id"].(string)), true

	case "Query.recipeSteps":
		if e.complexity.Query.RecipeSteps == nil {
			break
		}

		args, err := ec.field_Query_recipeSteps_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RecipeSteps(childComplexity, args["filter"].(*gmodels.RecipeStepFilter)), true

	case "Query.recipes":
		if e.complexity.Query.Recipes == nil {
			break
		}

		args, err := ec.field_Query_recipes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Recipes(childComplexity, args["filter"].(*gmodels.RecipeFilter)), true

	case "Query.supplier":
		if e.complexity.Query.Supplier == nil {
			break
		}

		args, err := ec.field_Query_supplier_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Supplier(childComplexity, args["id"].(string)), true

	case "Query.suppliers":
		if e.complexity.Query.Suppliers == nil {
			break
		}

		args, err := ec.field_Query_suppliers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Suppliers(childComplexity, args["filter"].(*gmodels.SupplierFilter)), true

	case "Recipe.additives":
		if e.complexity.Recipe.Additives == nil {
			break
		}

		return e.complexity.Recipe.Additives(childComplexity), true

	case "Recipe.batches":
		if e.complexity.Recipe.Batches == nil {
			break
		}

		return e.complexity.Recipe.Batches(childComplexity), true

	case "Recipe.createdAt":
		if e.complexity.Recipe.CreatedAt == nil {
			break
		}

		return e.complexity.Recipe.CreatedAt(childComplexity), true

	case "Recipe.deletedAt":
		if e.complexity.Recipe.DeletedAt == nil {
			break
		}

		return e.complexity.Recipe.DeletedAt(childComplexity), true

	case "Recipe.fragrances":
		if e.complexity.Recipe.Fragrances == nil {
			break
		}

		return e.complexity.Recipe.Fragrances(childComplexity), true

	case "Recipe.id":
		if e.complexity.Recipe.ID == nil {
			break
		}

		return e.complexity.Recipe.ID(childComplexity), true

	case "Recipe.lipids":
		if e.complexity.Recipe.Lipids == nil {
			break
		}

		return e.complexity.Recipe.Lipids(childComplexity), true

	case "Recipe.name":
		if e.complexity.Recipe.Name == nil {
			break
		}

		return e.complexity.Recipe.Name(childComplexity), true

	case "Recipe.note":
		if e.complexity.Recipe.Note == nil {
			break
		}

		return e.complexity.Recipe.Note(childComplexity), true

	case "Recipe.steps":
		if e.complexity.Recipe.Steps == nil {
			break
		}

		return e.complexity.Recipe.Steps(childComplexity), true

	case "Recipe.updatedAt":
		if e.complexity.Recipe.UpdatedAt == nil {
			break
		}

		return e.complexity.Recipe.UpdatedAt(childComplexity), true

	case "RecipeAdditive.additive":
		if e.complexity.RecipeAdditive.Additive == nil {
			break
		}

		return e.complexity.RecipeAdditive.Additive(childComplexity), true

	case "RecipeAdditive.createdAt":
		if e.complexity.RecipeAdditive.CreatedAt == nil {
			break
		}

		return e.complexity.RecipeAdditive.CreatedAt(childComplexity), true

	case "RecipeAdditive.deletedAt":
		if e.complexity.RecipeAdditive.DeletedAt == nil {
			break
		}

		return e.complexity.RecipeAdditive.DeletedAt(childComplexity), true

	case "RecipeAdditive.id":
		if e.complexity.RecipeAdditive.ID == nil {
			break
		}

		return e.complexity.RecipeAdditive.ID(childComplexity), true

	case "RecipeAdditive.percentage":
		if e.complexity.RecipeAdditive.Percentage == nil {
			break
		}

		return e.complexity.RecipeAdditive.Percentage(childComplexity), true

	case "RecipeAdditive.recipe":
		if e.complexity.RecipeAdditive.Recipe == nil {
			break
		}

		return e.complexity.RecipeAdditive.Recipe(childComplexity), true

	case "RecipeAdditive.updatedAt":
		if e.complexity.RecipeAdditive.UpdatedAt == nil {
			break
		}

		return e.complexity.RecipeAdditive.UpdatedAt(childComplexity), true

	case "RecipeAdditiveDeletePayload.id":
		if e.complexity.RecipeAdditiveDeletePayload.ID == nil {
			break
		}

		return e.complexity.RecipeAdditiveDeletePayload.ID(childComplexity), true

	case "RecipeAdditivePayload.recipeAdditive":
		if e.complexity.RecipeAdditivePayload.RecipeAdditive == nil {
			break
		}

		return e.complexity.RecipeAdditivePayload.RecipeAdditive(childComplexity), true

	case "RecipeBatch.additives":
		if e.complexity.RecipeBatch.Additives == nil {
			break
		}

		return e.complexity.RecipeBatch.Additives(childComplexity), true

	case "RecipeBatch.createdAt":
		if e.complexity.RecipeBatch.CreatedAt == nil {
			break
		}

		return e.complexity.RecipeBatch.CreatedAt(childComplexity), true

	case "RecipeBatch.curedWeight":
		if e.complexity.RecipeBatch.CuredWeight == nil {
			break
		}

		return e.complexity.RecipeBatch.CuredWeight(childComplexity), true

	case "RecipeBatch.deletedAt":
		if e.complexity.RecipeBatch.DeletedAt == nil {
			break
		}

		return e.complexity.RecipeBatch.DeletedAt(childComplexity), true

	case "RecipeBatch.fragrances":
		if e.complexity.RecipeBatch.Fragrances == nil {
			break
		}

		return e.complexity.RecipeBatch.Fragrances(childComplexity), true

	case "RecipeBatch.id":
		if e.complexity.RecipeBatch.ID == nil {
			break
		}

		return e.complexity.RecipeBatch.ID(childComplexity), true

	case "RecipeBatch.lipidWeight":
		if e.complexity.RecipeBatch.LipidWeight == nil {
			break
		}

		return e.complexity.RecipeBatch.LipidWeight(childComplexity), true

	case "RecipeBatch.lipids":
		if e.complexity.RecipeBatch.Lipids == nil {
			break
		}

		return e.complexity.RecipeBatch.Lipids(childComplexity), true

	case "RecipeBatch.lye":
		if e.complexity.RecipeBatch.Lye == nil {
			break
		}

		return e.complexity.RecipeBatch.Lye(childComplexity), true

	case "RecipeBatch.note":
		if e.complexity.RecipeBatch.Note == nil {
			break
		}

		return e.complexity.RecipeBatch.Note(childComplexity), true

	case "RecipeBatch.notes":
		if e.complexity.RecipeBatch.Notes == nil {
			break
		}

		return e.complexity.RecipeBatch.Notes(childComplexity), true

	case "RecipeBatch.productionDate":
		if e.complexity.RecipeBatch.ProductionDate == nil {
			break
		}

		return e.complexity.RecipeBatch.ProductionDate(childComplexity), true

	case "RecipeBatch.productionWeight":
		if e.complexity.RecipeBatch.ProductionWeight == nil {
			break
		}

		return e.complexity.RecipeBatch.ProductionWeight(childComplexity), true

	case "RecipeBatch.recipe":
		if e.complexity.RecipeBatch.Recipe == nil {
			break
		}

		return e.complexity.RecipeBatch.Recipe(childComplexity), true

	case "RecipeBatch.sellableDate":
		if e.complexity.RecipeBatch.SellableDate == nil {
			break
		}

		return e.complexity.RecipeBatch.SellableDate(childComplexity), true

	case "RecipeBatch.tag":
		if e.complexity.RecipeBatch.Tag == nil {
			break
		}

		return e.complexity.RecipeBatch.Tag(childComplexity), true

	case "RecipeBatch.updatedAt":
		if e.complexity.RecipeBatch.UpdatedAt == nil {
			break
		}

		return e.complexity.RecipeBatch.UpdatedAt(childComplexity), true

	case "RecipeBatchAdditive.additive":
		if e.complexity.RecipeBatchAdditive.Additive == nil {
			break
		}

		return e.complexity.RecipeBatchAdditive.Additive(childComplexity), true

	case "RecipeBatchAdditive.batch":
		if e.complexity.RecipeBatchAdditive.Batch == nil {
			break
		}

		return e.complexity.RecipeBatchAdditive.Batch(childComplexity), true

	case "RecipeBatchAdditive.cost":
		if e.complexity.RecipeBatchAdditive.Cost == nil {
			break
		}

		return e.complexity.RecipeBatchAdditive.Cost(childComplexity), true

	case "RecipeBatchAdditive.createdAt":
		if e.complexity.RecipeBatchAdditive.CreatedAt == nil {
			break
		}

		return e.complexity.RecipeBatchAdditive.CreatedAt(childComplexity), true

	case "RecipeBatchAdditive.deletedAt":
		if e.complexity.RecipeBatchAdditive.DeletedAt == nil {
			break
		}

		return e.complexity.RecipeBatchAdditive.DeletedAt(childComplexity), true

	case "RecipeBatchAdditive.id":
		if e.complexity.RecipeBatchAdditive.ID == nil {
			break
		}

		return e.complexity.RecipeBatchAdditive.ID(childComplexity), true

	case "RecipeBatchAdditive.updatedAt":
		if e.complexity.RecipeBatchAdditive.UpdatedAt == nil {
			break
		}

		return e.complexity.RecipeBatchAdditive.UpdatedAt(childComplexity), true

	case "RecipeBatchAdditive.weight":
		if e.complexity.RecipeBatchAdditive.Weight == nil {
			break
		}

		return e.complexity.RecipeBatchAdditive.Weight(childComplexity), true

	case "RecipeBatchAdditiveDeletePayload.id":
		if e.complexity.RecipeBatchAdditiveDeletePayload.ID == nil {
			break
		}

		return e.complexity.RecipeBatchAdditiveDeletePayload.ID(childComplexity), true

	case "RecipeBatchAdditivePayload.recipeBatchAdditive":
		if e.complexity.RecipeBatchAdditivePayload.RecipeBatchAdditive == nil {
			break
		}

		return e.complexity.RecipeBatchAdditivePayload.RecipeBatchAdditive(childComplexity), true

	case "RecipeBatchDeletePayload.id":
		if e.complexity.RecipeBatchDeletePayload.ID == nil {
			break
		}

		return e.complexity.RecipeBatchDeletePayload.ID(childComplexity), true

	case "RecipeBatchFragrance.batch":
		if e.complexity.RecipeBatchFragrance.Batch == nil {
			break
		}

		return e.complexity.RecipeBatchFragrance.Batch(childComplexity), true

	case "RecipeBatchFragrance.cost":
		if e.complexity.RecipeBatchFragrance.Cost == nil {
			break
		}

		return e.complexity.RecipeBatchFragrance.Cost(childComplexity), true

	case "RecipeBatchFragrance.createdAt":
		if e.complexity.RecipeBatchFragrance.CreatedAt == nil {
			break
		}

		return e.complexity.RecipeBatchFragrance.CreatedAt(childComplexity), true

	case "RecipeBatchFragrance.deletedAt":
		if e.complexity.RecipeBatchFragrance.DeletedAt == nil {
			break
		}

		return e.complexity.RecipeBatchFragrance.DeletedAt(childComplexity), true

	case "RecipeBatchFragrance.fragrance":
		if e.complexity.RecipeBatchFragrance.Fragrance == nil {
			break
		}

		return e.complexity.RecipeBatchFragrance.Fragrance(childComplexity), true

	case "RecipeBatchFragrance.id":
		if e.complexity.RecipeBatchFragrance.ID == nil {
			break
		}

		return e.complexity.RecipeBatchFragrance.ID(childComplexity), true

	case "RecipeBatchFragrance.updatedAt":
		if e.complexity.RecipeBatchFragrance.UpdatedAt == nil {
			break
		}

		return e.complexity.RecipeBatchFragrance.UpdatedAt(childComplexity), true

	case "RecipeBatchFragrance.weight":
		if e.complexity.RecipeBatchFragrance.Weight == nil {
			break
		}

		return e.complexity.RecipeBatchFragrance.Weight(childComplexity), true

	case "RecipeBatchFragranceDeletePayload.id":
		if e.complexity.RecipeBatchFragranceDeletePayload.ID == nil {
			break
		}

		return e.complexity.RecipeBatchFragranceDeletePayload.ID(childComplexity), true

	case "RecipeBatchFragrancePayload.recipeBatchFragrance":
		if e.complexity.RecipeBatchFragrancePayload.RecipeBatchFragrance == nil {
			break
		}

		return e.complexity.RecipeBatchFragrancePayload.RecipeBatchFragrance(childComplexity), true

	case "RecipeBatchLipid.batch":
		if e.complexity.RecipeBatchLipid.Batch == nil {
			break
		}

		return e.complexity.RecipeBatchLipid.Batch(childComplexity), true

	case "RecipeBatchLipid.cost":
		if e.complexity.RecipeBatchLipid.Cost == nil {
			break
		}

		return e.complexity.RecipeBatchLipid.Cost(childComplexity), true

	case "RecipeBatchLipid.createdAt":
		if e.complexity.RecipeBatchLipid.CreatedAt == nil {
			break
		}

		return e.complexity.RecipeBatchLipid.CreatedAt(childComplexity), true

	case "RecipeBatchLipid.deletedAt":
		if e.complexity.RecipeBatchLipid.DeletedAt == nil {
			break
		}

		return e.complexity.RecipeBatchLipid.DeletedAt(childComplexity), true

	case "RecipeBatchLipid.id":
		if e.complexity.RecipeBatchLipid.ID == nil {
			break
		}

		return e.complexity.RecipeBatchLipid.ID(childComplexity), true

	case "RecipeBatchLipid.lipid":
		if e.complexity.RecipeBatchLipid.Lipid == nil {
			break
		}

		return e.complexity.RecipeBatchLipid.Lipid(childComplexity), true

	case "RecipeBatchLipid.updatedAt":
		if e.complexity.RecipeBatchLipid.UpdatedAt == nil {
			break
		}

		return e.complexity.RecipeBatchLipid.UpdatedAt(childComplexity), true

	case "RecipeBatchLipid.weight":
		if e.complexity.RecipeBatchLipid.Weight == nil {
			break
		}

		return e.complexity.RecipeBatchLipid.Weight(childComplexity), true

	case "RecipeBatchLipidDeletePayload.id":
		if e.complexity.RecipeBatchLipidDeletePayload.ID == nil {
			break
		}

		return e.complexity.RecipeBatchLipidDeletePayload.ID(childComplexity), true

	case "RecipeBatchLipidPayload.recipeBatchLipid":
		if e.complexity.RecipeBatchLipidPayload.RecipeBatchLipid == nil {
			break
		}

		return e.complexity.RecipeBatchLipidPayload.RecipeBatchLipid(childComplexity), true

	case "RecipeBatchLye.batch":
		if e.complexity.RecipeBatchLye.Batch == nil {
			break
		}

		return e.complexity.RecipeBatchLye.Batch(childComplexity), true

	case "RecipeBatchLye.cost":
		if e.complexity.RecipeBatchLye.Cost == nil {
			break
		}

		return e.complexity.RecipeBatchLye.Cost(childComplexity), true

	case "RecipeBatchLye.createdAt":
		if e.complexity.RecipeBatchLye.CreatedAt == nil {
			break
		}

		return e.complexity.RecipeBatchLye.CreatedAt(childComplexity), true

	case "RecipeBatchLye.deletedAt":
		if e.complexity.RecipeBatchLye.DeletedAt == nil {
			break
		}

		return e.complexity.RecipeBatchLye.DeletedAt(childComplexity), true

	case "RecipeBatchLye.discount":
		if e.complexity.RecipeBatchLye.Discount == nil {
			break
		}

		return e.complexity.RecipeBatchLye.Discount(childComplexity), true

	case "RecipeBatchLye.id":
		if e.complexity.RecipeBatchLye.ID == nil {
			break
		}

		return e.complexity.RecipeBatchLye.ID(childComplexity), true

	case "RecipeBatchLye.lye":
		if e.complexity.RecipeBatchLye.Lye == nil {
			break
		}

		return e.complexity.RecipeBatchLye.Lye(childComplexity), true

	case "RecipeBatchLye.updatedAt":
		if e.complexity.RecipeBatchLye.UpdatedAt == nil {
			break
		}

		return e.complexity.RecipeBatchLye.UpdatedAt(childComplexity), true

	case "RecipeBatchLye.weight":
		if e.complexity.RecipeBatchLye.Weight == nil {
			break
		}

		return e.complexity.RecipeBatchLye.Weight(childComplexity), true

	case "RecipeBatchLyeDeletePayload.id":
		if e.complexity.RecipeBatchLyeDeletePayload.ID == nil {
			break
		}

		return e.complexity.RecipeBatchLyeDeletePayload.ID(childComplexity), true

	case "RecipeBatchLyePayload.recipeBatchLye":
		if e.complexity.RecipeBatchLyePayload.RecipeBatchLye == nil {
			break
		}

		return e.complexity.RecipeBatchLyePayload.RecipeBatchLye(childComplexity), true

	case "RecipeBatchNote.batch":
		if e.complexity.RecipeBatchNote.Batch == nil {
			break
		}

		return e.complexity.RecipeBatchNote.Batch(childComplexity), true

	case "RecipeBatchNote.createdAt":
		if e.complexity.RecipeBatchNote.CreatedAt == nil {
			break
		}

		return e.complexity.RecipeBatchNote.CreatedAt(childComplexity), true

	case "RecipeBatchNote.deletedAt":
		if e.complexity.RecipeBatchNote.DeletedAt == nil {
			break
		}

		return e.complexity.RecipeBatchNote.DeletedAt(childComplexity), true

	case "RecipeBatchNote.id":
		if e.complexity.RecipeBatchNote.ID == nil {
			break
		}

		return e.complexity.RecipeBatchNote.ID(childComplexity), true

	case "RecipeBatchNote.link":
		if e.complexity.RecipeBatchNote.Link == nil {
			break
		}

		return e.complexity.RecipeBatchNote.Link(childComplexity), true

	case "RecipeBatchNote.note":
		if e.complexity.RecipeBatchNote.Note == nil {
			break
		}

		return e.complexity.RecipeBatchNote.Note(childComplexity), true

	case "RecipeBatchNote.updatedAt":
		if e.complexity.RecipeBatchNote.UpdatedAt == nil {
			break
		}

		return e.complexity.RecipeBatchNote.UpdatedAt(childComplexity), true

	case "RecipeBatchNoteDeletePayload.id":
		if e.complexity.RecipeBatchNoteDeletePayload.ID == nil {
			break
		}

		return e.complexity.RecipeBatchNoteDeletePayload.ID(childComplexity), true

	case "RecipeBatchNotePayload.recipeBatchNote":
		if e.complexity.RecipeBatchNotePayload.RecipeBatchNote == nil {
			break
		}

		return e.complexity.RecipeBatchNotePayload.RecipeBatchNote(childComplexity), true

	case "RecipeBatchPayload.recipeBatch":
		if e.complexity.RecipeBatchPayload.RecipeBatch == nil {
			break
		}

		return e.complexity.RecipeBatchPayload.RecipeBatch(childComplexity), true

	case "RecipeDeletePayload.id":
		if e.complexity.RecipeDeletePayload.ID == nil {
			break
		}

		return e.complexity.RecipeDeletePayload.ID(childComplexity), true

	case "RecipeFragrance.createdAt":
		if e.complexity.RecipeFragrance.CreatedAt == nil {
			break
		}

		return e.complexity.RecipeFragrance.CreatedAt(childComplexity), true

	case "RecipeFragrance.deletedAt":
		if e.complexity.RecipeFragrance.DeletedAt == nil {
			break
		}

		return e.complexity.RecipeFragrance.DeletedAt(childComplexity), true

	case "RecipeFragrance.fragrance":
		if e.complexity.RecipeFragrance.Fragrance == nil {
			break
		}

		return e.complexity.RecipeFragrance.Fragrance(childComplexity), true

	case "RecipeFragrance.id":
		if e.complexity.RecipeFragrance.ID == nil {
			break
		}

		return e.complexity.RecipeFragrance.ID(childComplexity), true

	case "RecipeFragrance.percentage":
		if e.complexity.RecipeFragrance.Percentage == nil {
			break
		}

		return e.complexity.RecipeFragrance.Percentage(childComplexity), true

	case "RecipeFragrance.recipe":
		if e.complexity.RecipeFragrance.Recipe == nil {
			break
		}

		return e.complexity.RecipeFragrance.Recipe(childComplexity), true

	case "RecipeFragrance.updatedAt":
		if e.complexity.RecipeFragrance.UpdatedAt == nil {
			break
		}

		return e.complexity.RecipeFragrance.UpdatedAt(childComplexity), true

	case "RecipeFragranceDeletePayload.id":
		if e.complexity.RecipeFragranceDeletePayload.ID == nil {
			break
		}

		return e.complexity.RecipeFragranceDeletePayload.ID(childComplexity), true

	case "RecipeFragrancePayload.recipeFragrance":
		if e.complexity.RecipeFragrancePayload.RecipeFragrance == nil {
			break
		}

		return e.complexity.RecipeFragrancePayload.RecipeFragrance(childComplexity), true

	case "RecipeLipid.createdAt":
		if e.complexity.RecipeLipid.CreatedAt == nil {
			break
		}

		return e.complexity.RecipeLipid.CreatedAt(childComplexity), true

	case "RecipeLipid.deletedAt":
		if e.complexity.RecipeLipid.DeletedAt == nil {
			break
		}

		return e.complexity.RecipeLipid.DeletedAt(childComplexity), true

	case "RecipeLipid.id":
		if e.complexity.RecipeLipid.ID == nil {
			break
		}

		return e.complexity.RecipeLipid.ID(childComplexity), true

	case "RecipeLipid.lipid":
		if e.complexity.RecipeLipid.Lipid == nil {
			break
		}

		return e.complexity.RecipeLipid.Lipid(childComplexity), true

	case "RecipeLipid.percentage":
		if e.complexity.RecipeLipid.Percentage == nil {
			break
		}

		return e.complexity.RecipeLipid.Percentage(childComplexity), true

	case "RecipeLipid.recipe":
		if e.complexity.RecipeLipid.Recipe == nil {
			break
		}

		return e.complexity.RecipeLipid.Recipe(childComplexity), true

	case "RecipeLipid.updatedAt":
		if e.complexity.RecipeLipid.UpdatedAt == nil {
			break
		}

		return e.complexity.RecipeLipid.UpdatedAt(childComplexity), true

	case "RecipeLipidDeletePayload.id":
		if e.complexity.RecipeLipidDeletePayload.ID == nil {
			break
		}

		return e.complexity.RecipeLipidDeletePayload.ID(childComplexity), true

	case "RecipeLipidPayload.recipeLipid":
		if e.complexity.RecipeLipidPayload.RecipeLipid == nil {
			break
		}

		return e.complexity.RecipeLipidPayload.RecipeLipid(childComplexity), true

	case "RecipePayload.recipe":
		if e.complexity.RecipePayload.Recipe == nil {
			break
		}

		return e.complexity.RecipePayload.Recipe(childComplexity), true

	case "RecipeStep.createdAt":
		if e.complexity.RecipeStep.CreatedAt == nil {
			break
		}

		return e.complexity.RecipeStep.CreatedAt(childComplexity), true

	case "RecipeStep.deletedAt":
		if e.complexity.RecipeStep.DeletedAt == nil {
			break
		}

		return e.complexity.RecipeStep.DeletedAt(childComplexity), true

	case "RecipeStep.id":
		if e.complexity.RecipeStep.ID == nil {
			break
		}

		return e.complexity.RecipeStep.ID(childComplexity), true

	case "RecipeStep.note":
		if e.complexity.RecipeStep.Note == nil {
			break
		}

		return e.complexity.RecipeStep.Note(childComplexity), true

	case "RecipeStep.num":
		if e.complexity.RecipeStep.Num == nil {
			break
		}

		return e.complexity.RecipeStep.Num(childComplexity), true

	case "RecipeStep.recipe":
		if e.complexity.RecipeStep.Recipe == nil {
			break
		}

		return e.complexity.RecipeStep.Recipe(childComplexity), true

	case "RecipeStep.updatedAt":
		if e.complexity.RecipeStep.UpdatedAt == nil {
			break
		}

		return e.complexity.RecipeStep.UpdatedAt(childComplexity), true

	case "RecipeStepDeletePayload.id":
		if e.complexity.RecipeStepDeletePayload.ID == nil {
			break
		}

		return e.complexity.RecipeStepDeletePayload.ID(childComplexity), true

	case "RecipeStepPayload.recipeStep":
		if e.complexity.RecipeStepPayload.RecipeStep == nil {
			break
		}

		return e.complexity.RecipeStepPayload.RecipeStep(childComplexity), true

	case "Supplier.additiveInventory":
		if e.complexity.Supplier.AdditiveInventory == nil {
			break
		}

		return e.complexity.Supplier.AdditiveInventory(childComplexity), true

	case "Supplier.createdAt":
		if e.complexity.Supplier.CreatedAt == nil {
			break
		}

		return e.complexity.Supplier.CreatedAt(childComplexity), true

	case "Supplier.deletedAt":
		if e.complexity.Supplier.DeletedAt == nil {
			break
		}

		return e.complexity.Supplier.DeletedAt(childComplexity), true

	case "Supplier.fragranceInventory":
		if e.complexity.Supplier.FragranceInventory == nil {
			break
		}

		return e.complexity.Supplier.FragranceInventory(childComplexity), true

	case "Supplier.id":
		if e.complexity.Supplier.ID == nil {
			break
		}

		return e.complexity.Supplier.ID(childComplexity), true

	case "Supplier.lipidInventory":
		if e.complexity.Supplier.LipidInventory == nil {
			break
		}

		return e.complexity.Supplier.LipidInventory(childComplexity), true

	case "Supplier.lyeInventory":
		if e.complexity.Supplier.LyeInventory == nil {
			break
		}

		return e.complexity.Supplier.LyeInventory(childComplexity), true

	case "Supplier.name":
		if e.complexity.Supplier.Name == nil {
			break
		}

		return e.complexity.Supplier.Name(childComplexity), true

	case "Supplier.note":
		if e.complexity.Supplier.Note == nil {
			break
		}

		return e.complexity.Supplier.Note(childComplexity), true

	case "Supplier.updatedAt":
		if e.complexity.Supplier.UpdatedAt == nil {
			break
		}

		return e.complexity.Supplier.UpdatedAt(childComplexity), true

	case "Supplier.website":
		if e.complexity.Supplier.Website == nil {
			break
		}

		return e.complexity.Supplier.Website(childComplexity), true

	case "SupplierDeletePayload.id":
		if e.complexity.SupplierDeletePayload.ID == nil {
			break
		}

		return e.complexity.SupplierDeletePayload.ID(childComplexity), true

	case "SupplierPayload.supplier":
		if e.complexity.SupplierPayload.Supplier == nil {
			break
		}

		return e.complexity.SupplierPayload.Supplier(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "schema/soap.graphqls", Input: `type Additive {
  id: ID!
  name: String!
  note: String!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int
  inventory: [AdditiveInventory]
}

type AdditiveInventory {
  id: ID!
  purchaseDate: Int!
  expiryDate: Int!
  cost: Float!
  weight: Float!
  additive: Additive!
  supplier: Supplier!
  updatedAt: Int!
  deletedAt: Int
  createdAt: Int!
}

type Fragrance {
  id: ID!
  name: String!
  note: String!
  createdAt: Int!
  deletedAt: Int
  updatedAt: Int!
  inventory: [FragranceInventory]
}

type FragranceInventory {
  id: ID!
  purchaseDate: Int!
  expiryDate: Int!
  cost: Float!
  weight: Float!
  fragrance: Fragrance!
  supplier: Supplier!
  deletedAt: Int
  createdAt: Int!
  updatedAt: Int!
}

type Lipid {
  id: ID!
  name: String!
  lauric: Int!
  myristic: Int!
  palmitic: Int!
  stearic: Int!
  ricinoleic: Int!
  oleic: Int!
  linoleic: Int!
  linolenic: Int!
  hardness: Int!
  cleansing: Int!
  conditioning: Int!
  bubbly: Int!
  creamy: Int!
  iodine: Int!
  ins: Int!
  inciName: String!
  family: String!
  naoh: Float!
  deletedAt: Int
  createdAt: Int!
  updatedAt: Int!
  inventory: [LipidInventory]
}

type LipidInventory {
  id: ID!
  purchaseDate: Int!
  expiryDate: Int!
  cost: Float!
  weight: Float!
  sap: Float!
  naoh: Float!
  koh: Float!
  gramsPerLiter: Float!
  lipid: Lipid!
  supplier: Supplier!
  createdAt: Int!
  deletedAt: Int
  updatedAt: Int!
}

type Lye {
  id: ID!
  kind: String!
  name: String!
  note: String!
  deletedAt: Int
  updatedAt: Int!
  createdAt: Int!
  inventory: [LyeInventory]
}

type LyeInventory {
  id: ID!
  purchaseDate: Int!
  expiryDate: Int!
  cost: Float!
  weight: Float!
  concentration: Float!
  lye: Lye!
  supplier: Supplier!
  deletedAt: Int
  createdAt: Int!
  updatedAt: Int!
}

type Recipe {
  id: ID!
  name: String!
  note: String!
  deletedAt: Int
  createdAt: Int!
  updatedAt: Int!
  additives: [RecipeAdditive]
  batches: [RecipeBatch]
  fragrances: [RecipeFragrance]
  lipids: [RecipeLipid]
  steps: [RecipeStep]
}

type RecipeAdditive {
  id: ID!
  percentage: Float!
  additive: Additive!
  recipe: Recipe!
  deletedAt: Int
  createdAt: Int!
  updatedAt: Int!
}

type RecipeBatch {
  id: ID!
  tag: String!
  productionDate: Int!
  sellableDate: Int!
  note: String!
  lipidWeight: Float!
  productionWeight: Float!
  curedWeight: Float!
  recipe: Recipe!
  deletedAt: Int
  updatedAt: Int!
  createdAt: Int!
  additives: [RecipeBatchAdditive]
  fragrances: [RecipeBatchFragrance]
  lipids: [RecipeBatchLipid]
  lye: [RecipeBatchLye]
  notes: [RecipeBatchNote]
}

type RecipeBatchAdditive {
  id: ID!
  weight: Float!
  cost: Float!
  additive: Additive!
  batch: RecipeBatch!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int
}

type RecipeBatchFragrance {
  id: ID!
  weight: Float!
  cost: Float!
  fragrance: Fragrance!
  batch: RecipeBatch!
  updatedAt: Int!
  deletedAt: Int
  createdAt: Int!
}

type RecipeBatchLipid {
  id: ID!
  weight: Float!
  cost: Float!
  lipid: Lipid!
  batch: RecipeBatch!
  deletedAt: Int
  updatedAt: Int!
  createdAt: Int!
}

type RecipeBatchLye {
  id: ID!
  weight: Float!
  discount: Float!
  cost: Float!
  lye: Lye!
  batch: RecipeBatch!
  updatedAt: Int!
  deletedAt: Int
  createdAt: Int!
}

type RecipeBatchNote {
  id: ID!
  note: String!
  link: String!
  batch: RecipeBatch!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int
}

type RecipeFragrance {
  id: ID!
  percentage: Float!
  fragrance: Fragrance!
  recipe: Recipe!
  deletedAt: Int
  createdAt: Int!
  updatedAt: Int!
}

type RecipeLipid {
  id: ID!
  percentage: Float!
  lipid: Lipid!
  recipe: Recipe!
  deletedAt: Int
  updatedAt: Int!
  createdAt: Int!
}

type RecipeStep {
  id: ID!
  num: Int!
  note: String!
  recipe: Recipe!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int
}

type Supplier {
  id: ID!
  name: String!
  website: String!
  note: String!
  deletedAt: Int
  updatedAt: Int!
  createdAt: Int!
  additiveInventory: [AdditiveInventory]
  fragranceInventory: [FragranceInventory]
  lipidInventory: [LipidInventory]
  lyeInventory: [LyeInventory]
}

input IDFilter {
  equalTo: ID
  notEqualTo: ID
  in: [ID!]
  notIn: [ID!]
}

input StringFilter {
  equalTo: String
  notEqualTo: String

  in: [String!]
  notIn: [String!]

  startWith: String
  notStartWith: String

  endWith: String
  notEndWith: String

  contain: String
  notContain: String

  startWithStrict: String # Camel sensitive
  notStartWithStrict: String # Camel sensitive
  endWithStrict: String # Camel sensitive
  notEndWithStrict: String # Camel sensitive
  containStrict: String # Camel sensitive
  notContainStrict: String # Camel sensitive
}

input IntFilter {
  equalTo: Int
  notEqualTo: Int
  lessThan: Int
  lessThanOrEqualTo: Int
  moreThan: Int
  moreThanOrEqualTo: Int
  in: [Int!]
  notIn: [Int!]
}

input FloatFilter {
  equalTo: Float
  notEqualTo: Float
  lessThan: Float
  lessThanOrEqualTo: Float
  moreThan: Float
  moreThanOrEqualTo: Float
  in: [Float!]
  notIn: [Float!]
}

input BooleanFilter {
  equalTo: Boolean
  notEqualTo: Boolean
}

input AdditiveFilter {
  search: String
  where: AdditiveWhere
}

input AdditiveWhere {
  id: IDFilter
  name: StringFilter
  note: StringFilter
  createdAt: IntFilter
  updatedAt: IntFilter
  deletedAt: IntFilter
  recipeAdditive: RecipeAdditiveWhere
  recipeBatchAdditive: RecipeBatchAdditiveWhere
  additiveInventory: AdditiveInventoryWhere
  or: AdditiveWhere
  and: AdditiveWhere
}

input AdditiveInventoryFilter {
  search: String
  where: AdditiveInventoryWhere
}

input AdditiveInventoryWhere {
  id: IDFilter
  purchaseDate: IntFilter
  expiryDate: IntFilter
  cost: FloatFilter
  weight: FloatFilter
  additive: AdditiveWhere
  supplier: SupplierWhere
  updatedAt: IntFilter
  deletedAt: IntFilter
  createdAt: IntFilter
  or: AdditiveInventoryWhere
  and: AdditiveInventoryWhere
}

input FragranceFilter {
  search: String
  where: FragranceWhere
}

input FragranceWhere {
  id: IDFilter
  name: StringFilter
  note: StringFilter
  createdAt: IntFilter
  deletedAt: IntFilter
  updatedAt: IntFilter
  recipeBatchFragrance: RecipeBatchFragranceWhere
  recipeFragrance: RecipeFragranceWhere
  fragranceInventory: FragranceInventoryWhere
  or: FragranceWhere
  and: FragranceWhere
}

input FragranceInventoryFilter {
  search: String
  where: FragranceInventoryWhere
}

input FragranceInventoryWhere {
  id: IDFilter
  purchaseDate: IntFilter
  expiryDate: IntFilter
  cost: FloatFilter
  weight: FloatFilter
  fragrance: FragranceWhere
  supplier: SupplierWhere
  deletedAt: IntFilter
  createdAt: IntFilter
  updatedAt: IntFilter
  or: FragranceInventoryWhere
  and: FragranceInventoryWhere
}

input LipidFilter {
  search: String
  where: LipidWhere
}

input LipidWhere {
  id: IDFilter
  name: StringFilter
  lauric: IntFilter
  myristic: IntFilter
  palmitic: IntFilter
  stearic: IntFilter
  ricinoleic: IntFilter
  oleic: IntFilter
  linoleic: IntFilter
  linolenic: IntFilter
  hardness: IntFilter
  cleansing: IntFilter
  conditioning: IntFilter
  bubbly: IntFilter
  creamy: IntFilter
  iodine: IntFilter
  ins: IntFilter
  inciName: StringFilter
  family: StringFilter
  naoh: FloatFilter
  deletedAt: IntFilter
  createdAt: IntFilter
  updatedAt: IntFilter
  recipeBatchLipid: RecipeBatchLipidWhere
  recipeLipid: RecipeLipidWhere
  lipidInventory: LipidInventoryWhere
  or: LipidWhere
  and: LipidWhere
}

input LipidInventoryFilter {
  search: String
  where: LipidInventoryWhere
}

input LipidInventoryWhere {
  id: IDFilter
  purchaseDate: IntFilter
  expiryDate: IntFilter
  cost: FloatFilter
  weight: FloatFilter
  sap: FloatFilter
  naoh: FloatFilter
  koh: FloatFilter
  gramsPerLiter: FloatFilter
  lipid: LipidWhere
  supplier: SupplierWhere
  createdAt: IntFilter
  deletedAt: IntFilter
  updatedAt: IntFilter
  or: LipidInventoryWhere
  and: LipidInventoryWhere
}

input LyeFilter {
  search: String
  where: LyeWhere
}

input LyeWhere {
  id: IDFilter
  kind: StringFilter
  name: StringFilter
  note: StringFilter
  deletedAt: IntFilter
  updatedAt: IntFilter
  createdAt: IntFilter
  recipeBatchLye: RecipeBatchLyeWhere
  lyeInventory: LyeInventoryWhere
  or: LyeWhere
  and: LyeWhere
}

input LyeInventoryFilter {
  search: String
  where: LyeInventoryWhere
}

input LyeInventoryWhere {
  id: IDFilter
  purchaseDate: IntFilter
  expiryDate: IntFilter
  cost: FloatFilter
  weight: FloatFilter
  concentration: FloatFilter
  lye: LyeWhere
  supplier: SupplierWhere
  deletedAt: IntFilter
  createdAt: IntFilter
  updatedAt: IntFilter
  or: LyeInventoryWhere
  and: LyeInventoryWhere
}

input RecipeFilter {
  search: String
  where: RecipeWhere
}

input RecipeWhere {
  id: IDFilter
  name: StringFilter
  note: StringFilter
  deletedAt: IntFilter
  createdAt: IntFilter
  updatedAt: IntFilter
  recipeAdditives: RecipeAdditiveWhere
  recipeBatches: RecipeBatchWhere
  recipeFragrances: RecipeFragranceWhere
  recipeLipids: RecipeLipidWhere
  recipeSteps: RecipeStepWhere
  or: RecipeWhere
  and: RecipeWhere
}

input RecipeAdditiveFilter {
  search: String
  where: RecipeAdditiveWhere
}

input RecipeAdditiveWhere {
  id: IDFilter
  percentage: FloatFilter
  additive: AdditiveWhere
  recipe: RecipeWhere
  deletedAt: IntFilter
  createdAt: IntFilter
  updatedAt: IntFilter
  or: RecipeAdditiveWhere
  and: RecipeAdditiveWhere
}

input RecipeBatchFilter {
  search: String
  where: RecipeBatchWhere
}

input RecipeBatchWhere {
  id: IDFilter
  tag: StringFilter
  productionDate: IntFilter
  sellableDate: IntFilter
  note: StringFilter
  lipidWeight: FloatFilter
  productionWeight: FloatFilter
  curedWeight: FloatFilter
  recipe: RecipeWhere
  deletedAt: IntFilter
  updatedAt: IntFilter
  createdAt: IntFilter
  batchRecipeBatchAdditives: RecipeBatchAdditiveWhere
  batchRecipeBatchFragrances: RecipeBatchFragranceWhere
  batchRecipeBatchLipids: RecipeBatchLipidWhere
  batchRecipeBatchLyes: RecipeBatchLyeWhere
  batchRecipeBatchNotes: RecipeBatchNoteWhere
  or: RecipeBatchWhere
  and: RecipeBatchWhere
}

input RecipeBatchAdditiveFilter {
  search: String
  where: RecipeBatchAdditiveWhere
}

input RecipeBatchAdditiveWhere {
  id: IDFilter
  weight: FloatFilter
  cost: FloatFilter
  additive: AdditiveWhere
  batch: RecipeBatchWhere
  createdAt: IntFilter
  updatedAt: IntFilter
  deletedAt: IntFilter
  or: RecipeBatchAdditiveWhere
  and: RecipeBatchAdditiveWhere
}

input RecipeBatchFragranceFilter {
  search: String
  where: RecipeBatchFragranceWhere
}

input RecipeBatchFragranceWhere {
  id: IDFilter
  weight: FloatFilter
  cost: FloatFilter
  fragrance: FragranceWhere
  batch: RecipeBatchWhere
  updatedAt: IntFilter
  deletedAt: IntFilter
  createdAt: IntFilter
  or: RecipeBatchFragranceWhere
  and: RecipeBatchFragranceWhere
}

input RecipeBatchLipidFilter {
  search: String
  where: RecipeBatchLipidWhere
}

input RecipeBatchLipidWhere {
  id: IDFilter
  weight: FloatFilter
  cost: FloatFilter
  lipid: LipidWhere
  batch: RecipeBatchWhere
  deletedAt: IntFilter
  updatedAt: IntFilter
  createdAt: IntFilter
  or: RecipeBatchLipidWhere
  and: RecipeBatchLipidWhere
}

input RecipeBatchLyeFilter {
  search: String
  where: RecipeBatchLyeWhere
}

input RecipeBatchLyeWhere {
  id: IDFilter
  weight: FloatFilter
  discount: FloatFilter
  cost: FloatFilter
  lye: LyeWhere
  batch: RecipeBatchWhere
  updatedAt: IntFilter
  deletedAt: IntFilter
  createdAt: IntFilter
  or: RecipeBatchLyeWhere
  and: RecipeBatchLyeWhere
}

input RecipeBatchNoteFilter {
  search: String
  where: RecipeBatchNoteWhere
}

input RecipeBatchNoteWhere {
  id: IDFilter
  note: StringFilter
  link: StringFilter
  batch: RecipeBatchWhere
  createdAt: IntFilter
  updatedAt: IntFilter
  deletedAt: IntFilter
  or: RecipeBatchNoteWhere
  and: RecipeBatchNoteWhere
}

input RecipeFragranceFilter {
  search: String
  where: RecipeFragranceWhere
}

input RecipeFragranceWhere {
  id: IDFilter
  percentage: FloatFilter
  fragrance: FragranceWhere
  recipe: RecipeWhere
  deletedAt: IntFilter
  createdAt: IntFilter
  updatedAt: IntFilter
  or: RecipeFragranceWhere
  and: RecipeFragranceWhere
}

input RecipeLipidFilter {
  search: String
  where: RecipeLipidWhere
}

input RecipeLipidWhere {
  id: IDFilter
  percentage: FloatFilter
  lipid: LipidWhere
  recipe: RecipeWhere
  deletedAt: IntFilter
  updatedAt: IntFilter
  createdAt: IntFilter
  or: RecipeLipidWhere
  and: RecipeLipidWhere
}

input RecipeStepFilter {
  search: String
  where: RecipeStepWhere
}

input RecipeStepWhere {
  id: IDFilter
  num: IntFilter
  note: StringFilter
  recipe: RecipeWhere
  createdAt: IntFilter
  updatedAt: IntFilter
  deletedAt: IntFilter
  or: RecipeStepWhere
  and: RecipeStepWhere
}

input SupplierFilter {
  search: String
  where: SupplierWhere
}

input SupplierWhere {
  id: IDFilter
  name: StringFilter
  website: StringFilter
  note: StringFilter
  deletedAt: IntFilter
  updatedAt: IntFilter
  createdAt: IntFilter
  additiveInventory: AdditiveInventoryWhere
  fragranceInventory: FragranceInventoryWhere
  lipidInventory: LipidInventoryWhere
  lyeInventory: LyeInventoryWhere
  or: SupplierWhere
  and: SupplierWhere
}

type Query {
  additive(id: ID!): Additive!
  additives(filter: AdditiveFilter): [Additive!]!
  fragrance(id: ID!): Fragrance!
  fragrances(filter: FragranceFilter): [Fragrance!]!
  lipid(id: ID!): Lipid!
  lipids(filter: LipidFilter): [Lipid!]!
  lye(id: ID!): Lye!
  lyes(filter: LyeFilter): [Lye!]!
  recipe(id: ID!): Recipe!
  recipes(filter: RecipeFilter): [Recipe!]!
  recipeAdditive(id: ID!): RecipeAdditive!
  recipeAdditives(filter: RecipeAdditiveFilter): [RecipeAdditive!]!
  recipeBatch(id: ID!): RecipeBatch!
  recipeBatches(filter: RecipeBatchFilter): [RecipeBatch!]!
  recipeBatchAdditive(id: ID!): RecipeBatchAdditive!
  recipeBatchAdditives(
    filter: RecipeBatchAdditiveFilter
  ): [RecipeBatchAdditive!]!
  recipeBatchFragrance(id: ID!): RecipeBatchFragrance!
  recipeBatchFragrances(
    filter: RecipeBatchFragranceFilter
  ): [RecipeBatchFragrance!]!
  recipeBatchLipid(id: ID!): RecipeBatchLipid!
  recipeBatchLipids(filter: RecipeBatchLipidFilter): [RecipeBatchLipid!]!
  recipeBatchLye(id: ID!): RecipeBatchLye!
  recipeBatchLyes(filter: RecipeBatchLyeFilter): [RecipeBatchLye!]!
  recipeBatchNote(id: ID!): RecipeBatchNote!
  recipeBatchNotes(filter: RecipeBatchNoteFilter): [RecipeBatchNote!]!
  recipeFragrance(id: ID!): RecipeFragrance!
  recipeFragrances(filter: RecipeFragranceFilter): [RecipeFragrance!]!
  recipeLipid(id: ID!): RecipeLipid!
  recipeLipids(filter: RecipeLipidFilter): [RecipeLipid!]!
  recipeStep(id: ID!): RecipeStep!
  recipeSteps(filter: RecipeStepFilter): [RecipeStep!]!
  supplier(id: ID!): Supplier!
  suppliers(filter: SupplierFilter): [Supplier!]!
}

input AdditiveCreateInput {
  name: String!
  note: String!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int
}

input AdditiveUpdateInput {
  name: String
  note: String
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type AdditivePayload {
  additive: Additive!
}

type AdditiveDeletePayload {
  id: ID!
}

input AdditiveInventoryCreateInput {
  purchaseDate: Int!
  expiryDate: Int!
  cost: Float!
  weight: Float!
  additiveId: ID!
  supplierId: ID!
  updatedAt: Int!
  deletedAt: Int
  createdAt: Int!
}

input AdditiveInventoryUpdateInput {
  purchaseDate: Int
  expiryDate: Int
  cost: Float
  weight: Float
  additiveId: ID
  supplierId: ID
  updatedAt: Int
  deletedAt: Int
  createdAt: Int
}

type AdditiveInventoryPayload {
  additiveInventory: AdditiveInventory!
}

type AdditiveInventoryDeletePayload {
  id: ID!
}

input FragranceCreateInput {
  name: String!
  note: String!
  createdAt: Int!
  deletedAt: Int
  updatedAt: Int!
}

input FragranceUpdateInput {
  name: String
  note: String
  createdAt: Int
  deletedAt: Int
  updatedAt: Int
}

type FragrancePayload {
  fragrance: Fragrance!
}

type FragranceDeletePayload {
  id: ID!
}

input FragranceInventoryCreateInput {
  purchaseDate: Int!
  expiryDate: Int!
  cost: Float!
  weight: Float!
  fragranceId: ID!
  supplierId: ID!
  deletedAt: Int
  createdAt: Int!
  updatedAt: Int!
}

input FragranceInventoryUpdateInput {
  purchaseDate: Int
  expiryDate: Int
  cost: Float
  weight: Float
  fragranceId: ID
  supplierId: ID
  deletedAt: Int
  createdAt: Int
  updatedAt: Int
}

type FragranceInventoryPayload {
  fragranceInventory: FragranceInventory!
}

type FragranceInventoryDeletePayload {
  id: ID!
}

input LipidCreateInput {
  name: String!
  lauric: Int!
  myristic: Int!
  palmitic: Int!
  stearic: Int!
  ricinoleic: Int!
  oleic: Int!
  linoleic: Int!
  linolenic: Int!
  hardness: Int!
  cleansing: Int!
  conditioning: Int!
  bubbly: Int!
  creamy: Int!
  iodine: Int!
  ins: Int!
  inciName: String!
  family: String!
  naoh: Float!
  deletedAt: Int
  createdAt: Int!
  updatedAt: Int!
  recipeBatchLipid: ID
  recipeLipid: ID
}

input LipidUpdateInput {
  name: String
  lauric: Int
  myristic: Int
  palmitic: Int
  stearic: Int
  ricinoleic: Int
  oleic: Int
  linoleic: Int
  linolenic: Int
  hardness: Int
  cleansing: Int
  conditioning: Int
  bubbly: Int
  creamy: Int
  iodine: Int
  ins: Int
  inciName: String
  family: String
  naoh: Float
  deletedAt: Int
  createdAt: Int
  updatedAt: Int
  recipeBatchLipid: ID
  recipeLipid: ID
}

type LipidPayload {
  lipid: Lipid!
}

type LipidDeletePayload {
  id: ID!
}

input LipidInventoryCreateInput {
  purchaseDate: Int!
  expiryDate: Int!
  cost: Float!
  weight: Float!
  sap: Float!
  naoh: Float!
  koh: Float!
  gramsPerLiter: Float!
  lipidId: ID!
  supplierId: ID!
  createdAt: Int!
  deletedAt: Int
  updatedAt: Int!
}

input LipidInventoryUpdateInput {
  purchaseDate: Int
  expiryDate: Int
  cost: Float
  weight: Float
  sap: Float
  naoh: Float
  koh: Float
  gramsPerLiter: Float
  lipidId: ID
  supplierId: ID
  createdAt: Int
  deletedAt: Int
  updatedAt: Int
}

type LipidInventoryPayload {
  lipidInventory: LipidInventory!
}

type LipidInventoryDeletePayload {
  id: ID!
}

input LyeCreateInput {
  kind: String!
  name: String!
  note: String!
  deletedAt: Int
  updatedAt: Int!
  createdAt: Int!
}

input LyeUpdateInput {
  kind: String
  name: String
  note: String
  deletedAt: Int
  updatedAt: Int
  createdAt: Int
}

type LyePayload {
  lye: Lye!
}

type LyeDeletePayload {
  id: ID!
}

input LyeInventoryCreateInput {
  purchaseDate: Int!
  expiryDate: Int!
  cost: Float!
  weight: Float!
  concentration: Float!
  lyeId: ID!
  supplierId: ID!
  deletedAt: Int
  createdAt: Int!
  updatedAt: Int!
}

input LyeInventoryUpdateInput {
  purchaseDate: Int
  expiryDate: Int
  cost: Float
  weight: Float
  concentration: Float
  lyeId: ID
  supplierId: ID
  deletedAt: Int
  createdAt: Int
  updatedAt: Int
}

type LyeInventoryPayload {
  lyeInventory: LyeInventory!
}

type LyeInventoryDeletePayload {
  id: ID!
}

input RecipeCreateInput {
  name: String!
  note: String!
  deletedAt: Int
  createdAt: Int!
  updatedAt: Int!
}

input RecipeUpdateInput {
  name: String
  note: String
  deletedAt: Int
  createdAt: Int
  updatedAt: Int
}

type RecipePayload {
  recipe: Recipe!
}

type RecipeDeletePayload {
  id: ID!
}

input RecipeAdditiveCreateInput {
  percentage: Float!
  additiveId: ID!
  recipeId: ID!
  deletedAt: Int
  createdAt: Int!
  updatedAt: Int!
}

input RecipeAdditiveUpdateInput {
  percentage: Float
  additiveId: ID
  recipeId: ID
  deletedAt: Int
  createdAt: Int
  updatedAt: Int
}

type RecipeAdditivePayload {
  recipeAdditive: RecipeAdditive!
}

type RecipeAdditiveDeletePayload {
  id: ID!
}

input RecipeBatchCreateInput {
  tag: String!
  productionDate: Int!
  sellableDate: Int!
  note: String!
  lipidWeight: Float!
  productionWeight: Float!
  curedWeight: Float!
  recipeId: ID!
  deletedAt: Int
  updatedAt: Int!
  createdAt: Int!
}

input RecipeBatchUpdateInput {
  tag: String
  productionDate: Int
  sellableDate: Int
  note: String
  lipidWeight: Float
  productionWeight: Float
  curedWeight: Float
  recipeId: ID
  deletedAt: Int
  updatedAt: Int
  createdAt: Int
}

type RecipeBatchPayload {
  recipeBatch: RecipeBatch!
}

type RecipeBatchDeletePayload {
  id: ID!
}

input RecipeBatchAdditiveCreateInput {
  weight: Float!
  cost: Float!
  additiveId: ID!
  batchId: ID!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int
}

input RecipeBatchAdditiveUpdateInput {
  weight: Float
  cost: Float
  additiveId: ID
  batchId: ID
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type RecipeBatchAdditivePayload {
  recipeBatchAdditive: RecipeBatchAdditive!
}

type RecipeBatchAdditiveDeletePayload {
  id: ID!
}

input RecipeBatchFragranceCreateInput {
  weight: Float!
  cost: Float!
  fragranceId: ID!
  batchId: ID!
  updatedAt: Int!
  deletedAt: Int
  createdAt: Int!
}

input RecipeBatchFragranceUpdateInput {
  weight: Float
  cost: Float
  fragranceId: ID
  batchId: ID
  updatedAt: Int
  deletedAt: Int
  createdAt: Int
}

type RecipeBatchFragrancePayload {
  recipeBatchFragrance: RecipeBatchFragrance!
}

type RecipeBatchFragranceDeletePayload {
  id: ID!
}

input RecipeBatchLipidCreateInput {
  weight: Float!
  cost: Float!
  lipidId: ID!
  batchId: ID!
  deletedAt: Int
  updatedAt: Int!
  createdAt: Int!
}

input RecipeBatchLipidUpdateInput {
  weight: Float
  cost: Float
  lipidId: ID
  batchId: ID
  deletedAt: Int
  updatedAt: Int
  createdAt: Int
}

type RecipeBatchLipidPayload {
  recipeBatchLipid: RecipeBatchLipid!
}

type RecipeBatchLipidDeletePayload {
  id: ID!
}

input RecipeBatchLyeCreateInput {
  weight: Float!
  discount: Float!
  cost: Float!
  lyeId: ID!
  batchId: ID!
  updatedAt: Int!
  deletedAt: Int
  createdAt: Int!
}

input RecipeBatchLyeUpdateInput {
  weight: Float
  discount: Float
  cost: Float
  lyeId: ID
  batchId: ID
  updatedAt: Int
  deletedAt: Int
  createdAt: Int
}

type RecipeBatchLyePayload {
  recipeBatchLye: RecipeBatchLye!
}

type RecipeBatchLyeDeletePayload {
  id: ID!
}

input RecipeBatchNoteCreateInput {
  note: String!
  link: String!
  batchId: ID!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int
}

input RecipeBatchNoteUpdateInput {
  note: String
  link: String
  batchId: ID
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type RecipeBatchNotePayload {
  recipeBatchNote: RecipeBatchNote!
}

type RecipeBatchNoteDeletePayload {
  id: ID!
}

input RecipeFragranceCreateInput {
  percentage: Float!
  fragranceId: ID!
  recipeId: ID!
  deletedAt: Int
  createdAt: Int!
  updatedAt: Int!
}

input RecipeFragranceUpdateInput {
  percentage: Float
  fragranceId: ID
  recipeId: ID
  deletedAt: Int
  createdAt: Int
  updatedAt: Int
}

type RecipeFragrancePayload {
  recipeFragrance: RecipeFragrance!
}

type RecipeFragranceDeletePayload {
  id: ID!
}

input RecipeLipidCreateInput {
  percentage: Float!
  lipidId: ID!
  recipeId: ID!
  deletedAt: Int
  updatedAt: Int!
  createdAt: Int!
}

input RecipeLipidUpdateInput {
  percentage: Float
  lipidId: ID
  recipeId: ID
  deletedAt: Int
  updatedAt: Int
  createdAt: Int
}

type RecipeLipidPayload {
  recipeLipid: RecipeLipid!
}

type RecipeLipidDeletePayload {
  id: ID!
}

input RecipeStepCreateInput {
  num: Int!
  note: String!
  recipeId: ID!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int
}

input RecipeStepUpdateInput {
  num: Int
  note: String
  recipeId: ID
  createdAt: Int
  updatedAt: Int
  deletedAt: Int
}

type RecipeStepPayload {
  recipeStep: RecipeStep!
}

type RecipeStepDeletePayload {
  id: ID!
}

input SupplierCreateInput {
  name: String!
  website: String!
  note: String!
  deletedAt: Int
  updatedAt: Int!
  createdAt: Int!
}

input SupplierUpdateInput {
  name: String
  website: String
  note: String
  deletedAt: Int
  updatedAt: Int
  createdAt: Int
}

type SupplierPayload {
  supplier: Supplier!
}

type SupplierDeletePayload {
  id: ID!
}

type Mutation {
  createAdditive(input: AdditiveCreateInput!): AdditivePayload!
  updateAdditive(id: ID!, input: AdditiveUpdateInput!): AdditivePayload!
  deleteAdditive(id: ID!): AdditiveDeletePayload!
  createAdditiveInventory(
    input: AdditiveInventoryCreateInput!
  ): AdditiveInventoryPayload!
  updateAdditiveInventory(
    id: ID!
    input: AdditiveInventoryUpdateInput!
  ): AdditiveInventoryPayload!
  deleteAdditiveInventory(id: ID!): AdditiveInventoryDeletePayload!
  createFragrance(input: FragranceCreateInput!): FragrancePayload!
  updateFragrance(id: ID!, input: FragranceUpdateInput!): FragrancePayload!
  deleteFragrance(id: ID!): FragranceDeletePayload!
  createFragranceInventory(
    input: FragranceInventoryCreateInput!
  ): FragranceInventoryPayload!
  updateFragranceInventory(
    id: ID!
    input: FragranceInventoryUpdateInput!
  ): FragranceInventoryPayload!
  deleteFragranceInventory(id: ID!): FragranceInventoryDeletePayload!
  createLipid(input: LipidCreateInput!): LipidPayload!
  updateLipid(id: ID!, input: LipidUpdateInput!): LipidPayload!
  deleteLipid(id: ID!): LipidDeletePayload!
  createLipidInventory(
    input: LipidInventoryCreateInput!
  ): LipidInventoryPayload!
  updateLipidInventory(
    id: ID!
    input: LipidInventoryUpdateInput!
  ): LipidInventoryPayload!
  deleteLipidInventory(id: ID!): LipidInventoryDeletePayload!
  createLye(input: LyeCreateInput!): LyePayload!
  updateLye(id: ID!, input: LyeUpdateInput!): LyePayload!
  deleteLye(id: ID!): LyeDeletePayload!
  createLyeInventory(input: LyeInventoryCreateInput!): LyeInventoryPayload!
  updateLyeInventory(
    id: ID!
    input: LyeInventoryUpdateInput!
  ): LyeInventoryPayload!
  deleteLyeInventory(id: ID!): LyeInventoryDeletePayload!
  createRecipe(input: RecipeCreateInput!): RecipePayload!
  updateRecipe(id: ID!, input: RecipeUpdateInput!): RecipePayload!
  deleteRecipe(id: ID!): RecipeDeletePayload!
  createRecipeAdditive(
    input: RecipeAdditiveCreateInput!
  ): RecipeAdditivePayload!
  updateRecipeAdditive(
    id: ID!
    input: RecipeAdditiveUpdateInput!
  ): RecipeAdditivePayload!
  deleteRecipeAdditive(id: ID!): RecipeAdditiveDeletePayload!
  createRecipeBatch(input: RecipeBatchCreateInput!): RecipeBatchPayload!
  updateRecipeBatch(
    id: ID!
    input: RecipeBatchUpdateInput!
  ): RecipeBatchPayload!
  deleteRecipeBatch(id: ID!): RecipeBatchDeletePayload!
  createRecipeBatchAdditive(
    input: RecipeBatchAdditiveCreateInput!
  ): RecipeBatchAdditivePayload!
  updateRecipeBatchAdditive(
    id: ID!
    input: RecipeBatchAdditiveUpdateInput!
  ): RecipeBatchAdditivePayload!
  deleteRecipeBatchAdditive(id: ID!): RecipeBatchAdditiveDeletePayload!
  createRecipeBatchFragrance(
    input: RecipeBatchFragranceCreateInput!
  ): RecipeBatchFragrancePayload!
  updateRecipeBatchFragrance(
    id: ID!
    input: RecipeBatchFragranceUpdateInput!
  ): RecipeBatchFragrancePayload!
  deleteRecipeBatchFragrance(id: ID!): RecipeBatchFragranceDeletePayload!
  createRecipeBatchLipid(
    input: RecipeBatchLipidCreateInput!
  ): RecipeBatchLipidPayload!
  updateRecipeBatchLipid(
    id: ID!
    input: RecipeBatchLipidUpdateInput!
  ): RecipeBatchLipidPayload!
  deleteRecipeBatchLipid(id: ID!): RecipeBatchLipidDeletePayload!
  createRecipeBatchLye(
    input: RecipeBatchLyeCreateInput!
  ): RecipeBatchLyePayload!
  updateRecipeBatchLye(
    id: ID!
    input: RecipeBatchLyeUpdateInput!
  ): RecipeBatchLyePayload!
  deleteRecipeBatchLye(id: ID!): RecipeBatchLyeDeletePayload!
  createRecipeBatchNote(
    input: RecipeBatchNoteCreateInput!
  ): RecipeBatchNotePayload!
  updateRecipeBatchNote(
    id: ID!
    input: RecipeBatchNoteUpdateInput!
  ): RecipeBatchNotePayload!
  deleteRecipeBatchNote(id: ID!): RecipeBatchNoteDeletePayload!
  createRecipeFragrance(
    input: RecipeFragranceCreateInput!
  ): RecipeFragrancePayload!
  updateRecipeFragrance(
    id: ID!
    input: RecipeFragranceUpdateInput!
  ): RecipeFragrancePayload!
  deleteRecipeFragrance(id: ID!): RecipeFragranceDeletePayload!
  createRecipeLipid(input: RecipeLipidCreateInput!): RecipeLipidPayload!
  updateRecipeLipid(
    id: ID!
    input: RecipeLipidUpdateInput!
  ): RecipeLipidPayload!
  deleteRecipeLipid(id: ID!): RecipeLipidDeletePayload!
  createRecipeStep(input: RecipeStepCreateInput!): RecipeStepPayload!
  updateRecipeStep(id: ID!, input: RecipeStepUpdateInput!): RecipeStepPayload!
  deleteRecipeStep(id: ID!): RecipeStepDeletePayload!
  createSupplier(input: SupplierCreateInput!): SupplierPayload!
  updateSupplier(id: ID!, input: SupplierUpdateInput!): SupplierPayload!
  deleteSupplier(id: ID!): SupplierDeletePayload!
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Mutation_createAdditiveInventory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gmodels.AdditiveInventoryCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNAdditiveInventoryCreateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditiveInventoryCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createAdditive_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gmodels.AdditiveCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNAdditiveCreateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditiveCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createFragranceInventory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gmodels.FragranceInventoryCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNFragranceInventoryCreateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragranceInventoryCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createFragrance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gmodels.FragranceCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNFragranceCreateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragranceCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createLipidInventory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gmodels.LipidInventoryCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNLipidInventoryCreateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidInventoryCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createLipid_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gmodels.LipidCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNLipidCreateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createLyeInventory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gmodels.LyeInventoryCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNLyeInventoryCreateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyeInventoryCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createLye_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gmodels.LyeCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNLyeCreateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyeCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createRecipeAdditive_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gmodels.RecipeAdditiveCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNRecipeAdditiveCreateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeAdditiveCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createRecipeBatchAdditive_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gmodels.RecipeBatchAdditiveCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNRecipeBatchAdditiveCreateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchAdditiveCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createRecipeBatchFragrance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gmodels.RecipeBatchFragranceCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNRecipeBatchFragranceCreateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchFragranceCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createRecipeBatchLipid_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gmodels.RecipeBatchLipidCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNRecipeBatchLipidCreateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLipidCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createRecipeBatchLye_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gmodels.RecipeBatchLyeCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNRecipeBatchLyeCreateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLyeCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createRecipeBatchNote_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gmodels.RecipeBatchNoteCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNRecipeBatchNoteCreateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchNoteCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createRecipeBatch_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gmodels.RecipeBatchCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNRecipeBatchCreateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createRecipeFragrance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gmodels.RecipeFragranceCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNRecipeFragranceCreateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeFragranceCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createRecipeLipid_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gmodels.RecipeLipidCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNRecipeLipidCreateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeLipidCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createRecipeStep_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gmodels.RecipeStepCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNRecipeStepCreateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeStepCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createRecipe_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gmodels.RecipeCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNRecipeCreateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createSupplier_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 gmodels.SupplierCreateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNSupplierCreateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐSupplierCreateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteAdditiveInventory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteAdditive_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteFragranceInventory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteFragrance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteLipidInventory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteLipid_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteLyeInventory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteLye_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRecipeAdditive_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRecipeBatchAdditive_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRecipeBatchFragrance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRecipeBatchLipid_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRecipeBatchLye_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRecipeBatchNote_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRecipeBatch_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRecipeFragrance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRecipeLipid_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRecipeStep_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRecipe_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteSupplier_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAdditiveInventory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gmodels.AdditiveInventoryUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNAdditiveInventoryUpdateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditiveInventoryUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAdditive_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gmodels.AdditiveUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNAdditiveUpdateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditiveUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateFragranceInventory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gmodels.FragranceInventoryUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNFragranceInventoryUpdateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragranceInventoryUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateFragrance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gmodels.FragranceUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNFragranceUpdateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragranceUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateLipidInventory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gmodels.LipidInventoryUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNLipidInventoryUpdateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidInventoryUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateLipid_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gmodels.LipidUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNLipidUpdateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateLyeInventory_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gmodels.LyeInventoryUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNLyeInventoryUpdateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyeInventoryUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateLye_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gmodels.LyeUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNLyeUpdateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyeUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRecipeAdditive_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gmodels.RecipeAdditiveUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNRecipeAdditiveUpdateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeAdditiveUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRecipeBatchAdditive_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gmodels.RecipeBatchAdditiveUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNRecipeBatchAdditiveUpdateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchAdditiveUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRecipeBatchFragrance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gmodels.RecipeBatchFragranceUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNRecipeBatchFragranceUpdateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchFragranceUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRecipeBatchLipid_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gmodels.RecipeBatchLipidUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNRecipeBatchLipidUpdateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLipidUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRecipeBatchLye_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gmodels.RecipeBatchLyeUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNRecipeBatchLyeUpdateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLyeUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRecipeBatchNote_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gmodels.RecipeBatchNoteUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNRecipeBatchNoteUpdateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchNoteUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRecipeBatch_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gmodels.RecipeBatchUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNRecipeBatchUpdateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRecipeFragrance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gmodels.RecipeFragranceUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNRecipeFragranceUpdateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeFragranceUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRecipeLipid_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gmodels.RecipeLipidUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNRecipeLipidUpdateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeLipidUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRecipeStep_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gmodels.RecipeStepUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNRecipeStepUpdateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeStepUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRecipe_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gmodels.RecipeUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNRecipeUpdateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateSupplier_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 gmodels.SupplierUpdateInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNSupplierUpdateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐSupplierUpdateInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_additive_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_additives_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gmodels.AdditiveFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOAdditiveFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditiveFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_fragrance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_fragrances_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gmodels.FragranceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOFragranceFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragranceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_lipid_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_lipids_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gmodels.LipidFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOLipidFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_lye_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_lyes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gmodels.LyeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOLyeFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_recipeAdditive_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_recipeAdditives_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gmodels.RecipeAdditiveFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalORecipeAdditiveFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeAdditiveFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_recipeBatchAdditive_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_recipeBatchAdditives_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gmodels.RecipeBatchAdditiveFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalORecipeBatchAdditiveFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchAdditiveFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_recipeBatchFragrance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_recipeBatchFragrances_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gmodels.RecipeBatchFragranceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalORecipeBatchFragranceFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchFragranceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_recipeBatchLipid_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_recipeBatchLipids_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gmodels.RecipeBatchLipidFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalORecipeBatchLipidFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLipidFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_recipeBatchLye_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_recipeBatchLyes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gmodels.RecipeBatchLyeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalORecipeBatchLyeFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLyeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_recipeBatchNote_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_recipeBatchNotes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gmodels.RecipeBatchNoteFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalORecipeBatchNoteFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchNoteFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_recipeBatch_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_recipeBatches_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gmodels.RecipeBatchFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalORecipeBatchFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_recipeFragrance_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_recipeFragrances_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gmodels.RecipeFragranceFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalORecipeFragranceFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeFragranceFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_recipeLipid_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_recipeLipids_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gmodels.RecipeLipidFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalORecipeLipidFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeLipidFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_recipeStep_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_recipeSteps_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gmodels.RecipeStepFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalORecipeStepFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeStepFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_recipe_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_recipes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gmodels.RecipeFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalORecipeFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_supplier_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_suppliers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *gmodels.SupplierFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOSupplierFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐSupplierFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Additive_id(ctx context.Context, field graphql.CollectedField, obj *gmodels.Additive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Additive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Additive_name(ctx context.Context, field graphql.CollectedField, obj *gmodels.Additive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Additive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Additive_note(ctx context.Context, field graphql.CollectedField, obj *gmodels.Additive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Additive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Additive_createdAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.Additive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Additive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Additive_updatedAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.Additive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Additive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Additive_deletedAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.Additive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Additive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Additive_inventory(ctx context.Context, field graphql.CollectedField, obj *gmodels.Additive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Additive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Inventory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*gmodels.AdditiveInventory)
	fc.Result = res
	return ec.marshalOAdditiveInventory2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditiveInventory(ctx, field.Selections, res)
}

func (ec *executionContext) _AdditiveDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *gmodels.AdditiveDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdditiveDeletePayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AdditiveInventory_id(ctx context.Context, field graphql.CollectedField, obj *gmodels.AdditiveInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdditiveInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AdditiveInventory_purchaseDate(ctx context.Context, field graphql.CollectedField, obj *gmodels.AdditiveInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdditiveInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PurchaseDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _AdditiveInventory_expiryDate(ctx context.Context, field graphql.CollectedField, obj *gmodels.AdditiveInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdditiveInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiryDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _AdditiveInventory_cost(ctx context.Context, field graphql.CollectedField, obj *gmodels.AdditiveInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdditiveInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _AdditiveInventory_weight(ctx context.Context, field graphql.CollectedField, obj *gmodels.AdditiveInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdditiveInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _AdditiveInventory_additive(ctx context.Context, field graphql.CollectedField, obj *gmodels.AdditiveInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdditiveInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Additive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.Additive)
	fc.Result = res
	return ec.marshalNAdditive2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditive(ctx, field.Selections, res)
}

func (ec *executionContext) _AdditiveInventory_supplier(ctx context.Context, field graphql.CollectedField, obj *gmodels.AdditiveInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdditiveInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Supplier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.Supplier)
	fc.Result = res
	return ec.marshalNSupplier2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐSupplier(ctx, field.Selections, res)
}

func (ec *executionContext) _AdditiveInventory_updatedAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.AdditiveInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdditiveInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _AdditiveInventory_deletedAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.AdditiveInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdditiveInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AdditiveInventory_createdAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.AdditiveInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdditiveInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _AdditiveInventoryDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *gmodels.AdditiveInventoryDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdditiveInventoryDeletePayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AdditiveInventoryPayload_additiveInventory(ctx context.Context, field graphql.CollectedField, obj *gmodels.AdditiveInventoryPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdditiveInventoryPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdditiveInventory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.AdditiveInventory)
	fc.Result = res
	return ec.marshalNAdditiveInventory2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditiveInventory(ctx, field.Selections, res)
}

func (ec *executionContext) _AdditivePayload_additive(ctx context.Context, field graphql.CollectedField, obj *gmodels.AdditivePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AdditivePayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Additive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.Additive)
	fc.Result = res
	return ec.marshalNAdditive2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditive(ctx, field.Selections, res)
}

func (ec *executionContext) _Fragrance_id(ctx context.Context, field graphql.CollectedField, obj *gmodels.Fragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Fragrance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Fragrance_name(ctx context.Context, field graphql.CollectedField, obj *gmodels.Fragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Fragrance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Fragrance_note(ctx context.Context, field graphql.CollectedField, obj *gmodels.Fragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Fragrance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Fragrance_createdAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.Fragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Fragrance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Fragrance_deletedAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.Fragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Fragrance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Fragrance_updatedAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.Fragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Fragrance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Fragrance_inventory(ctx context.Context, field graphql.CollectedField, obj *gmodels.Fragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Fragrance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Inventory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*gmodels.FragranceInventory)
	fc.Result = res
	return ec.marshalOFragranceInventory2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragranceInventory(ctx, field.Selections, res)
}

func (ec *executionContext) _FragranceDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *gmodels.FragranceDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FragranceDeletePayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FragranceInventory_id(ctx context.Context, field graphql.CollectedField, obj *gmodels.FragranceInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FragranceInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FragranceInventory_purchaseDate(ctx context.Context, field graphql.CollectedField, obj *gmodels.FragranceInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FragranceInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PurchaseDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _FragranceInventory_expiryDate(ctx context.Context, field graphql.CollectedField, obj *gmodels.FragranceInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FragranceInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiryDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _FragranceInventory_cost(ctx context.Context, field graphql.CollectedField, obj *gmodels.FragranceInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FragranceInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _FragranceInventory_weight(ctx context.Context, field graphql.CollectedField, obj *gmodels.FragranceInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FragranceInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _FragranceInventory_fragrance(ctx context.Context, field graphql.CollectedField, obj *gmodels.FragranceInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FragranceInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fragrance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.Fragrance)
	fc.Result = res
	return ec.marshalNFragrance2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragrance(ctx, field.Selections, res)
}

func (ec *executionContext) _FragranceInventory_supplier(ctx context.Context, field graphql.CollectedField, obj *gmodels.FragranceInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FragranceInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Supplier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.Supplier)
	fc.Result = res
	return ec.marshalNSupplier2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐSupplier(ctx, field.Selections, res)
}

func (ec *executionContext) _FragranceInventory_deletedAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.FragranceInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FragranceInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _FragranceInventory_createdAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.FragranceInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FragranceInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _FragranceInventory_updatedAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.FragranceInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FragranceInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _FragranceInventoryDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *gmodels.FragranceInventoryDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FragranceInventoryDeletePayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FragranceInventoryPayload_fragranceInventory(ctx context.Context, field graphql.CollectedField, obj *gmodels.FragranceInventoryPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FragranceInventoryPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FragranceInventory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.FragranceInventory)
	fc.Result = res
	return ec.marshalNFragranceInventory2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragranceInventory(ctx, field.Selections, res)
}

func (ec *executionContext) _FragrancePayload_fragrance(ctx context.Context, field graphql.CollectedField, obj *gmodels.FragrancePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FragrancePayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fragrance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.Fragrance)
	fc.Result = res
	return ec.marshalNFragrance2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragrance(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_id(ctx context.Context, field graphql.CollectedField, obj *gmodels.Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lipid",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_name(ctx context.Context, field graphql.CollectedField, obj *gmodels.Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lipid",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_lauric(ctx context.Context, field graphql.CollectedField, obj *gmodels.Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lipid",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lauric, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_myristic(ctx context.Context, field graphql.CollectedField, obj *gmodels.Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lipid",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Myristic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_palmitic(ctx context.Context, field graphql.CollectedField, obj *gmodels.Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lipid",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Palmitic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_stearic(ctx context.Context, field graphql.CollectedField, obj *gmodels.Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lipid",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stearic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_ricinoleic(ctx context.Context, field graphql.CollectedField, obj *gmodels.Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lipid",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ricinoleic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_oleic(ctx context.Context, field graphql.CollectedField, obj *gmodels.Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lipid",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Oleic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_linoleic(ctx context.Context, field graphql.CollectedField, obj *gmodels.Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lipid",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Linoleic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_linolenic(ctx context.Context, field graphql.CollectedField, obj *gmodels.Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lipid",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Linolenic, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_hardness(ctx context.Context, field graphql.CollectedField, obj *gmodels.Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lipid",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hardness, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_cleansing(ctx context.Context, field graphql.CollectedField, obj *gmodels.Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lipid",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cleansing, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_conditioning(ctx context.Context, field graphql.CollectedField, obj *gmodels.Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lipid",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Conditioning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_bubbly(ctx context.Context, field graphql.CollectedField, obj *gmodels.Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lipid",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Bubbly, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_creamy(ctx context.Context, field graphql.CollectedField, obj *gmodels.Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lipid",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creamy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_iodine(ctx context.Context, field graphql.CollectedField, obj *gmodels.Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lipid",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Iodine, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_ins(ctx context.Context, field graphql.CollectedField, obj *gmodels.Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lipid",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ins, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_inciName(ctx context.Context, field graphql.CollectedField, obj *gmodels.Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lipid",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InciName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_family(ctx context.Context, field graphql.CollectedField, obj *gmodels.Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lipid",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Family, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_naoh(ctx context.Context, field graphql.CollectedField, obj *gmodels.Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lipid",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Naoh, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_deletedAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lipid",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_createdAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lipid",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_updatedAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lipid",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Lipid_inventory(ctx context.Context, field graphql.CollectedField, obj *gmodels.Lipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lipid",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Inventory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*gmodels.LipidInventory)
	fc.Result = res
	return ec.marshalOLipidInventory2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidInventory(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *gmodels.LipidDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LipidDeletePayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidInventory_id(ctx context.Context, field graphql.CollectedField, obj *gmodels.LipidInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LipidInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidInventory_purchaseDate(ctx context.Context, field graphql.CollectedField, obj *gmodels.LipidInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LipidInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PurchaseDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidInventory_expiryDate(ctx context.Context, field graphql.CollectedField, obj *gmodels.LipidInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LipidInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiryDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidInventory_cost(ctx context.Context, field graphql.CollectedField, obj *gmodels.LipidInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LipidInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidInventory_weight(ctx context.Context, field graphql.CollectedField, obj *gmodels.LipidInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LipidInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidInventory_sap(ctx context.Context, field graphql.CollectedField, obj *gmodels.LipidInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LipidInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sap, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidInventory_naoh(ctx context.Context, field graphql.CollectedField, obj *gmodels.LipidInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LipidInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Naoh, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidInventory_koh(ctx context.Context, field graphql.CollectedField, obj *gmodels.LipidInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LipidInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Koh, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidInventory_gramsPerLiter(ctx context.Context, field graphql.CollectedField, obj *gmodels.LipidInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LipidInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GramsPerLiter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidInventory_lipid(ctx context.Context, field graphql.CollectedField, obj *gmodels.LipidInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LipidInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lipid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.Lipid)
	fc.Result = res
	return ec.marshalNLipid2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipid(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidInventory_supplier(ctx context.Context, field graphql.CollectedField, obj *gmodels.LipidInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LipidInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Supplier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.Supplier)
	fc.Result = res
	return ec.marshalNSupplier2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐSupplier(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidInventory_createdAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.LipidInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LipidInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidInventory_deletedAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.LipidInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LipidInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidInventory_updatedAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.LipidInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LipidInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidInventoryDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *gmodels.LipidInventoryDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LipidInventoryDeletePayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidInventoryPayload_lipidInventory(ctx context.Context, field graphql.CollectedField, obj *gmodels.LipidInventoryPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LipidInventoryPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LipidInventory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.LipidInventory)
	fc.Result = res
	return ec.marshalNLipidInventory2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidInventory(ctx, field.Selections, res)
}

func (ec *executionContext) _LipidPayload_lipid(ctx context.Context, field graphql.CollectedField, obj *gmodels.LipidPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LipidPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lipid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.Lipid)
	fc.Result = res
	return ec.marshalNLipid2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipid(ctx, field.Selections, res)
}

func (ec *executionContext) _Lye_id(ctx context.Context, field graphql.CollectedField, obj *gmodels.Lye) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lye",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Lye_kind(ctx context.Context, field graphql.CollectedField, obj *gmodels.Lye) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lye",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Lye_name(ctx context.Context, field graphql.CollectedField, obj *gmodels.Lye) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lye",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Lye_note(ctx context.Context, field graphql.CollectedField, obj *gmodels.Lye) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lye",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Lye_deletedAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.Lye) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lye",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Lye_updatedAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.Lye) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lye",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Lye_createdAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.Lye) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lye",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Lye_inventory(ctx context.Context, field graphql.CollectedField, obj *gmodels.Lye) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Lye",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Inventory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*gmodels.LyeInventory)
	fc.Result = res
	return ec.marshalOLyeInventory2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyeInventory(ctx, field.Selections, res)
}

func (ec *executionContext) _LyeDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *gmodels.LyeDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LyeDeletePayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _LyeInventory_id(ctx context.Context, field graphql.CollectedField, obj *gmodels.LyeInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LyeInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _LyeInventory_purchaseDate(ctx context.Context, field graphql.CollectedField, obj *gmodels.LyeInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LyeInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PurchaseDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _LyeInventory_expiryDate(ctx context.Context, field graphql.CollectedField, obj *gmodels.LyeInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LyeInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpiryDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _LyeInventory_cost(ctx context.Context, field graphql.CollectedField, obj *gmodels.LyeInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LyeInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _LyeInventory_weight(ctx context.Context, field graphql.CollectedField, obj *gmodels.LyeInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LyeInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _LyeInventory_concentration(ctx context.Context, field graphql.CollectedField, obj *gmodels.LyeInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LyeInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Concentration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _LyeInventory_lye(ctx context.Context, field graphql.CollectedField, obj *gmodels.LyeInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LyeInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lye, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.Lye)
	fc.Result = res
	return ec.marshalNLye2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLye(ctx, field.Selections, res)
}

func (ec *executionContext) _LyeInventory_supplier(ctx context.Context, field graphql.CollectedField, obj *gmodels.LyeInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LyeInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Supplier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.Supplier)
	fc.Result = res
	return ec.marshalNSupplier2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐSupplier(ctx, field.Selections, res)
}

func (ec *executionContext) _LyeInventory_deletedAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.LyeInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LyeInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _LyeInventory_createdAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.LyeInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LyeInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _LyeInventory_updatedAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.LyeInventory) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LyeInventory",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _LyeInventoryDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *gmodels.LyeInventoryDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LyeInventoryDeletePayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _LyeInventoryPayload_lyeInventory(ctx context.Context, field graphql.CollectedField, obj *gmodels.LyeInventoryPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LyeInventoryPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LyeInventory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.LyeInventory)
	fc.Result = res
	return ec.marshalNLyeInventory2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyeInventory(ctx, field.Selections, res)
}

func (ec *executionContext) _LyePayload_lye(ctx context.Context, field graphql.CollectedField, obj *gmodels.LyePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LyePayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lye, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.Lye)
	fc.Result = res
	return ec.marshalNLye2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLye(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createAdditive(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createAdditive_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateAdditive(rctx, args["input"].(gmodels.AdditiveCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.AdditivePayload)
	fc.Result = res
	return ec.marshalNAdditivePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditivePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateAdditive(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateAdditive_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateAdditive(rctx, args["id"].(string), args["input"].(gmodels.AdditiveUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.AdditivePayload)
	fc.Result = res
	return ec.marshalNAdditivePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditivePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAdditive(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteAdditive_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAdditive(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.AdditiveDeletePayload)
	fc.Result = res
	return ec.marshalNAdditiveDeletePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditiveDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createAdditiveInventory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createAdditiveInventory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateAdditiveInventory(rctx, args["input"].(gmodels.AdditiveInventoryCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.AdditiveInventoryPayload)
	fc.Result = res
	return ec.marshalNAdditiveInventoryPayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditiveInventoryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateAdditiveInventory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateAdditiveInventory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateAdditiveInventory(rctx, args["id"].(string), args["input"].(gmodels.AdditiveInventoryUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.AdditiveInventoryPayload)
	fc.Result = res
	return ec.marshalNAdditiveInventoryPayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditiveInventoryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAdditiveInventory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteAdditiveInventory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAdditiveInventory(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.AdditiveInventoryDeletePayload)
	fc.Result = res
	return ec.marshalNAdditiveInventoryDeletePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditiveInventoryDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createFragrance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createFragrance_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateFragrance(rctx, args["input"].(gmodels.FragranceCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.FragrancePayload)
	fc.Result = res
	return ec.marshalNFragrancePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragrancePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateFragrance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateFragrance_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateFragrance(rctx, args["id"].(string), args["input"].(gmodels.FragranceUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.FragrancePayload)
	fc.Result = res
	return ec.marshalNFragrancePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragrancePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteFragrance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteFragrance_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteFragrance(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.FragranceDeletePayload)
	fc.Result = res
	return ec.marshalNFragranceDeletePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragranceDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createFragranceInventory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createFragranceInventory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateFragranceInventory(rctx, args["input"].(gmodels.FragranceInventoryCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.FragranceInventoryPayload)
	fc.Result = res
	return ec.marshalNFragranceInventoryPayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragranceInventoryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateFragranceInventory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateFragranceInventory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateFragranceInventory(rctx, args["id"].(string), args["input"].(gmodels.FragranceInventoryUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.FragranceInventoryPayload)
	fc.Result = res
	return ec.marshalNFragranceInventoryPayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragranceInventoryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteFragranceInventory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteFragranceInventory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteFragranceInventory(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.FragranceInventoryDeletePayload)
	fc.Result = res
	return ec.marshalNFragranceInventoryDeletePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragranceInventoryDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createLipid(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createLipid_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateLipid(rctx, args["input"].(gmodels.LipidCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.LipidPayload)
	fc.Result = res
	return ec.marshalNLipidPayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateLipid(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateLipid_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateLipid(rctx, args["id"].(string), args["input"].(gmodels.LipidUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.LipidPayload)
	fc.Result = res
	return ec.marshalNLipidPayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteLipid(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteLipid_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteLipid(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.LipidDeletePayload)
	fc.Result = res
	return ec.marshalNLipidDeletePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createLipidInventory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createLipidInventory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateLipidInventory(rctx, args["input"].(gmodels.LipidInventoryCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.LipidInventoryPayload)
	fc.Result = res
	return ec.marshalNLipidInventoryPayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidInventoryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateLipidInventory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateLipidInventory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateLipidInventory(rctx, args["id"].(string), args["input"].(gmodels.LipidInventoryUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.LipidInventoryPayload)
	fc.Result = res
	return ec.marshalNLipidInventoryPayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidInventoryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteLipidInventory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteLipidInventory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteLipidInventory(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.LipidInventoryDeletePayload)
	fc.Result = res
	return ec.marshalNLipidInventoryDeletePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidInventoryDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createLye(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createLye_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateLye(rctx, args["input"].(gmodels.LyeCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.LyePayload)
	fc.Result = res
	return ec.marshalNLyePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateLye(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateLye_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateLye(rctx, args["id"].(string), args["input"].(gmodels.LyeUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.LyePayload)
	fc.Result = res
	return ec.marshalNLyePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteLye(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteLye_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteLye(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.LyeDeletePayload)
	fc.Result = res
	return ec.marshalNLyeDeletePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyeDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createLyeInventory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createLyeInventory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateLyeInventory(rctx, args["input"].(gmodels.LyeInventoryCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.LyeInventoryPayload)
	fc.Result = res
	return ec.marshalNLyeInventoryPayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyeInventoryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateLyeInventory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateLyeInventory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateLyeInventory(rctx, args["id"].(string), args["input"].(gmodels.LyeInventoryUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.LyeInventoryPayload)
	fc.Result = res
	return ec.marshalNLyeInventoryPayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyeInventoryPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteLyeInventory(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteLyeInventory_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteLyeInventory(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.LyeInventoryDeletePayload)
	fc.Result = res
	return ec.marshalNLyeInventoryDeletePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyeInventoryDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createRecipe(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createRecipe_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateRecipe(rctx, args["input"].(gmodels.RecipeCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipePayload)
	fc.Result = res
	return ec.marshalNRecipePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRecipe(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRecipe_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRecipe(rctx, args["id"].(string), args["input"].(gmodels.RecipeUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipePayload)
	fc.Result = res
	return ec.marshalNRecipePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteRecipe(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteRecipe_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteRecipe(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeDeletePayload)
	fc.Result = res
	return ec.marshalNRecipeDeletePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createRecipeAdditive(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createRecipeAdditive_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateRecipeAdditive(rctx, args["input"].(gmodels.RecipeAdditiveCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeAdditivePayload)
	fc.Result = res
	return ec.marshalNRecipeAdditivePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeAdditivePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRecipeAdditive(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRecipeAdditive_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRecipeAdditive(rctx, args["id"].(string), args["input"].(gmodels.RecipeAdditiveUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeAdditivePayload)
	fc.Result = res
	return ec.marshalNRecipeAdditivePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeAdditivePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteRecipeAdditive(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteRecipeAdditive_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteRecipeAdditive(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeAdditiveDeletePayload)
	fc.Result = res
	return ec.marshalNRecipeAdditiveDeletePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeAdditiveDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createRecipeBatch(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createRecipeBatch_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateRecipeBatch(rctx, args["input"].(gmodels.RecipeBatchCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeBatchPayload)
	fc.Result = res
	return ec.marshalNRecipeBatchPayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRecipeBatch(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRecipeBatch_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRecipeBatch(rctx, args["id"].(string), args["input"].(gmodels.RecipeBatchUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeBatchPayload)
	fc.Result = res
	return ec.marshalNRecipeBatchPayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteRecipeBatch(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteRecipeBatch_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteRecipeBatch(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeBatchDeletePayload)
	fc.Result = res
	return ec.marshalNRecipeBatchDeletePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createRecipeBatchAdditive(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createRecipeBatchAdditive_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateRecipeBatchAdditive(rctx, args["input"].(gmodels.RecipeBatchAdditiveCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeBatchAdditivePayload)
	fc.Result = res
	return ec.marshalNRecipeBatchAdditivePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchAdditivePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRecipeBatchAdditive(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRecipeBatchAdditive_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRecipeBatchAdditive(rctx, args["id"].(string), args["input"].(gmodels.RecipeBatchAdditiveUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeBatchAdditivePayload)
	fc.Result = res
	return ec.marshalNRecipeBatchAdditivePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchAdditivePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteRecipeBatchAdditive(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteRecipeBatchAdditive_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteRecipeBatchAdditive(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeBatchAdditiveDeletePayload)
	fc.Result = res
	return ec.marshalNRecipeBatchAdditiveDeletePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchAdditiveDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createRecipeBatchFragrance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createRecipeBatchFragrance_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateRecipeBatchFragrance(rctx, args["input"].(gmodels.RecipeBatchFragranceCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeBatchFragrancePayload)
	fc.Result = res
	return ec.marshalNRecipeBatchFragrancePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchFragrancePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRecipeBatchFragrance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRecipeBatchFragrance_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRecipeBatchFragrance(rctx, args["id"].(string), args["input"].(gmodels.RecipeBatchFragranceUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeBatchFragrancePayload)
	fc.Result = res
	return ec.marshalNRecipeBatchFragrancePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchFragrancePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteRecipeBatchFragrance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteRecipeBatchFragrance_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteRecipeBatchFragrance(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeBatchFragranceDeletePayload)
	fc.Result = res
	return ec.marshalNRecipeBatchFragranceDeletePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchFragranceDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createRecipeBatchLipid(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createRecipeBatchLipid_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateRecipeBatchLipid(rctx, args["input"].(gmodels.RecipeBatchLipidCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeBatchLipidPayload)
	fc.Result = res
	return ec.marshalNRecipeBatchLipidPayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLipidPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRecipeBatchLipid(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRecipeBatchLipid_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRecipeBatchLipid(rctx, args["id"].(string), args["input"].(gmodels.RecipeBatchLipidUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeBatchLipidPayload)
	fc.Result = res
	return ec.marshalNRecipeBatchLipidPayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLipidPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteRecipeBatchLipid(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteRecipeBatchLipid_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteRecipeBatchLipid(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeBatchLipidDeletePayload)
	fc.Result = res
	return ec.marshalNRecipeBatchLipidDeletePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLipidDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createRecipeBatchLye(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createRecipeBatchLye_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateRecipeBatchLye(rctx, args["input"].(gmodels.RecipeBatchLyeCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeBatchLyePayload)
	fc.Result = res
	return ec.marshalNRecipeBatchLyePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLyePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRecipeBatchLye(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRecipeBatchLye_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRecipeBatchLye(rctx, args["id"].(string), args["input"].(gmodels.RecipeBatchLyeUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeBatchLyePayload)
	fc.Result = res
	return ec.marshalNRecipeBatchLyePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLyePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteRecipeBatchLye(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteRecipeBatchLye_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteRecipeBatchLye(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeBatchLyeDeletePayload)
	fc.Result = res
	return ec.marshalNRecipeBatchLyeDeletePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLyeDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createRecipeBatchNote(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createRecipeBatchNote_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateRecipeBatchNote(rctx, args["input"].(gmodels.RecipeBatchNoteCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeBatchNotePayload)
	fc.Result = res
	return ec.marshalNRecipeBatchNotePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchNotePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRecipeBatchNote(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRecipeBatchNote_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRecipeBatchNote(rctx, args["id"].(string), args["input"].(gmodels.RecipeBatchNoteUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeBatchNotePayload)
	fc.Result = res
	return ec.marshalNRecipeBatchNotePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchNotePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteRecipeBatchNote(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteRecipeBatchNote_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteRecipeBatchNote(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeBatchNoteDeletePayload)
	fc.Result = res
	return ec.marshalNRecipeBatchNoteDeletePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchNoteDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createRecipeFragrance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createRecipeFragrance_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateRecipeFragrance(rctx, args["input"].(gmodels.RecipeFragranceCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeFragrancePayload)
	fc.Result = res
	return ec.marshalNRecipeFragrancePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeFragrancePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRecipeFragrance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRecipeFragrance_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRecipeFragrance(rctx, args["id"].(string), args["input"].(gmodels.RecipeFragranceUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeFragrancePayload)
	fc.Result = res
	return ec.marshalNRecipeFragrancePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeFragrancePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteRecipeFragrance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteRecipeFragrance_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteRecipeFragrance(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeFragranceDeletePayload)
	fc.Result = res
	return ec.marshalNRecipeFragranceDeletePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeFragranceDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createRecipeLipid(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createRecipeLipid_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateRecipeLipid(rctx, args["input"].(gmodels.RecipeLipidCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeLipidPayload)
	fc.Result = res
	return ec.marshalNRecipeLipidPayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeLipidPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRecipeLipid(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRecipeLipid_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRecipeLipid(rctx, args["id"].(string), args["input"].(gmodels.RecipeLipidUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeLipidPayload)
	fc.Result = res
	return ec.marshalNRecipeLipidPayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeLipidPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteRecipeLipid(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteRecipeLipid_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteRecipeLipid(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeLipidDeletePayload)
	fc.Result = res
	return ec.marshalNRecipeLipidDeletePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeLipidDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createRecipeStep(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createRecipeStep_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateRecipeStep(rctx, args["input"].(gmodels.RecipeStepCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeStepPayload)
	fc.Result = res
	return ec.marshalNRecipeStepPayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeStepPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRecipeStep(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRecipeStep_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRecipeStep(rctx, args["id"].(string), args["input"].(gmodels.RecipeStepUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeStepPayload)
	fc.Result = res
	return ec.marshalNRecipeStepPayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeStepPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteRecipeStep(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteRecipeStep_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteRecipeStep(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeStepDeletePayload)
	fc.Result = res
	return ec.marshalNRecipeStepDeletePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeStepDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createSupplier(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createSupplier_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateSupplier(rctx, args["input"].(gmodels.SupplierCreateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.SupplierPayload)
	fc.Result = res
	return ec.marshalNSupplierPayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐSupplierPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateSupplier(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateSupplier_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateSupplier(rctx, args["id"].(string), args["input"].(gmodels.SupplierUpdateInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.SupplierPayload)
	fc.Result = res
	return ec.marshalNSupplierPayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐSupplierPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteSupplier(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteSupplier_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteSupplier(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.SupplierDeletePayload)
	fc.Result = res
	return ec.marshalNSupplierDeletePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐSupplierDeletePayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_additive(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_additive_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Additive(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.Additive)
	fc.Result = res
	return ec.marshalNAdditive2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditive(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_additives(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_additives_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Additives(rctx, args["filter"].(*gmodels.AdditiveFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gmodels.Additive)
	fc.Result = res
	return ec.marshalNAdditive2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_fragrance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_fragrance_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Fragrance(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.Fragrance)
	fc.Result = res
	return ec.marshalNFragrance2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragrance(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_fragrances(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_fragrances_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Fragrances(rctx, args["filter"].(*gmodels.FragranceFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gmodels.Fragrance)
	fc.Result = res
	return ec.marshalNFragrance2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragranceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_lipid(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_lipid_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Lipid(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.Lipid)
	fc.Result = res
	return ec.marshalNLipid2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipid(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_lipids(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_lipids_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Lipids(rctx, args["filter"].(*gmodels.LipidFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gmodels.Lipid)
	fc.Result = res
	return ec.marshalNLipid2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_lye(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_lye_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Lye(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.Lye)
	fc.Result = res
	return ec.marshalNLye2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLye(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_lyes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_lyes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Lyes(rctx, args["filter"].(*gmodels.LyeFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gmodels.Lye)
	fc.Result = res
	return ec.marshalNLye2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipe(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipe_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Recipe(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.Recipe)
	fc.Result = res
	return ec.marshalNRecipe2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipe(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Recipes(rctx, args["filter"].(*gmodels.RecipeFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gmodels.Recipe)
	fc.Result = res
	return ec.marshalNRecipe2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipeAdditive(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipeAdditive_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RecipeAdditive(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeAdditive)
	fc.Result = res
	return ec.marshalNRecipeAdditive2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeAdditive(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipeAdditives(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipeAdditives_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RecipeAdditives(rctx, args["filter"].(*gmodels.RecipeAdditiveFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gmodels.RecipeAdditive)
	fc.Result = res
	return ec.marshalNRecipeAdditive2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeAdditiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipeBatch(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipeBatch_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RecipeBatch(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeBatch)
	fc.Result = res
	return ec.marshalNRecipeBatch2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatch(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipeBatches(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipeBatches_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RecipeBatches(rctx, args["filter"].(*gmodels.RecipeBatchFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gmodels.RecipeBatch)
	fc.Result = res
	return ec.marshalNRecipeBatch2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipeBatchAdditive(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipeBatchAdditive_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RecipeBatchAdditive(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeBatchAdditive)
	fc.Result = res
	return ec.marshalNRecipeBatchAdditive2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchAdditive(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipeBatchAdditives(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipeBatchAdditives_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RecipeBatchAdditives(rctx, args["filter"].(*gmodels.RecipeBatchAdditiveFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gmodels.RecipeBatchAdditive)
	fc.Result = res
	return ec.marshalNRecipeBatchAdditive2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchAdditiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipeBatchFragrance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipeBatchFragrance_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RecipeBatchFragrance(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeBatchFragrance)
	fc.Result = res
	return ec.marshalNRecipeBatchFragrance2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchFragrance(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipeBatchFragrances(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipeBatchFragrances_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RecipeBatchFragrances(rctx, args["filter"].(*gmodels.RecipeBatchFragranceFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gmodels.RecipeBatchFragrance)
	fc.Result = res
	return ec.marshalNRecipeBatchFragrance2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchFragranceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipeBatchLipid(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipeBatchLipid_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RecipeBatchLipid(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeBatchLipid)
	fc.Result = res
	return ec.marshalNRecipeBatchLipid2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLipid(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipeBatchLipids(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipeBatchLipids_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RecipeBatchLipids(rctx, args["filter"].(*gmodels.RecipeBatchLipidFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gmodels.RecipeBatchLipid)
	fc.Result = res
	return ec.marshalNRecipeBatchLipid2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLipidᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipeBatchLye(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipeBatchLye_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RecipeBatchLye(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeBatchLye)
	fc.Result = res
	return ec.marshalNRecipeBatchLye2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLye(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipeBatchLyes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipeBatchLyes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RecipeBatchLyes(rctx, args["filter"].(*gmodels.RecipeBatchLyeFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gmodels.RecipeBatchLye)
	fc.Result = res
	return ec.marshalNRecipeBatchLye2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLyeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipeBatchNote(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipeBatchNote_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RecipeBatchNote(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeBatchNote)
	fc.Result = res
	return ec.marshalNRecipeBatchNote2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchNote(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipeBatchNotes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipeBatchNotes_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RecipeBatchNotes(rctx, args["filter"].(*gmodels.RecipeBatchNoteFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gmodels.RecipeBatchNote)
	fc.Result = res
	return ec.marshalNRecipeBatchNote2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchNoteᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipeFragrance(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipeFragrance_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RecipeFragrance(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeFragrance)
	fc.Result = res
	return ec.marshalNRecipeFragrance2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeFragrance(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipeFragrances(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipeFragrances_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RecipeFragrances(rctx, args["filter"].(*gmodels.RecipeFragranceFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gmodels.RecipeFragrance)
	fc.Result = res
	return ec.marshalNRecipeFragrance2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeFragranceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipeLipid(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipeLipid_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RecipeLipid(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeLipid)
	fc.Result = res
	return ec.marshalNRecipeLipid2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeLipid(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipeLipids(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipeLipids_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RecipeLipids(rctx, args["filter"].(*gmodels.RecipeLipidFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gmodels.RecipeLipid)
	fc.Result = res
	return ec.marshalNRecipeLipid2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeLipidᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipeStep(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipeStep_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RecipeStep(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeStep)
	fc.Result = res
	return ec.marshalNRecipeStep2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeStep(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_recipeSteps(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_recipeSteps_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RecipeSteps(rctx, args["filter"].(*gmodels.RecipeStepFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gmodels.RecipeStep)
	fc.Result = res
	return ec.marshalNRecipeStep2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeStepᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_supplier(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_supplier_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Supplier(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.Supplier)
	fc.Result = res
	return ec.marshalNSupplier2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐSupplier(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_suppliers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_suppliers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Suppliers(rctx, args["filter"].(*gmodels.SupplierFilter))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*gmodels.Supplier)
	fc.Result = res
	return ec.marshalNSupplier2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐSupplierᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _Recipe_id(ctx context.Context, field graphql.CollectedField, obj *gmodels.Recipe) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Recipe",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Recipe_name(ctx context.Context, field graphql.CollectedField, obj *gmodels.Recipe) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Recipe",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Recipe_note(ctx context.Context, field graphql.CollectedField, obj *gmodels.Recipe) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Recipe",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Recipe_deletedAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.Recipe) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Recipe",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Recipe_createdAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.Recipe) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Recipe",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Recipe_updatedAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.Recipe) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Recipe",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Recipe_additives(ctx context.Context, field graphql.CollectedField, obj *gmodels.Recipe) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Recipe",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Additives, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*gmodels.RecipeAdditive)
	fc.Result = res
	return ec.marshalORecipeAdditive2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeAdditive(ctx, field.Selections, res)
}

func (ec *executionContext) _Recipe_batches(ctx context.Context, field graphql.CollectedField, obj *gmodels.Recipe) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Recipe",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Batches, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*gmodels.RecipeBatch)
	fc.Result = res
	return ec.marshalORecipeBatch2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatch(ctx, field.Selections, res)
}

func (ec *executionContext) _Recipe_fragrances(ctx context.Context, field graphql.CollectedField, obj *gmodels.Recipe) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Recipe",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fragrances, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*gmodels.RecipeFragrance)
	fc.Result = res
	return ec.marshalORecipeFragrance2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeFragrance(ctx, field.Selections, res)
}

func (ec *executionContext) _Recipe_lipids(ctx context.Context, field graphql.CollectedField, obj *gmodels.Recipe) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Recipe",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lipids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*gmodels.RecipeLipid)
	fc.Result = res
	return ec.marshalORecipeLipid2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeLipid(ctx, field.Selections, res)
}

func (ec *executionContext) _Recipe_steps(ctx context.Context, field graphql.CollectedField, obj *gmodels.Recipe) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Recipe",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Steps, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*gmodels.RecipeStep)
	fc.Result = res
	return ec.marshalORecipeStep2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeStep(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeAdditive_id(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeAdditive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeAdditive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeAdditive_percentage(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeAdditive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeAdditive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Percentage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeAdditive_additive(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeAdditive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeAdditive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Additive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.Additive)
	fc.Result = res
	return ec.marshalNAdditive2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditive(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeAdditive_recipe(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeAdditive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeAdditive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Recipe, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.Recipe)
	fc.Result = res
	return ec.marshalNRecipe2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipe(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeAdditive_deletedAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeAdditive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeAdditive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeAdditive_createdAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeAdditive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeAdditive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeAdditive_updatedAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeAdditive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeAdditive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeAdditiveDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeAdditiveDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeAdditiveDeletePayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeAdditivePayload_recipeAdditive(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeAdditivePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeAdditivePayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecipeAdditive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeAdditive)
	fc.Result = res
	return ec.marshalNRecipeAdditive2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeAdditive(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatch_id(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatch",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatch_tag(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatch",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatch_productionDate(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatch",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductionDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatch_sellableDate(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatch",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SellableDate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatch_note(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatch",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatch_lipidWeight(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatch",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LipidWeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatch_productionWeight(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatch",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductionWeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatch_curedWeight(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatch",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CuredWeight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatch_recipe(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatch",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Recipe, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.Recipe)
	fc.Result = res
	return ec.marshalNRecipe2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipe(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatch_deletedAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatch",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatch_updatedAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatch",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatch_createdAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatch",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatch_additives(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatch",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Additives, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*gmodels.RecipeBatchAdditive)
	fc.Result = res
	return ec.marshalORecipeBatchAdditive2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchAdditive(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatch_fragrances(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatch",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fragrances, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*gmodels.RecipeBatchFragrance)
	fc.Result = res
	return ec.marshalORecipeBatchFragrance2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchFragrance(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatch_lipids(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatch",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lipids, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*gmodels.RecipeBatchLipid)
	fc.Result = res
	return ec.marshalORecipeBatchLipid2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLipid(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatch_lye(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatch",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lye, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*gmodels.RecipeBatchLye)
	fc.Result = res
	return ec.marshalORecipeBatchLye2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLye(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatch_notes(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatch) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatch",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Notes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*gmodels.RecipeBatchNote)
	fc.Result = res
	return ec.marshalORecipeBatchNote2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchNote(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchAdditive_id(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchAdditive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchAdditive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchAdditive_weight(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchAdditive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchAdditive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchAdditive_cost(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchAdditive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchAdditive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchAdditive_additive(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchAdditive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchAdditive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Additive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.Additive)
	fc.Result = res
	return ec.marshalNAdditive2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditive(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchAdditive_batch(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchAdditive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchAdditive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Batch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeBatch)
	fc.Result = res
	return ec.marshalNRecipeBatch2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatch(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchAdditive_createdAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchAdditive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchAdditive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchAdditive_updatedAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchAdditive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchAdditive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchAdditive_deletedAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchAdditive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchAdditive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchAdditiveDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchAdditiveDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchAdditiveDeletePayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchAdditivePayload_recipeBatchAdditive(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchAdditivePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchAdditivePayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecipeBatchAdditive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeBatchAdditive)
	fc.Result = res
	return ec.marshalNRecipeBatchAdditive2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchAdditive(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchDeletePayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchFragrance_id(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchFragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchFragrance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchFragrance_weight(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchFragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchFragrance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchFragrance_cost(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchFragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchFragrance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchFragrance_fragrance(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchFragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchFragrance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fragrance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.Fragrance)
	fc.Result = res
	return ec.marshalNFragrance2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragrance(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchFragrance_batch(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchFragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchFragrance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Batch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeBatch)
	fc.Result = res
	return ec.marshalNRecipeBatch2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatch(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchFragrance_updatedAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchFragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchFragrance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchFragrance_deletedAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchFragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchFragrance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchFragrance_createdAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchFragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchFragrance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchFragranceDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchFragranceDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchFragranceDeletePayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchFragrancePayload_recipeBatchFragrance(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchFragrancePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchFragrancePayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecipeBatchFragrance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeBatchFragrance)
	fc.Result = res
	return ec.marshalNRecipeBatchFragrance2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchFragrance(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLipid_id(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchLipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchLipid",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLipid_weight(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchLipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchLipid",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLipid_cost(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchLipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchLipid",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLipid_lipid(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchLipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchLipid",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lipid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.Lipid)
	fc.Result = res
	return ec.marshalNLipid2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipid(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLipid_batch(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchLipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchLipid",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Batch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeBatch)
	fc.Result = res
	return ec.marshalNRecipeBatch2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatch(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLipid_deletedAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchLipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchLipid",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLipid_updatedAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchLipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchLipid",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLipid_createdAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchLipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchLipid",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLipidDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchLipidDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchLipidDeletePayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLipidPayload_recipeBatchLipid(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchLipidPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchLipidPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecipeBatchLipid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeBatchLipid)
	fc.Result = res
	return ec.marshalNRecipeBatchLipid2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLipid(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLye_id(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchLye) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchLye",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLye_weight(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchLye) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchLye",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLye_discount(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchLye) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchLye",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Discount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLye_cost(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchLye) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchLye",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLye_lye(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchLye) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchLye",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lye, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.Lye)
	fc.Result = res
	return ec.marshalNLye2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLye(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLye_batch(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchLye) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchLye",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Batch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeBatch)
	fc.Result = res
	return ec.marshalNRecipeBatch2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatch(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLye_updatedAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchLye) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchLye",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLye_deletedAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchLye) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchLye",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLye_createdAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchLye) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchLye",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLyeDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchLyeDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchLyeDeletePayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchLyePayload_recipeBatchLye(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchLyePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchLyePayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecipeBatchLye, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeBatchLye)
	fc.Result = res
	return ec.marshalNRecipeBatchLye2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLye(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchNote_id(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchNote) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchNote",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchNote_note(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchNote) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchNote",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchNote_link(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchNote) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchNote",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Link, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchNote_batch(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchNote) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchNote",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Batch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeBatch)
	fc.Result = res
	return ec.marshalNRecipeBatch2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatch(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchNote_createdAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchNote) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchNote",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchNote_updatedAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchNote) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchNote",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchNote_deletedAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchNote) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchNote",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchNoteDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchNoteDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchNoteDeletePayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchNotePayload_recipeBatchNote(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchNotePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchNotePayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecipeBatchNote, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeBatchNote)
	fc.Result = res
	return ec.marshalNRecipeBatchNote2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchNote(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeBatchPayload_recipeBatch(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeBatchPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeBatchPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecipeBatch, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeBatch)
	fc.Result = res
	return ec.marshalNRecipeBatch2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatch(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeDeletePayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeFragrance_id(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeFragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeFragrance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeFragrance_percentage(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeFragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeFragrance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Percentage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeFragrance_fragrance(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeFragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeFragrance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fragrance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.Fragrance)
	fc.Result = res
	return ec.marshalNFragrance2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragrance(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeFragrance_recipe(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeFragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeFragrance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Recipe, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.Recipe)
	fc.Result = res
	return ec.marshalNRecipe2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipe(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeFragrance_deletedAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeFragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeFragrance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeFragrance_createdAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeFragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeFragrance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeFragrance_updatedAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeFragrance) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeFragrance",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeFragranceDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeFragranceDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeFragranceDeletePayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeFragrancePayload_recipeFragrance(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeFragrancePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeFragrancePayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecipeFragrance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeFragrance)
	fc.Result = res
	return ec.marshalNRecipeFragrance2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeFragrance(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeLipid_id(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeLipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeLipid",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeLipid_percentage(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeLipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeLipid",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Percentage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeLipid_lipid(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeLipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeLipid",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lipid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.Lipid)
	fc.Result = res
	return ec.marshalNLipid2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipid(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeLipid_recipe(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeLipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeLipid",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Recipe, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.Recipe)
	fc.Result = res
	return ec.marshalNRecipe2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipe(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeLipid_deletedAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeLipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeLipid",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeLipid_updatedAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeLipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeLipid",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeLipid_createdAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeLipid) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeLipid",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeLipidDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeLipidDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeLipidDeletePayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeLipidPayload_recipeLipid(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeLipidPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeLipidPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecipeLipid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeLipid)
	fc.Result = res
	return ec.marshalNRecipeLipid2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeLipid(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipePayload_recipe(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipePayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Recipe, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.Recipe)
	fc.Result = res
	return ec.marshalNRecipe2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipe(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeStep_id(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeStep) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeStep",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeStep_num(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeStep) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeStep",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Num, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeStep_note(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeStep) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeStep",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeStep_recipe(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeStep) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeStep",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Recipe, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.Recipe)
	fc.Result = res
	return ec.marshalNRecipe2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipe(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeStep_createdAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeStep) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeStep",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeStep_updatedAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeStep) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeStep",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeStep_deletedAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeStep) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeStep",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeStepDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeStepDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeStepDeletePayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RecipeStepPayload_recipeStep(ctx context.Context, field graphql.CollectedField, obj *gmodels.RecipeStepPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RecipeStepPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecipeStep, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.RecipeStep)
	fc.Result = res
	return ec.marshalNRecipeStep2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeStep(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_id(ctx context.Context, field graphql.CollectedField, obj *gmodels.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_name(ctx context.Context, field graphql.CollectedField, obj *gmodels.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_website(ctx context.Context, field graphql.CollectedField, obj *gmodels.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Website, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_note(ctx context.Context, field graphql.CollectedField, obj *gmodels.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Note, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_deletedAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_updatedAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_createdAt(ctx context.Context, field graphql.CollectedField, obj *gmodels.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_additiveInventory(ctx context.Context, field graphql.CollectedField, obj *gmodels.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdditiveInventory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*gmodels.AdditiveInventory)
	fc.Result = res
	return ec.marshalOAdditiveInventory2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditiveInventory(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_fragranceInventory(ctx context.Context, field graphql.CollectedField, obj *gmodels.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FragranceInventory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*gmodels.FragranceInventory)
	fc.Result = res
	return ec.marshalOFragranceInventory2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragranceInventory(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_lipidInventory(ctx context.Context, field graphql.CollectedField, obj *gmodels.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LipidInventory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*gmodels.LipidInventory)
	fc.Result = res
	return ec.marshalOLipidInventory2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidInventory(ctx, field.Selections, res)
}

func (ec *executionContext) _Supplier_lyeInventory(ctx context.Context, field graphql.CollectedField, obj *gmodels.Supplier) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Supplier",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LyeInventory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*gmodels.LyeInventory)
	fc.Result = res
	return ec.marshalOLyeInventory2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyeInventory(ctx, field.Selections, res)
}

func (ec *executionContext) _SupplierDeletePayload_id(ctx context.Context, field graphql.CollectedField, obj *gmodels.SupplierDeletePayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SupplierDeletePayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SupplierPayload_supplier(ctx context.Context, field graphql.CollectedField, obj *gmodels.SupplierPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SupplierPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Supplier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*gmodels.Supplier)
	fc.Result = res
	return ec.marshalNSupplier2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐSupplier(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAdditiveCreateInput(ctx context.Context, obj interface{}) (gmodels.AdditiveCreateInput, error) {
	var it gmodels.AdditiveCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAdditiveFilter(ctx context.Context, obj interface{}) (gmodels.AdditiveFilter, error) {
	var it gmodels.AdditiveFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOAdditiveWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditiveWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAdditiveInventoryCreateInput(ctx context.Context, obj interface{}) (gmodels.AdditiveInventoryCreateInput, error) {
	var it gmodels.AdditiveInventoryCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "purchaseDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("purchaseDate"))
			it.PurchaseDate, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "expiryDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiryDate"))
			it.ExpiryDate, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cost"))
			it.Cost, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weight"))
			it.Weight, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "additiveId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("additiveId"))
			it.AdditiveID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "supplierId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supplierId"))
			it.SupplierID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAdditiveInventoryFilter(ctx context.Context, obj interface{}) (gmodels.AdditiveInventoryFilter, error) {
	var it gmodels.AdditiveInventoryFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOAdditiveInventoryWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditiveInventoryWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAdditiveInventoryUpdateInput(ctx context.Context, obj interface{}) (gmodels.AdditiveInventoryUpdateInput, error) {
	var it gmodels.AdditiveInventoryUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "purchaseDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("purchaseDate"))
			it.PurchaseDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "expiryDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiryDate"))
			it.ExpiryDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cost"))
			it.Cost, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weight"))
			it.Weight, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "additiveId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("additiveId"))
			it.AdditiveID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "supplierId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supplierId"))
			it.SupplierID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAdditiveInventoryWhere(ctx context.Context, obj interface{}) (gmodels.AdditiveInventoryWhere, error) {
	var it gmodels.AdditiveInventoryWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "purchaseDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("purchaseDate"))
			it.PurchaseDate, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "expiryDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiryDate"))
			it.ExpiryDate, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cost"))
			it.Cost, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weight"))
			it.Weight, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "additive":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("additive"))
			it.Additive, err = ec.unmarshalOAdditiveWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditiveWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "supplier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supplier"))
			it.Supplier, err = ec.unmarshalOSupplierWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐSupplierWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOAdditiveInventoryWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditiveInventoryWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOAdditiveInventoryWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditiveInventoryWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAdditiveUpdateInput(ctx context.Context, obj interface{}) (gmodels.AdditiveUpdateInput, error) {
	var it gmodels.AdditiveUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputAdditiveWhere(ctx context.Context, obj interface{}) (gmodels.AdditiveWhere, error) {
	var it gmodels.AdditiveWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeAdditive":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recipeAdditive"))
			it.RecipeAdditive, err = ec.unmarshalORecipeAdditiveWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeAdditiveWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeBatchAdditive":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recipeBatchAdditive"))
			it.RecipeBatchAdditive, err = ec.unmarshalORecipeBatchAdditiveWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchAdditiveWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "additiveInventory":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("additiveInventory"))
			it.AdditiveInventory, err = ec.unmarshalOAdditiveInventoryWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditiveInventoryWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOAdditiveWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditiveWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOAdditiveWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditiveWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBooleanFilter(ctx context.Context, obj interface{}) (gmodels.BooleanFilter, error) {
	var it gmodels.BooleanFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "equalTo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("equalTo"))
			it.EqualTo, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "notEqualTo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notEqualTo"))
			it.NotEqualTo, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFloatFilter(ctx context.Context, obj interface{}) (gmodels.FloatFilter, error) {
	var it gmodels.FloatFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "equalTo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("equalTo"))
			it.EqualTo, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "notEqualTo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notEqualTo"))
			it.NotEqualTo, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "lessThan":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lessThan"))
			it.LessThan, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "lessThanOrEqualTo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lessThanOrEqualTo"))
			it.LessThanOrEqualTo, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "moreThan":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moreThan"))
			it.MoreThan, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "moreThanOrEqualTo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moreThanOrEqualTo"))
			it.MoreThanOrEqualTo, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
			it.In, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "notIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notIn"))
			it.NotIn, err = ec.unmarshalOFloat2ᚕfloat64ᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFragranceCreateInput(ctx context.Context, obj interface{}) (gmodels.FragranceCreateInput, error) {
	var it gmodels.FragranceCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFragranceFilter(ctx context.Context, obj interface{}) (gmodels.FragranceFilter, error) {
	var it gmodels.FragranceFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOFragranceWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragranceWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFragranceInventoryCreateInput(ctx context.Context, obj interface{}) (gmodels.FragranceInventoryCreateInput, error) {
	var it gmodels.FragranceInventoryCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "purchaseDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("purchaseDate"))
			it.PurchaseDate, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "expiryDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiryDate"))
			it.ExpiryDate, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cost"))
			it.Cost, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weight"))
			it.Weight, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "fragranceId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fragranceId"))
			it.FragranceID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "supplierId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supplierId"))
			it.SupplierID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFragranceInventoryFilter(ctx context.Context, obj interface{}) (gmodels.FragranceInventoryFilter, error) {
	var it gmodels.FragranceInventoryFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOFragranceInventoryWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragranceInventoryWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFragranceInventoryUpdateInput(ctx context.Context, obj interface{}) (gmodels.FragranceInventoryUpdateInput, error) {
	var it gmodels.FragranceInventoryUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "purchaseDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("purchaseDate"))
			it.PurchaseDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "expiryDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiryDate"))
			it.ExpiryDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cost"))
			it.Cost, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weight"))
			it.Weight, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "fragranceId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fragranceId"))
			it.FragranceID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "supplierId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supplierId"))
			it.SupplierID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFragranceInventoryWhere(ctx context.Context, obj interface{}) (gmodels.FragranceInventoryWhere, error) {
	var it gmodels.FragranceInventoryWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "purchaseDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("purchaseDate"))
			it.PurchaseDate, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "expiryDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiryDate"))
			it.ExpiryDate, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cost"))
			it.Cost, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weight"))
			it.Weight, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "fragrance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fragrance"))
			it.Fragrance, err = ec.unmarshalOFragranceWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragranceWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "supplier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supplier"))
			it.Supplier, err = ec.unmarshalOSupplierWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐSupplierWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOFragranceInventoryWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragranceInventoryWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOFragranceInventoryWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragranceInventoryWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFragranceUpdateInput(ctx context.Context, obj interface{}) (gmodels.FragranceUpdateInput, error) {
	var it gmodels.FragranceUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFragranceWhere(ctx context.Context, obj interface{}) (gmodels.FragranceWhere, error) {
	var it gmodels.FragranceWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeBatchFragrance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recipeBatchFragrance"))
			it.RecipeBatchFragrance, err = ec.unmarshalORecipeBatchFragranceWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchFragranceWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeFragrance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recipeFragrance"))
			it.RecipeFragrance, err = ec.unmarshalORecipeFragranceWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeFragranceWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "fragranceInventory":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fragranceInventory"))
			it.FragranceInventory, err = ec.unmarshalOFragranceInventoryWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragranceInventoryWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOFragranceWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragranceWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOFragranceWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragranceWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIDFilter(ctx context.Context, obj interface{}) (gmodels.IDFilter, error) {
	var it gmodels.IDFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "equalTo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("equalTo"))
			it.EqualTo, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "notEqualTo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notEqualTo"))
			it.NotEqualTo, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
			it.In, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "notIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notIn"))
			it.NotIn, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputIntFilter(ctx context.Context, obj interface{}) (gmodels.IntFilter, error) {
	var it gmodels.IntFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "equalTo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("equalTo"))
			it.EqualTo, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "notEqualTo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notEqualTo"))
			it.NotEqualTo, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "lessThan":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lessThan"))
			it.LessThan, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "lessThanOrEqualTo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lessThanOrEqualTo"))
			it.LessThanOrEqualTo, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "moreThan":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moreThan"))
			it.MoreThan, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "moreThanOrEqualTo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("moreThanOrEqualTo"))
			it.MoreThanOrEqualTo, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
			it.In, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "notIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notIn"))
			it.NotIn, err = ec.unmarshalOInt2ᚕintᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLipidCreateInput(ctx context.Context, obj interface{}) (gmodels.LipidCreateInput, error) {
	var it gmodels.LipidCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "lauric":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lauric"))
			it.Lauric, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "myristic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("myristic"))
			it.Myristic, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "palmitic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("palmitic"))
			it.Palmitic, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "stearic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stearic"))
			it.Stearic, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "ricinoleic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ricinoleic"))
			it.Ricinoleic, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "oleic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oleic"))
			it.Oleic, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "linoleic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("linoleic"))
			it.Linoleic, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "linolenic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("linolenic"))
			it.Linolenic, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "hardness":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hardness"))
			it.Hardness, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "cleansing":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cleansing"))
			it.Cleansing, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "conditioning":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conditioning"))
			it.Conditioning, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "bubbly":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bubbly"))
			it.Bubbly, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "creamy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creamy"))
			it.Creamy, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "iodine":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iodine"))
			it.Iodine, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "ins":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ins"))
			it.Ins, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "inciName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inciName"))
			it.InciName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "family":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("family"))
			it.Family, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "naoh":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("naoh"))
			it.Naoh, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeBatchLipid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recipeBatchLipid"))
			it.RecipeBatchLipid, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeLipid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recipeLipid"))
			it.RecipeLipid, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLipidFilter(ctx context.Context, obj interface{}) (gmodels.LipidFilter, error) {
	var it gmodels.LipidFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOLipidWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLipidInventoryCreateInput(ctx context.Context, obj interface{}) (gmodels.LipidInventoryCreateInput, error) {
	var it gmodels.LipidInventoryCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "purchaseDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("purchaseDate"))
			it.PurchaseDate, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "expiryDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiryDate"))
			it.ExpiryDate, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cost"))
			it.Cost, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weight"))
			it.Weight, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "sap":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sap"))
			it.Sap, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "naoh":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("naoh"))
			it.Naoh, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "koh":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("koh"))
			it.Koh, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "gramsPerLiter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gramsPerLiter"))
			it.GramsPerLiter, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "lipidId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lipidId"))
			it.LipidID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "supplierId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supplierId"))
			it.SupplierID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLipidInventoryFilter(ctx context.Context, obj interface{}) (gmodels.LipidInventoryFilter, error) {
	var it gmodels.LipidInventoryFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOLipidInventoryWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidInventoryWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLipidInventoryUpdateInput(ctx context.Context, obj interface{}) (gmodels.LipidInventoryUpdateInput, error) {
	var it gmodels.LipidInventoryUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "purchaseDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("purchaseDate"))
			it.PurchaseDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "expiryDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiryDate"))
			it.ExpiryDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cost"))
			it.Cost, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weight"))
			it.Weight, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "sap":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sap"))
			it.Sap, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "naoh":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("naoh"))
			it.Naoh, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "koh":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("koh"))
			it.Koh, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "gramsPerLiter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gramsPerLiter"))
			it.GramsPerLiter, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "lipidId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lipidId"))
			it.LipidID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "supplierId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supplierId"))
			it.SupplierID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLipidInventoryWhere(ctx context.Context, obj interface{}) (gmodels.LipidInventoryWhere, error) {
	var it gmodels.LipidInventoryWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "purchaseDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("purchaseDate"))
			it.PurchaseDate, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "expiryDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiryDate"))
			it.ExpiryDate, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cost"))
			it.Cost, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weight"))
			it.Weight, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "sap":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sap"))
			it.Sap, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "naoh":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("naoh"))
			it.Naoh, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "koh":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("koh"))
			it.Koh, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "gramsPerLiter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gramsPerLiter"))
			it.GramsPerLiter, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "lipid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lipid"))
			it.Lipid, err = ec.unmarshalOLipidWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "supplier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supplier"))
			it.Supplier, err = ec.unmarshalOSupplierWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐSupplierWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOLipidInventoryWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidInventoryWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOLipidInventoryWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidInventoryWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLipidUpdateInput(ctx context.Context, obj interface{}) (gmodels.LipidUpdateInput, error) {
	var it gmodels.LipidUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lauric":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lauric"))
			it.Lauric, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "myristic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("myristic"))
			it.Myristic, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "palmitic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("palmitic"))
			it.Palmitic, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "stearic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stearic"))
			it.Stearic, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "ricinoleic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ricinoleic"))
			it.Ricinoleic, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "oleic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oleic"))
			it.Oleic, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "linoleic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("linoleic"))
			it.Linoleic, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "linolenic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("linolenic"))
			it.Linolenic, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "hardness":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hardness"))
			it.Hardness, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "cleansing":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cleansing"))
			it.Cleansing, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "conditioning":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conditioning"))
			it.Conditioning, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "bubbly":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bubbly"))
			it.Bubbly, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "creamy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creamy"))
			it.Creamy, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "iodine":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iodine"))
			it.Iodine, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "ins":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ins"))
			it.Ins, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "inciName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inciName"))
			it.InciName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "family":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("family"))
			it.Family, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "naoh":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("naoh"))
			it.Naoh, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeBatchLipid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recipeBatchLipid"))
			it.RecipeBatchLipid, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeLipid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recipeLipid"))
			it.RecipeLipid, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLipidWhere(ctx context.Context, obj interface{}) (gmodels.LipidWhere, error) {
	var it gmodels.LipidWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "lauric":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lauric"))
			it.Lauric, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "myristic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("myristic"))
			it.Myristic, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "palmitic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("palmitic"))
			it.Palmitic, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "stearic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stearic"))
			it.Stearic, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "ricinoleic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ricinoleic"))
			it.Ricinoleic, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "oleic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oleic"))
			it.Oleic, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "linoleic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("linoleic"))
			it.Linoleic, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "linolenic":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("linolenic"))
			it.Linolenic, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "hardness":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hardness"))
			it.Hardness, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "cleansing":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cleansing"))
			it.Cleansing, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "conditioning":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("conditioning"))
			it.Conditioning, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "bubbly":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bubbly"))
			it.Bubbly, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "creamy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("creamy"))
			it.Creamy, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "iodine":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iodine"))
			it.Iodine, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "ins":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ins"))
			it.Ins, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "inciName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inciName"))
			it.InciName, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "family":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("family"))
			it.Family, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "naoh":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("naoh"))
			it.Naoh, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeBatchLipid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recipeBatchLipid"))
			it.RecipeBatchLipid, err = ec.unmarshalORecipeBatchLipidWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLipidWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeLipid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recipeLipid"))
			it.RecipeLipid, err = ec.unmarshalORecipeLipidWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeLipidWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "lipidInventory":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lipidInventory"))
			it.LipidInventory, err = ec.unmarshalOLipidInventoryWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidInventoryWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOLipidWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOLipidWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLyeCreateInput(ctx context.Context, obj interface{}) (gmodels.LyeCreateInput, error) {
	var it gmodels.LyeCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "kind":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kind"))
			it.Kind, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLyeFilter(ctx context.Context, obj interface{}) (gmodels.LyeFilter, error) {
	var it gmodels.LyeFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOLyeWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLyeInventoryCreateInput(ctx context.Context, obj interface{}) (gmodels.LyeInventoryCreateInput, error) {
	var it gmodels.LyeInventoryCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "purchaseDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("purchaseDate"))
			it.PurchaseDate, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "expiryDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiryDate"))
			it.ExpiryDate, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cost"))
			it.Cost, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weight"))
			it.Weight, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "concentration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("concentration"))
			it.Concentration, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "lyeId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lyeId"))
			it.LyeID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "supplierId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supplierId"))
			it.SupplierID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLyeInventoryFilter(ctx context.Context, obj interface{}) (gmodels.LyeInventoryFilter, error) {
	var it gmodels.LyeInventoryFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOLyeInventoryWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyeInventoryWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLyeInventoryUpdateInput(ctx context.Context, obj interface{}) (gmodels.LyeInventoryUpdateInput, error) {
	var it gmodels.LyeInventoryUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "purchaseDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("purchaseDate"))
			it.PurchaseDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "expiryDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiryDate"))
			it.ExpiryDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cost"))
			it.Cost, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weight"))
			it.Weight, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "concentration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("concentration"))
			it.Concentration, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "lyeId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lyeId"))
			it.LyeID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "supplierId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supplierId"))
			it.SupplierID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLyeInventoryWhere(ctx context.Context, obj interface{}) (gmodels.LyeInventoryWhere, error) {
	var it gmodels.LyeInventoryWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "purchaseDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("purchaseDate"))
			it.PurchaseDate, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "expiryDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expiryDate"))
			it.ExpiryDate, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cost"))
			it.Cost, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weight"))
			it.Weight, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "concentration":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("concentration"))
			it.Concentration, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "lye":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lye"))
			it.Lye, err = ec.unmarshalOLyeWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "supplier":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("supplier"))
			it.Supplier, err = ec.unmarshalOSupplierWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐSupplierWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOLyeInventoryWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyeInventoryWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOLyeInventoryWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyeInventoryWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLyeUpdateInput(ctx context.Context, obj interface{}) (gmodels.LyeUpdateInput, error) {
	var it gmodels.LyeUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "kind":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kind"))
			it.Kind, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLyeWhere(ctx context.Context, obj interface{}) (gmodels.LyeWhere, error) {
	var it gmodels.LyeWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "kind":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kind"))
			it.Kind, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeBatchLye":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recipeBatchLye"))
			it.RecipeBatchLye, err = ec.unmarshalORecipeBatchLyeWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLyeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "lyeInventory":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lyeInventory"))
			it.LyeInventory, err = ec.unmarshalOLyeInventoryWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyeInventoryWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOLyeWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOLyeWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeAdditiveCreateInput(ctx context.Context, obj interface{}) (gmodels.RecipeAdditiveCreateInput, error) {
	var it gmodels.RecipeAdditiveCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "percentage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("percentage"))
			it.Percentage, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "additiveId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("additiveId"))
			it.AdditiveID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recipeId"))
			it.RecipeID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeAdditiveFilter(ctx context.Context, obj interface{}) (gmodels.RecipeAdditiveFilter, error) {
	var it gmodels.RecipeAdditiveFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalORecipeAdditiveWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeAdditiveWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeAdditiveUpdateInput(ctx context.Context, obj interface{}) (gmodels.RecipeAdditiveUpdateInput, error) {
	var it gmodels.RecipeAdditiveUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "percentage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("percentage"))
			it.Percentage, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "additiveId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("additiveId"))
			it.AdditiveID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recipeId"))
			it.RecipeID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeAdditiveWhere(ctx context.Context, obj interface{}) (gmodels.RecipeAdditiveWhere, error) {
	var it gmodels.RecipeAdditiveWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "percentage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("percentage"))
			it.Percentage, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "additive":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("additive"))
			it.Additive, err = ec.unmarshalOAdditiveWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditiveWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipe":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recipe"))
			it.Recipe, err = ec.unmarshalORecipeWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalORecipeAdditiveWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeAdditiveWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalORecipeAdditiveWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeAdditiveWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchAdditiveCreateInput(ctx context.Context, obj interface{}) (gmodels.RecipeBatchAdditiveCreateInput, error) {
	var it gmodels.RecipeBatchAdditiveCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "weight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weight"))
			it.Weight, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cost"))
			it.Cost, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "additiveId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("additiveId"))
			it.AdditiveID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "batchId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("batchId"))
			it.BatchID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchAdditiveFilter(ctx context.Context, obj interface{}) (gmodels.RecipeBatchAdditiveFilter, error) {
	var it gmodels.RecipeBatchAdditiveFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalORecipeBatchAdditiveWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchAdditiveWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchAdditiveUpdateInput(ctx context.Context, obj interface{}) (gmodels.RecipeBatchAdditiveUpdateInput, error) {
	var it gmodels.RecipeBatchAdditiveUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "weight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weight"))
			it.Weight, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cost"))
			it.Cost, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "additiveId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("additiveId"))
			it.AdditiveID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "batchId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("batchId"))
			it.BatchID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchAdditiveWhere(ctx context.Context, obj interface{}) (gmodels.RecipeBatchAdditiveWhere, error) {
	var it gmodels.RecipeBatchAdditiveWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weight"))
			it.Weight, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cost"))
			it.Cost, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "additive":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("additive"))
			it.Additive, err = ec.unmarshalOAdditiveWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditiveWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "batch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("batch"))
			it.Batch, err = ec.unmarshalORecipeBatchWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalORecipeBatchAdditiveWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchAdditiveWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalORecipeBatchAdditiveWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchAdditiveWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchCreateInput(ctx context.Context, obj interface{}) (gmodels.RecipeBatchCreateInput, error) {
	var it gmodels.RecipeBatchCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "tag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag"))
			it.Tag, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "productionDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productionDate"))
			it.ProductionDate, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "sellableDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sellableDate"))
			it.SellableDate, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "lipidWeight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lipidWeight"))
			it.LipidWeight, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "productionWeight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productionWeight"))
			it.ProductionWeight, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "curedWeight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("curedWeight"))
			it.CuredWeight, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recipeId"))
			it.RecipeID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchFilter(ctx context.Context, obj interface{}) (gmodels.RecipeBatchFilter, error) {
	var it gmodels.RecipeBatchFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalORecipeBatchWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchFragranceCreateInput(ctx context.Context, obj interface{}) (gmodels.RecipeBatchFragranceCreateInput, error) {
	var it gmodels.RecipeBatchFragranceCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "weight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weight"))
			it.Weight, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cost"))
			it.Cost, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "fragranceId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fragranceId"))
			it.FragranceID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "batchId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("batchId"))
			it.BatchID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchFragranceFilter(ctx context.Context, obj interface{}) (gmodels.RecipeBatchFragranceFilter, error) {
	var it gmodels.RecipeBatchFragranceFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalORecipeBatchFragranceWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchFragranceWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchFragranceUpdateInput(ctx context.Context, obj interface{}) (gmodels.RecipeBatchFragranceUpdateInput, error) {
	var it gmodels.RecipeBatchFragranceUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "weight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weight"))
			it.Weight, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cost"))
			it.Cost, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "fragranceId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fragranceId"))
			it.FragranceID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "batchId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("batchId"))
			it.BatchID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchFragranceWhere(ctx context.Context, obj interface{}) (gmodels.RecipeBatchFragranceWhere, error) {
	var it gmodels.RecipeBatchFragranceWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weight"))
			it.Weight, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cost"))
			it.Cost, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "fragrance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fragrance"))
			it.Fragrance, err = ec.unmarshalOFragranceWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragranceWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "batch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("batch"))
			it.Batch, err = ec.unmarshalORecipeBatchWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalORecipeBatchFragranceWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchFragranceWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalORecipeBatchFragranceWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchFragranceWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchLipidCreateInput(ctx context.Context, obj interface{}) (gmodels.RecipeBatchLipidCreateInput, error) {
	var it gmodels.RecipeBatchLipidCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "weight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weight"))
			it.Weight, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cost"))
			it.Cost, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "lipidId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lipidId"))
			it.LipidID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "batchId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("batchId"))
			it.BatchID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchLipidFilter(ctx context.Context, obj interface{}) (gmodels.RecipeBatchLipidFilter, error) {
	var it gmodels.RecipeBatchLipidFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalORecipeBatchLipidWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLipidWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchLipidUpdateInput(ctx context.Context, obj interface{}) (gmodels.RecipeBatchLipidUpdateInput, error) {
	var it gmodels.RecipeBatchLipidUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "weight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weight"))
			it.Weight, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cost"))
			it.Cost, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "lipidId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lipidId"))
			it.LipidID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "batchId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("batchId"))
			it.BatchID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchLipidWhere(ctx context.Context, obj interface{}) (gmodels.RecipeBatchLipidWhere, error) {
	var it gmodels.RecipeBatchLipidWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weight"))
			it.Weight, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cost"))
			it.Cost, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "lipid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lipid"))
			it.Lipid, err = ec.unmarshalOLipidWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "batch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("batch"))
			it.Batch, err = ec.unmarshalORecipeBatchWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalORecipeBatchLipidWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLipidWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalORecipeBatchLipidWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLipidWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchLyeCreateInput(ctx context.Context, obj interface{}) (gmodels.RecipeBatchLyeCreateInput, error) {
	var it gmodels.RecipeBatchLyeCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "weight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weight"))
			it.Weight, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "discount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discount"))
			it.Discount, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cost"))
			it.Cost, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "lyeId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lyeId"))
			it.LyeID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "batchId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("batchId"))
			it.BatchID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchLyeFilter(ctx context.Context, obj interface{}) (gmodels.RecipeBatchLyeFilter, error) {
	var it gmodels.RecipeBatchLyeFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalORecipeBatchLyeWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLyeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchLyeUpdateInput(ctx context.Context, obj interface{}) (gmodels.RecipeBatchLyeUpdateInput, error) {
	var it gmodels.RecipeBatchLyeUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "weight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weight"))
			it.Weight, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "discount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discount"))
			it.Discount, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cost"))
			it.Cost, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "lyeId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lyeId"))
			it.LyeID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "batchId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("batchId"))
			it.BatchID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchLyeWhere(ctx context.Context, obj interface{}) (gmodels.RecipeBatchLyeWhere, error) {
	var it gmodels.RecipeBatchLyeWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "weight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("weight"))
			it.Weight, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "discount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("discount"))
			it.Discount, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "cost":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cost"))
			it.Cost, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "lye":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lye"))
			it.Lye, err = ec.unmarshalOLyeWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "batch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("batch"))
			it.Batch, err = ec.unmarshalORecipeBatchWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalORecipeBatchLyeWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLyeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalORecipeBatchLyeWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLyeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchNoteCreateInput(ctx context.Context, obj interface{}) (gmodels.RecipeBatchNoteCreateInput, error) {
	var it gmodels.RecipeBatchNoteCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "link":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("link"))
			it.Link, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "batchId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("batchId"))
			it.BatchID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchNoteFilter(ctx context.Context, obj interface{}) (gmodels.RecipeBatchNoteFilter, error) {
	var it gmodels.RecipeBatchNoteFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalORecipeBatchNoteWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchNoteWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchNoteUpdateInput(ctx context.Context, obj interface{}) (gmodels.RecipeBatchNoteUpdateInput, error) {
	var it gmodels.RecipeBatchNoteUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "link":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("link"))
			it.Link, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "batchId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("batchId"))
			it.BatchID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchNoteWhere(ctx context.Context, obj interface{}) (gmodels.RecipeBatchNoteWhere, error) {
	var it gmodels.RecipeBatchNoteWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "link":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("link"))
			it.Link, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "batch":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("batch"))
			it.Batch, err = ec.unmarshalORecipeBatchWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalORecipeBatchNoteWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchNoteWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalORecipeBatchNoteWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchNoteWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchUpdateInput(ctx context.Context, obj interface{}) (gmodels.RecipeBatchUpdateInput, error) {
	var it gmodels.RecipeBatchUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "tag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag"))
			it.Tag, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "productionDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productionDate"))
			it.ProductionDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "sellableDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sellableDate"))
			it.SellableDate, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lipidWeight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lipidWeight"))
			it.LipidWeight, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "productionWeight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productionWeight"))
			it.ProductionWeight, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "curedWeight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("curedWeight"))
			it.CuredWeight, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recipeId"))
			it.RecipeID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeBatchWhere(ctx context.Context, obj interface{}) (gmodels.RecipeBatchWhere, error) {
	var it gmodels.RecipeBatchWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "tag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tag"))
			it.Tag, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "productionDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productionDate"))
			it.ProductionDate, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "sellableDate":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sellableDate"))
			it.SellableDate, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "lipidWeight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lipidWeight"))
			it.LipidWeight, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "productionWeight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productionWeight"))
			it.ProductionWeight, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "curedWeight":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("curedWeight"))
			it.CuredWeight, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipe":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recipe"))
			it.Recipe, err = ec.unmarshalORecipeWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "batchRecipeBatchAdditives":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("batchRecipeBatchAdditives"))
			it.BatchRecipeBatchAdditives, err = ec.unmarshalORecipeBatchAdditiveWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchAdditiveWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "batchRecipeBatchFragrances":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("batchRecipeBatchFragrances"))
			it.BatchRecipeBatchFragrances, err = ec.unmarshalORecipeBatchFragranceWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchFragranceWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "batchRecipeBatchLipids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("batchRecipeBatchLipids"))
			it.BatchRecipeBatchLipids, err = ec.unmarshalORecipeBatchLipidWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLipidWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "batchRecipeBatchLyes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("batchRecipeBatchLyes"))
			it.BatchRecipeBatchLyes, err = ec.unmarshalORecipeBatchLyeWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLyeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "batchRecipeBatchNotes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("batchRecipeBatchNotes"))
			it.BatchRecipeBatchNotes, err = ec.unmarshalORecipeBatchNoteWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchNoteWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalORecipeBatchWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalORecipeBatchWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeCreateInput(ctx context.Context, obj interface{}) (gmodels.RecipeCreateInput, error) {
	var it gmodels.RecipeCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeFilter(ctx context.Context, obj interface{}) (gmodels.RecipeFilter, error) {
	var it gmodels.RecipeFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalORecipeWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeFragranceCreateInput(ctx context.Context, obj interface{}) (gmodels.RecipeFragranceCreateInput, error) {
	var it gmodels.RecipeFragranceCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "percentage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("percentage"))
			it.Percentage, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "fragranceId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fragranceId"))
			it.FragranceID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recipeId"))
			it.RecipeID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeFragranceFilter(ctx context.Context, obj interface{}) (gmodels.RecipeFragranceFilter, error) {
	var it gmodels.RecipeFragranceFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalORecipeFragranceWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeFragranceWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeFragranceUpdateInput(ctx context.Context, obj interface{}) (gmodels.RecipeFragranceUpdateInput, error) {
	var it gmodels.RecipeFragranceUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "percentage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("percentage"))
			it.Percentage, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "fragranceId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fragranceId"))
			it.FragranceID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recipeId"))
			it.RecipeID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeFragranceWhere(ctx context.Context, obj interface{}) (gmodels.RecipeFragranceWhere, error) {
	var it gmodels.RecipeFragranceWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "percentage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("percentage"))
			it.Percentage, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "fragrance":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fragrance"))
			it.Fragrance, err = ec.unmarshalOFragranceWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragranceWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipe":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recipe"))
			it.Recipe, err = ec.unmarshalORecipeWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalORecipeFragranceWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeFragranceWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalORecipeFragranceWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeFragranceWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeLipidCreateInput(ctx context.Context, obj interface{}) (gmodels.RecipeLipidCreateInput, error) {
	var it gmodels.RecipeLipidCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "percentage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("percentage"))
			it.Percentage, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "lipidId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lipidId"))
			it.LipidID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recipeId"))
			it.RecipeID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeLipidFilter(ctx context.Context, obj interface{}) (gmodels.RecipeLipidFilter, error) {
	var it gmodels.RecipeLipidFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalORecipeLipidWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeLipidWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeLipidUpdateInput(ctx context.Context, obj interface{}) (gmodels.RecipeLipidUpdateInput, error) {
	var it gmodels.RecipeLipidUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "percentage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("percentage"))
			it.Percentage, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "lipidId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lipidId"))
			it.LipidID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recipeId"))
			it.RecipeID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeLipidWhere(ctx context.Context, obj interface{}) (gmodels.RecipeLipidWhere, error) {
	var it gmodels.RecipeLipidWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "percentage":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("percentage"))
			it.Percentage, err = ec.unmarshalOFloatFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFloatFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "lipid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lipid"))
			it.Lipid, err = ec.unmarshalOLipidWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipe":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recipe"))
			it.Recipe, err = ec.unmarshalORecipeWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalORecipeLipidWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeLipidWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalORecipeLipidWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeLipidWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeStepCreateInput(ctx context.Context, obj interface{}) (gmodels.RecipeStepCreateInput, error) {
	var it gmodels.RecipeStepCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("num"))
			it.Num, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recipeId"))
			it.RecipeID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeStepFilter(ctx context.Context, obj interface{}) (gmodels.RecipeStepFilter, error) {
	var it gmodels.RecipeStepFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalORecipeStepWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeStepWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeStepUpdateInput(ctx context.Context, obj interface{}) (gmodels.RecipeStepUpdateInput, error) {
	var it gmodels.RecipeStepUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("num"))
			it.Num, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recipeId"))
			it.RecipeID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeStepWhere(ctx context.Context, obj interface{}) (gmodels.RecipeStepWhere, error) {
	var it gmodels.RecipeStepWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "num":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("num"))
			it.Num, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipe":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recipe"))
			it.Recipe, err = ec.unmarshalORecipeWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalORecipeStepWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeStepWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalORecipeStepWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeStepWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeUpdateInput(ctx context.Context, obj interface{}) (gmodels.RecipeUpdateInput, error) {
	var it gmodels.RecipeUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRecipeWhere(ctx context.Context, obj interface{}) (gmodels.RecipeWhere, error) {
	var it gmodels.RecipeWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeAdditives":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recipeAdditives"))
			it.RecipeAdditives, err = ec.unmarshalORecipeAdditiveWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeAdditiveWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeBatches":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recipeBatches"))
			it.RecipeBatches, err = ec.unmarshalORecipeBatchWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeFragrances":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recipeFragrances"))
			it.RecipeFragrances, err = ec.unmarshalORecipeFragranceWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeFragranceWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeLipids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recipeLipids"))
			it.RecipeLipids, err = ec.unmarshalORecipeLipidWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeLipidWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "recipeSteps":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recipeSteps"))
			it.RecipeSteps, err = ec.unmarshalORecipeStepWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeStepWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalORecipeWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalORecipeWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStringFilter(ctx context.Context, obj interface{}) (gmodels.StringFilter, error) {
	var it gmodels.StringFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "equalTo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("equalTo"))
			it.EqualTo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "notEqualTo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notEqualTo"))
			it.NotEqualTo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
			it.In, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "notIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notIn"))
			it.NotIn, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "startWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startWith"))
			it.StartWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "notStartWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notStartWith"))
			it.NotStartWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "endWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endWith"))
			it.EndWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "notEndWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notEndWith"))
			it.NotEndWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contain":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contain"))
			it.Contain, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "notContain":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notContain"))
			it.NotContain, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "startWithStrict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startWithStrict"))
			it.StartWithStrict, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "notStartWithStrict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notStartWithStrict"))
			it.NotStartWithStrict, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "endWithStrict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endWithStrict"))
			it.EndWithStrict, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "notEndWithStrict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notEndWithStrict"))
			it.NotEndWithStrict, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "containStrict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("containStrict"))
			it.ContainStrict, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "notContainStrict":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notContainStrict"))
			it.NotContainStrict, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSupplierCreateInput(ctx context.Context, obj interface{}) (gmodels.SupplierCreateInput, error) {
	var it gmodels.SupplierCreateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "website":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("website"))
			it.Website, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSupplierFilter(ctx context.Context, obj interface{}) (gmodels.SupplierFilter, error) {
	var it gmodels.SupplierFilter
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "search":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("search"))
			it.Search, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOSupplierWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐSupplierWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSupplierUpdateInput(ctx context.Context, obj interface{}) (gmodels.SupplierUpdateInput, error) {
	var it gmodels.SupplierUpdateInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "website":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("website"))
			it.Website, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSupplierWhere(ctx context.Context, obj interface{}) (gmodels.SupplierWhere, error) {
	var it gmodels.SupplierWhere
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOIDFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIDFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "website":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("website"))
			it.Website, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "note":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("note"))
			it.Note, err = ec.unmarshalOStringFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐStringFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx, v)
			if err != nil {
				return it, err
			}
		case "additiveInventory":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("additiveInventory"))
			it.AdditiveInventory, err = ec.unmarshalOAdditiveInventoryWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditiveInventoryWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "fragranceInventory":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fragranceInventory"))
			it.FragranceInventory, err = ec.unmarshalOFragranceInventoryWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragranceInventoryWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "lipidInventory":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lipidInventory"))
			it.LipidInventory, err = ec.unmarshalOLipidInventoryWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidInventoryWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "lyeInventory":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lyeInventory"))
			it.LyeInventory, err = ec.unmarshalOLyeInventoryWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyeInventoryWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOSupplierWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐSupplierWhere(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOSupplierWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐSupplierWhere(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var additiveImplementors = []string{"Additive"}

func (ec *executionContext) _Additive(ctx context.Context, sel ast.SelectionSet, obj *gmodels.Additive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, additiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Additive")
		case "id":
			out.Values[i] = ec._Additive_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Additive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "note":
			out.Values[i] = ec._Additive_note(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Additive_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Additive_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._Additive_deletedAt(ctx, field, obj)
		case "inventory":
			out.Values[i] = ec._Additive_inventory(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var additiveDeletePayloadImplementors = []string{"AdditiveDeletePayload"}

func (ec *executionContext) _AdditiveDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *gmodels.AdditiveDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, additiveDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdditiveDeletePayload")
		case "id":
			out.Values[i] = ec._AdditiveDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var additiveInventoryImplementors = []string{"AdditiveInventory"}

func (ec *executionContext) _AdditiveInventory(ctx context.Context, sel ast.SelectionSet, obj *gmodels.AdditiveInventory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, additiveInventoryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdditiveInventory")
		case "id":
			out.Values[i] = ec._AdditiveInventory_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "purchaseDate":
			out.Values[i] = ec._AdditiveInventory_purchaseDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "expiryDate":
			out.Values[i] = ec._AdditiveInventory_expiryDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cost":
			out.Values[i] = ec._AdditiveInventory_cost(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "weight":
			out.Values[i] = ec._AdditiveInventory_weight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "additive":
			out.Values[i] = ec._AdditiveInventory_additive(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supplier":
			out.Values[i] = ec._AdditiveInventory_supplier(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._AdditiveInventory_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._AdditiveInventory_deletedAt(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._AdditiveInventory_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var additiveInventoryDeletePayloadImplementors = []string{"AdditiveInventoryDeletePayload"}

func (ec *executionContext) _AdditiveInventoryDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *gmodels.AdditiveInventoryDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, additiveInventoryDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdditiveInventoryDeletePayload")
		case "id":
			out.Values[i] = ec._AdditiveInventoryDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var additiveInventoryPayloadImplementors = []string{"AdditiveInventoryPayload"}

func (ec *executionContext) _AdditiveInventoryPayload(ctx context.Context, sel ast.SelectionSet, obj *gmodels.AdditiveInventoryPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, additiveInventoryPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdditiveInventoryPayload")
		case "additiveInventory":
			out.Values[i] = ec._AdditiveInventoryPayload_additiveInventory(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var additivePayloadImplementors = []string{"AdditivePayload"}

func (ec *executionContext) _AdditivePayload(ctx context.Context, sel ast.SelectionSet, obj *gmodels.AdditivePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, additivePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdditivePayload")
		case "additive":
			out.Values[i] = ec._AdditivePayload_additive(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fragranceImplementors = []string{"Fragrance"}

func (ec *executionContext) _Fragrance(ctx context.Context, sel ast.SelectionSet, obj *gmodels.Fragrance) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fragranceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Fragrance")
		case "id":
			out.Values[i] = ec._Fragrance_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Fragrance_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "note":
			out.Values[i] = ec._Fragrance_note(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Fragrance_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._Fragrance_deletedAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Fragrance_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "inventory":
			out.Values[i] = ec._Fragrance_inventory(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fragranceDeletePayloadImplementors = []string{"FragranceDeletePayload"}

func (ec *executionContext) _FragranceDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *gmodels.FragranceDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fragranceDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FragranceDeletePayload")
		case "id":
			out.Values[i] = ec._FragranceDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fragranceInventoryImplementors = []string{"FragranceInventory"}

func (ec *executionContext) _FragranceInventory(ctx context.Context, sel ast.SelectionSet, obj *gmodels.FragranceInventory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fragranceInventoryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FragranceInventory")
		case "id":
			out.Values[i] = ec._FragranceInventory_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "purchaseDate":
			out.Values[i] = ec._FragranceInventory_purchaseDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "expiryDate":
			out.Values[i] = ec._FragranceInventory_expiryDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cost":
			out.Values[i] = ec._FragranceInventory_cost(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "weight":
			out.Values[i] = ec._FragranceInventory_weight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fragrance":
			out.Values[i] = ec._FragranceInventory_fragrance(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supplier":
			out.Values[i] = ec._FragranceInventory_supplier(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._FragranceInventory_deletedAt(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._FragranceInventory_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._FragranceInventory_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fragranceInventoryDeletePayloadImplementors = []string{"FragranceInventoryDeletePayload"}

func (ec *executionContext) _FragranceInventoryDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *gmodels.FragranceInventoryDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fragranceInventoryDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FragranceInventoryDeletePayload")
		case "id":
			out.Values[i] = ec._FragranceInventoryDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fragranceInventoryPayloadImplementors = []string{"FragranceInventoryPayload"}

func (ec *executionContext) _FragranceInventoryPayload(ctx context.Context, sel ast.SelectionSet, obj *gmodels.FragranceInventoryPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fragranceInventoryPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FragranceInventoryPayload")
		case "fragranceInventory":
			out.Values[i] = ec._FragranceInventoryPayload_fragranceInventory(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fragrancePayloadImplementors = []string{"FragrancePayload"}

func (ec *executionContext) _FragrancePayload(ctx context.Context, sel ast.SelectionSet, obj *gmodels.FragrancePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fragrancePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FragrancePayload")
		case "fragrance":
			out.Values[i] = ec._FragrancePayload_fragrance(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lipidImplementors = []string{"Lipid"}

func (ec *executionContext) _Lipid(ctx context.Context, sel ast.SelectionSet, obj *gmodels.Lipid) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lipidImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Lipid")
		case "id":
			out.Values[i] = ec._Lipid_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Lipid_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lauric":
			out.Values[i] = ec._Lipid_lauric(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "myristic":
			out.Values[i] = ec._Lipid_myristic(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "palmitic":
			out.Values[i] = ec._Lipid_palmitic(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "stearic":
			out.Values[i] = ec._Lipid_stearic(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ricinoleic":
			out.Values[i] = ec._Lipid_ricinoleic(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "oleic":
			out.Values[i] = ec._Lipid_oleic(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "linoleic":
			out.Values[i] = ec._Lipid_linoleic(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "linolenic":
			out.Values[i] = ec._Lipid_linolenic(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hardness":
			out.Values[i] = ec._Lipid_hardness(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cleansing":
			out.Values[i] = ec._Lipid_cleansing(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "conditioning":
			out.Values[i] = ec._Lipid_conditioning(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bubbly":
			out.Values[i] = ec._Lipid_bubbly(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creamy":
			out.Values[i] = ec._Lipid_creamy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "iodine":
			out.Values[i] = ec._Lipid_iodine(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ins":
			out.Values[i] = ec._Lipid_ins(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "inciName":
			out.Values[i] = ec._Lipid_inciName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "family":
			out.Values[i] = ec._Lipid_family(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "naoh":
			out.Values[i] = ec._Lipid_naoh(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._Lipid_deletedAt(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Lipid_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Lipid_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "inventory":
			out.Values[i] = ec._Lipid_inventory(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lipidDeletePayloadImplementors = []string{"LipidDeletePayload"}

func (ec *executionContext) _LipidDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *gmodels.LipidDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lipidDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LipidDeletePayload")
		case "id":
			out.Values[i] = ec._LipidDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lipidInventoryImplementors = []string{"LipidInventory"}

func (ec *executionContext) _LipidInventory(ctx context.Context, sel ast.SelectionSet, obj *gmodels.LipidInventory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lipidInventoryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LipidInventory")
		case "id":
			out.Values[i] = ec._LipidInventory_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "purchaseDate":
			out.Values[i] = ec._LipidInventory_purchaseDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "expiryDate":
			out.Values[i] = ec._LipidInventory_expiryDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cost":
			out.Values[i] = ec._LipidInventory_cost(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "weight":
			out.Values[i] = ec._LipidInventory_weight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sap":
			out.Values[i] = ec._LipidInventory_sap(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "naoh":
			out.Values[i] = ec._LipidInventory_naoh(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "koh":
			out.Values[i] = ec._LipidInventory_koh(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "gramsPerLiter":
			out.Values[i] = ec._LipidInventory_gramsPerLiter(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lipid":
			out.Values[i] = ec._LipidInventory_lipid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supplier":
			out.Values[i] = ec._LipidInventory_supplier(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._LipidInventory_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._LipidInventory_deletedAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._LipidInventory_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lipidInventoryDeletePayloadImplementors = []string{"LipidInventoryDeletePayload"}

func (ec *executionContext) _LipidInventoryDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *gmodels.LipidInventoryDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lipidInventoryDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LipidInventoryDeletePayload")
		case "id":
			out.Values[i] = ec._LipidInventoryDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lipidInventoryPayloadImplementors = []string{"LipidInventoryPayload"}

func (ec *executionContext) _LipidInventoryPayload(ctx context.Context, sel ast.SelectionSet, obj *gmodels.LipidInventoryPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lipidInventoryPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LipidInventoryPayload")
		case "lipidInventory":
			out.Values[i] = ec._LipidInventoryPayload_lipidInventory(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lipidPayloadImplementors = []string{"LipidPayload"}

func (ec *executionContext) _LipidPayload(ctx context.Context, sel ast.SelectionSet, obj *gmodels.LipidPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lipidPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LipidPayload")
		case "lipid":
			out.Values[i] = ec._LipidPayload_lipid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lyeImplementors = []string{"Lye"}

func (ec *executionContext) _Lye(ctx context.Context, sel ast.SelectionSet, obj *gmodels.Lye) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lyeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Lye")
		case "id":
			out.Values[i] = ec._Lye_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "kind":
			out.Values[i] = ec._Lye_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Lye_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "note":
			out.Values[i] = ec._Lye_note(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._Lye_deletedAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Lye_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Lye_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "inventory":
			out.Values[i] = ec._Lye_inventory(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lyeDeletePayloadImplementors = []string{"LyeDeletePayload"}

func (ec *executionContext) _LyeDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *gmodels.LyeDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lyeDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LyeDeletePayload")
		case "id":
			out.Values[i] = ec._LyeDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lyeInventoryImplementors = []string{"LyeInventory"}

func (ec *executionContext) _LyeInventory(ctx context.Context, sel ast.SelectionSet, obj *gmodels.LyeInventory) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lyeInventoryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LyeInventory")
		case "id":
			out.Values[i] = ec._LyeInventory_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "purchaseDate":
			out.Values[i] = ec._LyeInventory_purchaseDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "expiryDate":
			out.Values[i] = ec._LyeInventory_expiryDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cost":
			out.Values[i] = ec._LyeInventory_cost(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "weight":
			out.Values[i] = ec._LyeInventory_weight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "concentration":
			out.Values[i] = ec._LyeInventory_concentration(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lye":
			out.Values[i] = ec._LyeInventory_lye(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supplier":
			out.Values[i] = ec._LyeInventory_supplier(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._LyeInventory_deletedAt(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._LyeInventory_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._LyeInventory_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lyeInventoryDeletePayloadImplementors = []string{"LyeInventoryDeletePayload"}

func (ec *executionContext) _LyeInventoryDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *gmodels.LyeInventoryDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lyeInventoryDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LyeInventoryDeletePayload")
		case "id":
			out.Values[i] = ec._LyeInventoryDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lyeInventoryPayloadImplementors = []string{"LyeInventoryPayload"}

func (ec *executionContext) _LyeInventoryPayload(ctx context.Context, sel ast.SelectionSet, obj *gmodels.LyeInventoryPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lyeInventoryPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LyeInventoryPayload")
		case "lyeInventory":
			out.Values[i] = ec._LyeInventoryPayload_lyeInventory(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var lyePayloadImplementors = []string{"LyePayload"}

func (ec *executionContext) _LyePayload(ctx context.Context, sel ast.SelectionSet, obj *gmodels.LyePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, lyePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LyePayload")
		case "lye":
			out.Values[i] = ec._LyePayload_lye(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createAdditive":
			out.Values[i] = ec._Mutation_createAdditive(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateAdditive":
			out.Values[i] = ec._Mutation_updateAdditive(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAdditive":
			out.Values[i] = ec._Mutation_deleteAdditive(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createAdditiveInventory":
			out.Values[i] = ec._Mutation_createAdditiveInventory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateAdditiveInventory":
			out.Values[i] = ec._Mutation_updateAdditiveInventory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAdditiveInventory":
			out.Values[i] = ec._Mutation_deleteAdditiveInventory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createFragrance":
			out.Values[i] = ec._Mutation_createFragrance(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateFragrance":
			out.Values[i] = ec._Mutation_updateFragrance(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteFragrance":
			out.Values[i] = ec._Mutation_deleteFragrance(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createFragranceInventory":
			out.Values[i] = ec._Mutation_createFragranceInventory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateFragranceInventory":
			out.Values[i] = ec._Mutation_updateFragranceInventory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteFragranceInventory":
			out.Values[i] = ec._Mutation_deleteFragranceInventory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createLipid":
			out.Values[i] = ec._Mutation_createLipid(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateLipid":
			out.Values[i] = ec._Mutation_updateLipid(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteLipid":
			out.Values[i] = ec._Mutation_deleteLipid(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createLipidInventory":
			out.Values[i] = ec._Mutation_createLipidInventory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateLipidInventory":
			out.Values[i] = ec._Mutation_updateLipidInventory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteLipidInventory":
			out.Values[i] = ec._Mutation_deleteLipidInventory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createLye":
			out.Values[i] = ec._Mutation_createLye(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateLye":
			out.Values[i] = ec._Mutation_updateLye(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteLye":
			out.Values[i] = ec._Mutation_deleteLye(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createLyeInventory":
			out.Values[i] = ec._Mutation_createLyeInventory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateLyeInventory":
			out.Values[i] = ec._Mutation_updateLyeInventory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteLyeInventory":
			out.Values[i] = ec._Mutation_deleteLyeInventory(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createRecipe":
			out.Values[i] = ec._Mutation_createRecipe(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRecipe":
			out.Values[i] = ec._Mutation_updateRecipe(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteRecipe":
			out.Values[i] = ec._Mutation_deleteRecipe(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createRecipeAdditive":
			out.Values[i] = ec._Mutation_createRecipeAdditive(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRecipeAdditive":
			out.Values[i] = ec._Mutation_updateRecipeAdditive(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteRecipeAdditive":
			out.Values[i] = ec._Mutation_deleteRecipeAdditive(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createRecipeBatch":
			out.Values[i] = ec._Mutation_createRecipeBatch(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRecipeBatch":
			out.Values[i] = ec._Mutation_updateRecipeBatch(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteRecipeBatch":
			out.Values[i] = ec._Mutation_deleteRecipeBatch(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createRecipeBatchAdditive":
			out.Values[i] = ec._Mutation_createRecipeBatchAdditive(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRecipeBatchAdditive":
			out.Values[i] = ec._Mutation_updateRecipeBatchAdditive(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteRecipeBatchAdditive":
			out.Values[i] = ec._Mutation_deleteRecipeBatchAdditive(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createRecipeBatchFragrance":
			out.Values[i] = ec._Mutation_createRecipeBatchFragrance(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRecipeBatchFragrance":
			out.Values[i] = ec._Mutation_updateRecipeBatchFragrance(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteRecipeBatchFragrance":
			out.Values[i] = ec._Mutation_deleteRecipeBatchFragrance(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createRecipeBatchLipid":
			out.Values[i] = ec._Mutation_createRecipeBatchLipid(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRecipeBatchLipid":
			out.Values[i] = ec._Mutation_updateRecipeBatchLipid(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteRecipeBatchLipid":
			out.Values[i] = ec._Mutation_deleteRecipeBatchLipid(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createRecipeBatchLye":
			out.Values[i] = ec._Mutation_createRecipeBatchLye(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRecipeBatchLye":
			out.Values[i] = ec._Mutation_updateRecipeBatchLye(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteRecipeBatchLye":
			out.Values[i] = ec._Mutation_deleteRecipeBatchLye(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createRecipeBatchNote":
			out.Values[i] = ec._Mutation_createRecipeBatchNote(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRecipeBatchNote":
			out.Values[i] = ec._Mutation_updateRecipeBatchNote(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteRecipeBatchNote":
			out.Values[i] = ec._Mutation_deleteRecipeBatchNote(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createRecipeFragrance":
			out.Values[i] = ec._Mutation_createRecipeFragrance(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRecipeFragrance":
			out.Values[i] = ec._Mutation_updateRecipeFragrance(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteRecipeFragrance":
			out.Values[i] = ec._Mutation_deleteRecipeFragrance(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createRecipeLipid":
			out.Values[i] = ec._Mutation_createRecipeLipid(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRecipeLipid":
			out.Values[i] = ec._Mutation_updateRecipeLipid(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteRecipeLipid":
			out.Values[i] = ec._Mutation_deleteRecipeLipid(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createRecipeStep":
			out.Values[i] = ec._Mutation_createRecipeStep(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRecipeStep":
			out.Values[i] = ec._Mutation_updateRecipeStep(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteRecipeStep":
			out.Values[i] = ec._Mutation_deleteRecipeStep(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createSupplier":
			out.Values[i] = ec._Mutation_createSupplier(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateSupplier":
			out.Values[i] = ec._Mutation_updateSupplier(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteSupplier":
			out.Values[i] = ec._Mutation_deleteSupplier(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "additive":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_additive(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "additives":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_additives(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "fragrance":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_fragrance(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "fragrances":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_fragrances(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "lipid":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_lipid(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "lipids":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_lipids(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "lye":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_lye(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "lyes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_lyes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipe":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipe(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipeAdditive":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipeAdditive(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipeAdditives":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipeAdditives(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipeBatch":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipeBatch(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipeBatches":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipeBatches(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipeBatchAdditive":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipeBatchAdditive(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipeBatchAdditives":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipeBatchAdditives(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipeBatchFragrance":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipeBatchFragrance(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipeBatchFragrances":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipeBatchFragrances(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipeBatchLipid":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipeBatchLipid(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipeBatchLipids":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipeBatchLipids(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipeBatchLye":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipeBatchLye(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipeBatchLyes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipeBatchLyes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipeBatchNote":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipeBatchNote(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipeBatchNotes":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipeBatchNotes(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipeFragrance":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipeFragrance(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipeFragrances":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipeFragrances(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipeLipid":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipeLipid(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipeLipids":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipeLipids(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipeStep":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipeStep(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "recipeSteps":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_recipeSteps(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "supplier":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_supplier(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "suppliers":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_suppliers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeImplementors = []string{"Recipe"}

func (ec *executionContext) _Recipe(ctx context.Context, sel ast.SelectionSet, obj *gmodels.Recipe) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Recipe")
		case "id":
			out.Values[i] = ec._Recipe_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Recipe_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "note":
			out.Values[i] = ec._Recipe_note(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._Recipe_deletedAt(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Recipe_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._Recipe_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "additives":
			out.Values[i] = ec._Recipe_additives(ctx, field, obj)
		case "batches":
			out.Values[i] = ec._Recipe_batches(ctx, field, obj)
		case "fragrances":
			out.Values[i] = ec._Recipe_fragrances(ctx, field, obj)
		case "lipids":
			out.Values[i] = ec._Recipe_lipids(ctx, field, obj)
		case "steps":
			out.Values[i] = ec._Recipe_steps(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeAdditiveImplementors = []string{"RecipeAdditive"}

func (ec *executionContext) _RecipeAdditive(ctx context.Context, sel ast.SelectionSet, obj *gmodels.RecipeAdditive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeAdditiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeAdditive")
		case "id":
			out.Values[i] = ec._RecipeAdditive_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "percentage":
			out.Values[i] = ec._RecipeAdditive_percentage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "additive":
			out.Values[i] = ec._RecipeAdditive_additive(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "recipe":
			out.Values[i] = ec._RecipeAdditive_recipe(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._RecipeAdditive_deletedAt(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._RecipeAdditive_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._RecipeAdditive_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeAdditiveDeletePayloadImplementors = []string{"RecipeAdditiveDeletePayload"}

func (ec *executionContext) _RecipeAdditiveDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *gmodels.RecipeAdditiveDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeAdditiveDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeAdditiveDeletePayload")
		case "id":
			out.Values[i] = ec._RecipeAdditiveDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeAdditivePayloadImplementors = []string{"RecipeAdditivePayload"}

func (ec *executionContext) _RecipeAdditivePayload(ctx context.Context, sel ast.SelectionSet, obj *gmodels.RecipeAdditivePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeAdditivePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeAdditivePayload")
		case "recipeAdditive":
			out.Values[i] = ec._RecipeAdditivePayload_recipeAdditive(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchImplementors = []string{"RecipeBatch"}

func (ec *executionContext) _RecipeBatch(ctx context.Context, sel ast.SelectionSet, obj *gmodels.RecipeBatch) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatch")
		case "id":
			out.Values[i] = ec._RecipeBatch_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tag":
			out.Values[i] = ec._RecipeBatch_tag(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "productionDate":
			out.Values[i] = ec._RecipeBatch_productionDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sellableDate":
			out.Values[i] = ec._RecipeBatch_sellableDate(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "note":
			out.Values[i] = ec._RecipeBatch_note(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lipidWeight":
			out.Values[i] = ec._RecipeBatch_lipidWeight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "productionWeight":
			out.Values[i] = ec._RecipeBatch_productionWeight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "curedWeight":
			out.Values[i] = ec._RecipeBatch_curedWeight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "recipe":
			out.Values[i] = ec._RecipeBatch_recipe(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._RecipeBatch_deletedAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._RecipeBatch_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._RecipeBatch_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "additives":
			out.Values[i] = ec._RecipeBatch_additives(ctx, field, obj)
		case "fragrances":
			out.Values[i] = ec._RecipeBatch_fragrances(ctx, field, obj)
		case "lipids":
			out.Values[i] = ec._RecipeBatch_lipids(ctx, field, obj)
		case "lye":
			out.Values[i] = ec._RecipeBatch_lye(ctx, field, obj)
		case "notes":
			out.Values[i] = ec._RecipeBatch_notes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchAdditiveImplementors = []string{"RecipeBatchAdditive"}

func (ec *executionContext) _RecipeBatchAdditive(ctx context.Context, sel ast.SelectionSet, obj *gmodels.RecipeBatchAdditive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchAdditiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchAdditive")
		case "id":
			out.Values[i] = ec._RecipeBatchAdditive_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "weight":
			out.Values[i] = ec._RecipeBatchAdditive_weight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cost":
			out.Values[i] = ec._RecipeBatchAdditive_cost(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "additive":
			out.Values[i] = ec._RecipeBatchAdditive_additive(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "batch":
			out.Values[i] = ec._RecipeBatchAdditive_batch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._RecipeBatchAdditive_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._RecipeBatchAdditive_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._RecipeBatchAdditive_deletedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchAdditiveDeletePayloadImplementors = []string{"RecipeBatchAdditiveDeletePayload"}

func (ec *executionContext) _RecipeBatchAdditiveDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *gmodels.RecipeBatchAdditiveDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchAdditiveDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchAdditiveDeletePayload")
		case "id":
			out.Values[i] = ec._RecipeBatchAdditiveDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchAdditivePayloadImplementors = []string{"RecipeBatchAdditivePayload"}

func (ec *executionContext) _RecipeBatchAdditivePayload(ctx context.Context, sel ast.SelectionSet, obj *gmodels.RecipeBatchAdditivePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchAdditivePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchAdditivePayload")
		case "recipeBatchAdditive":
			out.Values[i] = ec._RecipeBatchAdditivePayload_recipeBatchAdditive(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchDeletePayloadImplementors = []string{"RecipeBatchDeletePayload"}

func (ec *executionContext) _RecipeBatchDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *gmodels.RecipeBatchDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchDeletePayload")
		case "id":
			out.Values[i] = ec._RecipeBatchDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchFragranceImplementors = []string{"RecipeBatchFragrance"}

func (ec *executionContext) _RecipeBatchFragrance(ctx context.Context, sel ast.SelectionSet, obj *gmodels.RecipeBatchFragrance) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchFragranceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchFragrance")
		case "id":
			out.Values[i] = ec._RecipeBatchFragrance_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "weight":
			out.Values[i] = ec._RecipeBatchFragrance_weight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cost":
			out.Values[i] = ec._RecipeBatchFragrance_cost(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fragrance":
			out.Values[i] = ec._RecipeBatchFragrance_fragrance(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "batch":
			out.Values[i] = ec._RecipeBatchFragrance_batch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._RecipeBatchFragrance_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._RecipeBatchFragrance_deletedAt(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._RecipeBatchFragrance_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchFragranceDeletePayloadImplementors = []string{"RecipeBatchFragranceDeletePayload"}

func (ec *executionContext) _RecipeBatchFragranceDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *gmodels.RecipeBatchFragranceDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchFragranceDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchFragranceDeletePayload")
		case "id":
			out.Values[i] = ec._RecipeBatchFragranceDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchFragrancePayloadImplementors = []string{"RecipeBatchFragrancePayload"}

func (ec *executionContext) _RecipeBatchFragrancePayload(ctx context.Context, sel ast.SelectionSet, obj *gmodels.RecipeBatchFragrancePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchFragrancePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchFragrancePayload")
		case "recipeBatchFragrance":
			out.Values[i] = ec._RecipeBatchFragrancePayload_recipeBatchFragrance(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchLipidImplementors = []string{"RecipeBatchLipid"}

func (ec *executionContext) _RecipeBatchLipid(ctx context.Context, sel ast.SelectionSet, obj *gmodels.RecipeBatchLipid) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchLipidImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchLipid")
		case "id":
			out.Values[i] = ec._RecipeBatchLipid_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "weight":
			out.Values[i] = ec._RecipeBatchLipid_weight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cost":
			out.Values[i] = ec._RecipeBatchLipid_cost(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lipid":
			out.Values[i] = ec._RecipeBatchLipid_lipid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "batch":
			out.Values[i] = ec._RecipeBatchLipid_batch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._RecipeBatchLipid_deletedAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._RecipeBatchLipid_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._RecipeBatchLipid_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchLipidDeletePayloadImplementors = []string{"RecipeBatchLipidDeletePayload"}

func (ec *executionContext) _RecipeBatchLipidDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *gmodels.RecipeBatchLipidDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchLipidDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchLipidDeletePayload")
		case "id":
			out.Values[i] = ec._RecipeBatchLipidDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchLipidPayloadImplementors = []string{"RecipeBatchLipidPayload"}

func (ec *executionContext) _RecipeBatchLipidPayload(ctx context.Context, sel ast.SelectionSet, obj *gmodels.RecipeBatchLipidPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchLipidPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchLipidPayload")
		case "recipeBatchLipid":
			out.Values[i] = ec._RecipeBatchLipidPayload_recipeBatchLipid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchLyeImplementors = []string{"RecipeBatchLye"}

func (ec *executionContext) _RecipeBatchLye(ctx context.Context, sel ast.SelectionSet, obj *gmodels.RecipeBatchLye) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchLyeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchLye")
		case "id":
			out.Values[i] = ec._RecipeBatchLye_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "weight":
			out.Values[i] = ec._RecipeBatchLye_weight(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "discount":
			out.Values[i] = ec._RecipeBatchLye_discount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cost":
			out.Values[i] = ec._RecipeBatchLye_cost(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lye":
			out.Values[i] = ec._RecipeBatchLye_lye(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "batch":
			out.Values[i] = ec._RecipeBatchLye_batch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._RecipeBatchLye_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._RecipeBatchLye_deletedAt(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._RecipeBatchLye_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchLyeDeletePayloadImplementors = []string{"RecipeBatchLyeDeletePayload"}

func (ec *executionContext) _RecipeBatchLyeDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *gmodels.RecipeBatchLyeDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchLyeDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchLyeDeletePayload")
		case "id":
			out.Values[i] = ec._RecipeBatchLyeDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchLyePayloadImplementors = []string{"RecipeBatchLyePayload"}

func (ec *executionContext) _RecipeBatchLyePayload(ctx context.Context, sel ast.SelectionSet, obj *gmodels.RecipeBatchLyePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchLyePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchLyePayload")
		case "recipeBatchLye":
			out.Values[i] = ec._RecipeBatchLyePayload_recipeBatchLye(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchNoteImplementors = []string{"RecipeBatchNote"}

func (ec *executionContext) _RecipeBatchNote(ctx context.Context, sel ast.SelectionSet, obj *gmodels.RecipeBatchNote) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchNoteImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchNote")
		case "id":
			out.Values[i] = ec._RecipeBatchNote_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "note":
			out.Values[i] = ec._RecipeBatchNote_note(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "link":
			out.Values[i] = ec._RecipeBatchNote_link(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "batch":
			out.Values[i] = ec._RecipeBatchNote_batch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._RecipeBatchNote_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._RecipeBatchNote_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._RecipeBatchNote_deletedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchNoteDeletePayloadImplementors = []string{"RecipeBatchNoteDeletePayload"}

func (ec *executionContext) _RecipeBatchNoteDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *gmodels.RecipeBatchNoteDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchNoteDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchNoteDeletePayload")
		case "id":
			out.Values[i] = ec._RecipeBatchNoteDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchNotePayloadImplementors = []string{"RecipeBatchNotePayload"}

func (ec *executionContext) _RecipeBatchNotePayload(ctx context.Context, sel ast.SelectionSet, obj *gmodels.RecipeBatchNotePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchNotePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchNotePayload")
		case "recipeBatchNote":
			out.Values[i] = ec._RecipeBatchNotePayload_recipeBatchNote(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeBatchPayloadImplementors = []string{"RecipeBatchPayload"}

func (ec *executionContext) _RecipeBatchPayload(ctx context.Context, sel ast.SelectionSet, obj *gmodels.RecipeBatchPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeBatchPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeBatchPayload")
		case "recipeBatch":
			out.Values[i] = ec._RecipeBatchPayload_recipeBatch(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeDeletePayloadImplementors = []string{"RecipeDeletePayload"}

func (ec *executionContext) _RecipeDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *gmodels.RecipeDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeDeletePayload")
		case "id":
			out.Values[i] = ec._RecipeDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeFragranceImplementors = []string{"RecipeFragrance"}

func (ec *executionContext) _RecipeFragrance(ctx context.Context, sel ast.SelectionSet, obj *gmodels.RecipeFragrance) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeFragranceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeFragrance")
		case "id":
			out.Values[i] = ec._RecipeFragrance_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "percentage":
			out.Values[i] = ec._RecipeFragrance_percentage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fragrance":
			out.Values[i] = ec._RecipeFragrance_fragrance(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "recipe":
			out.Values[i] = ec._RecipeFragrance_recipe(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._RecipeFragrance_deletedAt(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._RecipeFragrance_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._RecipeFragrance_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeFragranceDeletePayloadImplementors = []string{"RecipeFragranceDeletePayload"}

func (ec *executionContext) _RecipeFragranceDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *gmodels.RecipeFragranceDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeFragranceDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeFragranceDeletePayload")
		case "id":
			out.Values[i] = ec._RecipeFragranceDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeFragrancePayloadImplementors = []string{"RecipeFragrancePayload"}

func (ec *executionContext) _RecipeFragrancePayload(ctx context.Context, sel ast.SelectionSet, obj *gmodels.RecipeFragrancePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeFragrancePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeFragrancePayload")
		case "recipeFragrance":
			out.Values[i] = ec._RecipeFragrancePayload_recipeFragrance(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeLipidImplementors = []string{"RecipeLipid"}

func (ec *executionContext) _RecipeLipid(ctx context.Context, sel ast.SelectionSet, obj *gmodels.RecipeLipid) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeLipidImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeLipid")
		case "id":
			out.Values[i] = ec._RecipeLipid_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "percentage":
			out.Values[i] = ec._RecipeLipid_percentage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lipid":
			out.Values[i] = ec._RecipeLipid_lipid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "recipe":
			out.Values[i] = ec._RecipeLipid_recipe(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._RecipeLipid_deletedAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._RecipeLipid_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._RecipeLipid_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeLipidDeletePayloadImplementors = []string{"RecipeLipidDeletePayload"}

func (ec *executionContext) _RecipeLipidDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *gmodels.RecipeLipidDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeLipidDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeLipidDeletePayload")
		case "id":
			out.Values[i] = ec._RecipeLipidDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeLipidPayloadImplementors = []string{"RecipeLipidPayload"}

func (ec *executionContext) _RecipeLipidPayload(ctx context.Context, sel ast.SelectionSet, obj *gmodels.RecipeLipidPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeLipidPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeLipidPayload")
		case "recipeLipid":
			out.Values[i] = ec._RecipeLipidPayload_recipeLipid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipePayloadImplementors = []string{"RecipePayload"}

func (ec *executionContext) _RecipePayload(ctx context.Context, sel ast.SelectionSet, obj *gmodels.RecipePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipePayload")
		case "recipe":
			out.Values[i] = ec._RecipePayload_recipe(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeStepImplementors = []string{"RecipeStep"}

func (ec *executionContext) _RecipeStep(ctx context.Context, sel ast.SelectionSet, obj *gmodels.RecipeStep) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeStepImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeStep")
		case "id":
			out.Values[i] = ec._RecipeStep_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "num":
			out.Values[i] = ec._RecipeStep_num(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "note":
			out.Values[i] = ec._RecipeStep_note(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "recipe":
			out.Values[i] = ec._RecipeStep_recipe(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._RecipeStep_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._RecipeStep_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._RecipeStep_deletedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeStepDeletePayloadImplementors = []string{"RecipeStepDeletePayload"}

func (ec *executionContext) _RecipeStepDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *gmodels.RecipeStepDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeStepDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeStepDeletePayload")
		case "id":
			out.Values[i] = ec._RecipeStepDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipeStepPayloadImplementors = []string{"RecipeStepPayload"}

func (ec *executionContext) _RecipeStepPayload(ctx context.Context, sel ast.SelectionSet, obj *gmodels.RecipeStepPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipeStepPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RecipeStepPayload")
		case "recipeStep":
			out.Values[i] = ec._RecipeStepPayload_recipeStep(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var supplierImplementors = []string{"Supplier"}

func (ec *executionContext) _Supplier(ctx context.Context, sel ast.SelectionSet, obj *gmodels.Supplier) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, supplierImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Supplier")
		case "id":
			out.Values[i] = ec._Supplier_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Supplier_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "website":
			out.Values[i] = ec._Supplier_website(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "note":
			out.Values[i] = ec._Supplier_note(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletedAt":
			out.Values[i] = ec._Supplier_deletedAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Supplier_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Supplier_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "additiveInventory":
			out.Values[i] = ec._Supplier_additiveInventory(ctx, field, obj)
		case "fragranceInventory":
			out.Values[i] = ec._Supplier_fragranceInventory(ctx, field, obj)
		case "lipidInventory":
			out.Values[i] = ec._Supplier_lipidInventory(ctx, field, obj)
		case "lyeInventory":
			out.Values[i] = ec._Supplier_lyeInventory(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var supplierDeletePayloadImplementors = []string{"SupplierDeletePayload"}

func (ec *executionContext) _SupplierDeletePayload(ctx context.Context, sel ast.SelectionSet, obj *gmodels.SupplierDeletePayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, supplierDeletePayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SupplierDeletePayload")
		case "id":
			out.Values[i] = ec._SupplierDeletePayload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var supplierPayloadImplementors = []string{"SupplierPayload"}

func (ec *executionContext) _SupplierPayload(ctx context.Context, sel ast.SelectionSet, obj *gmodels.SupplierPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, supplierPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SupplierPayload")
		case "supplier":
			out.Values[i] = ec._SupplierPayload_supplier(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNAdditive2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditive(ctx context.Context, sel ast.SelectionSet, v gmodels.Additive) graphql.Marshaler {
	return ec._Additive(ctx, sel, &v)
}

func (ec *executionContext) marshalNAdditive2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditiveᚄ(ctx context.Context, sel ast.SelectionSet, v []*gmodels.Additive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAdditive2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditive(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNAdditive2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditive(ctx context.Context, sel ast.SelectionSet, v *gmodels.Additive) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Additive(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAdditiveCreateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditiveCreateInput(ctx context.Context, v interface{}) (gmodels.AdditiveCreateInput, error) {
	res, err := ec.unmarshalInputAdditiveCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAdditiveDeletePayload2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditiveDeletePayload(ctx context.Context, sel ast.SelectionSet, v gmodels.AdditiveDeletePayload) graphql.Marshaler {
	return ec._AdditiveDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAdditiveDeletePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditiveDeletePayload(ctx context.Context, sel ast.SelectionSet, v *gmodels.AdditiveDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AdditiveDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNAdditiveInventory2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditiveInventory(ctx context.Context, sel ast.SelectionSet, v *gmodels.AdditiveInventory) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AdditiveInventory(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAdditiveInventoryCreateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditiveInventoryCreateInput(ctx context.Context, v interface{}) (gmodels.AdditiveInventoryCreateInput, error) {
	res, err := ec.unmarshalInputAdditiveInventoryCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAdditiveInventoryDeletePayload2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditiveInventoryDeletePayload(ctx context.Context, sel ast.SelectionSet, v gmodels.AdditiveInventoryDeletePayload) graphql.Marshaler {
	return ec._AdditiveInventoryDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAdditiveInventoryDeletePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditiveInventoryDeletePayload(ctx context.Context, sel ast.SelectionSet, v *gmodels.AdditiveInventoryDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AdditiveInventoryDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNAdditiveInventoryPayload2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditiveInventoryPayload(ctx context.Context, sel ast.SelectionSet, v gmodels.AdditiveInventoryPayload) graphql.Marshaler {
	return ec._AdditiveInventoryPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAdditiveInventoryPayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditiveInventoryPayload(ctx context.Context, sel ast.SelectionSet, v *gmodels.AdditiveInventoryPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AdditiveInventoryPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAdditiveInventoryUpdateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditiveInventoryUpdateInput(ctx context.Context, v interface{}) (gmodels.AdditiveInventoryUpdateInput, error) {
	res, err := ec.unmarshalInputAdditiveInventoryUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAdditivePayload2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditivePayload(ctx context.Context, sel ast.SelectionSet, v gmodels.AdditivePayload) graphql.Marshaler {
	return ec._AdditivePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNAdditivePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditivePayload(ctx context.Context, sel ast.SelectionSet, v *gmodels.AdditivePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AdditivePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAdditiveUpdateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditiveUpdateInput(ctx context.Context, v interface{}) (gmodels.AdditiveUpdateInput, error) {
	res, err := ec.unmarshalInputAdditiveUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloat(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloat(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNFragrance2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragrance(ctx context.Context, sel ast.SelectionSet, v gmodels.Fragrance) graphql.Marshaler {
	return ec._Fragrance(ctx, sel, &v)
}

func (ec *executionContext) marshalNFragrance2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragranceᚄ(ctx context.Context, sel ast.SelectionSet, v []*gmodels.Fragrance) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFragrance2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragrance(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNFragrance2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragrance(ctx context.Context, sel ast.SelectionSet, v *gmodels.Fragrance) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Fragrance(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFragranceCreateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragranceCreateInput(ctx context.Context, v interface{}) (gmodels.FragranceCreateInput, error) {
	res, err := ec.unmarshalInputFragranceCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFragranceDeletePayload2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragranceDeletePayload(ctx context.Context, sel ast.SelectionSet, v gmodels.FragranceDeletePayload) graphql.Marshaler {
	return ec._FragranceDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNFragranceDeletePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragranceDeletePayload(ctx context.Context, sel ast.SelectionSet, v *gmodels.FragranceDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FragranceDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNFragranceInventory2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragranceInventory(ctx context.Context, sel ast.SelectionSet, v *gmodels.FragranceInventory) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FragranceInventory(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFragranceInventoryCreateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragranceInventoryCreateInput(ctx context.Context, v interface{}) (gmodels.FragranceInventoryCreateInput, error) {
	res, err := ec.unmarshalInputFragranceInventoryCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFragranceInventoryDeletePayload2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragranceInventoryDeletePayload(ctx context.Context, sel ast.SelectionSet, v gmodels.FragranceInventoryDeletePayload) graphql.Marshaler {
	return ec._FragranceInventoryDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNFragranceInventoryDeletePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragranceInventoryDeletePayload(ctx context.Context, sel ast.SelectionSet, v *gmodels.FragranceInventoryDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FragranceInventoryDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNFragranceInventoryPayload2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragranceInventoryPayload(ctx context.Context, sel ast.SelectionSet, v gmodels.FragranceInventoryPayload) graphql.Marshaler {
	return ec._FragranceInventoryPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNFragranceInventoryPayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragranceInventoryPayload(ctx context.Context, sel ast.SelectionSet, v *gmodels.FragranceInventoryPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FragranceInventoryPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFragranceInventoryUpdateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragranceInventoryUpdateInput(ctx context.Context, v interface{}) (gmodels.FragranceInventoryUpdateInput, error) {
	res, err := ec.unmarshalInputFragranceInventoryUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFragrancePayload2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragrancePayload(ctx context.Context, sel ast.SelectionSet, v gmodels.FragrancePayload) graphql.Marshaler {
	return ec._FragrancePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNFragrancePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragrancePayload(ctx context.Context, sel ast.SelectionSet, v *gmodels.FragrancePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._FragrancePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFragranceUpdateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragranceUpdateInput(ctx context.Context, v interface{}) (gmodels.FragranceUpdateInput, error) {
	res, err := ec.unmarshalInputFragranceUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNLipid2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipid(ctx context.Context, sel ast.SelectionSet, v gmodels.Lipid) graphql.Marshaler {
	return ec._Lipid(ctx, sel, &v)
}

func (ec *executionContext) marshalNLipid2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidᚄ(ctx context.Context, sel ast.SelectionSet, v []*gmodels.Lipid) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLipid2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipid(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNLipid2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipid(ctx context.Context, sel ast.SelectionSet, v *gmodels.Lipid) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Lipid(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLipidCreateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidCreateInput(ctx context.Context, v interface{}) (gmodels.LipidCreateInput, error) {
	res, err := ec.unmarshalInputLipidCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNLipidDeletePayload2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidDeletePayload(ctx context.Context, sel ast.SelectionSet, v gmodels.LipidDeletePayload) graphql.Marshaler {
	return ec._LipidDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNLipidDeletePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidDeletePayload(ctx context.Context, sel ast.SelectionSet, v *gmodels.LipidDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LipidDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNLipidInventory2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidInventory(ctx context.Context, sel ast.SelectionSet, v *gmodels.LipidInventory) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LipidInventory(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLipidInventoryCreateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidInventoryCreateInput(ctx context.Context, v interface{}) (gmodels.LipidInventoryCreateInput, error) {
	res, err := ec.unmarshalInputLipidInventoryCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNLipidInventoryDeletePayload2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidInventoryDeletePayload(ctx context.Context, sel ast.SelectionSet, v gmodels.LipidInventoryDeletePayload) graphql.Marshaler {
	return ec._LipidInventoryDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNLipidInventoryDeletePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidInventoryDeletePayload(ctx context.Context, sel ast.SelectionSet, v *gmodels.LipidInventoryDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LipidInventoryDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNLipidInventoryPayload2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidInventoryPayload(ctx context.Context, sel ast.SelectionSet, v gmodels.LipidInventoryPayload) graphql.Marshaler {
	return ec._LipidInventoryPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNLipidInventoryPayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidInventoryPayload(ctx context.Context, sel ast.SelectionSet, v *gmodels.LipidInventoryPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LipidInventoryPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLipidInventoryUpdateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidInventoryUpdateInput(ctx context.Context, v interface{}) (gmodels.LipidInventoryUpdateInput, error) {
	res, err := ec.unmarshalInputLipidInventoryUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNLipidPayload2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidPayload(ctx context.Context, sel ast.SelectionSet, v gmodels.LipidPayload) graphql.Marshaler {
	return ec._LipidPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNLipidPayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidPayload(ctx context.Context, sel ast.SelectionSet, v *gmodels.LipidPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LipidPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLipidUpdateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidUpdateInput(ctx context.Context, v interface{}) (gmodels.LipidUpdateInput, error) {
	res, err := ec.unmarshalInputLipidUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNLye2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLye(ctx context.Context, sel ast.SelectionSet, v gmodels.Lye) graphql.Marshaler {
	return ec._Lye(ctx, sel, &v)
}

func (ec *executionContext) marshalNLye2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyeᚄ(ctx context.Context, sel ast.SelectionSet, v []*gmodels.Lye) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLye2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLye(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNLye2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLye(ctx context.Context, sel ast.SelectionSet, v *gmodels.Lye) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Lye(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLyeCreateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyeCreateInput(ctx context.Context, v interface{}) (gmodels.LyeCreateInput, error) {
	res, err := ec.unmarshalInputLyeCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNLyeDeletePayload2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyeDeletePayload(ctx context.Context, sel ast.SelectionSet, v gmodels.LyeDeletePayload) graphql.Marshaler {
	return ec._LyeDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNLyeDeletePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyeDeletePayload(ctx context.Context, sel ast.SelectionSet, v *gmodels.LyeDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LyeDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNLyeInventory2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyeInventory(ctx context.Context, sel ast.SelectionSet, v *gmodels.LyeInventory) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LyeInventory(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLyeInventoryCreateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyeInventoryCreateInput(ctx context.Context, v interface{}) (gmodels.LyeInventoryCreateInput, error) {
	res, err := ec.unmarshalInputLyeInventoryCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNLyeInventoryDeletePayload2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyeInventoryDeletePayload(ctx context.Context, sel ast.SelectionSet, v gmodels.LyeInventoryDeletePayload) graphql.Marshaler {
	return ec._LyeInventoryDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNLyeInventoryDeletePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyeInventoryDeletePayload(ctx context.Context, sel ast.SelectionSet, v *gmodels.LyeInventoryDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LyeInventoryDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNLyeInventoryPayload2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyeInventoryPayload(ctx context.Context, sel ast.SelectionSet, v gmodels.LyeInventoryPayload) graphql.Marshaler {
	return ec._LyeInventoryPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNLyeInventoryPayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyeInventoryPayload(ctx context.Context, sel ast.SelectionSet, v *gmodels.LyeInventoryPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LyeInventoryPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLyeInventoryUpdateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyeInventoryUpdateInput(ctx context.Context, v interface{}) (gmodels.LyeInventoryUpdateInput, error) {
	res, err := ec.unmarshalInputLyeInventoryUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNLyePayload2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyePayload(ctx context.Context, sel ast.SelectionSet, v gmodels.LyePayload) graphql.Marshaler {
	return ec._LyePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNLyePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyePayload(ctx context.Context, sel ast.SelectionSet, v *gmodels.LyePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._LyePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNLyeUpdateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyeUpdateInput(ctx context.Context, v interface{}) (gmodels.LyeUpdateInput, error) {
	res, err := ec.unmarshalInputLyeUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRecipe2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipe(ctx context.Context, sel ast.SelectionSet, v gmodels.Recipe) graphql.Marshaler {
	return ec._Recipe(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipe2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeᚄ(ctx context.Context, sel ast.SelectionSet, v []*gmodels.Recipe) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRecipe2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipe(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNRecipe2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipe(ctx context.Context, sel ast.SelectionSet, v *gmodels.Recipe) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Recipe(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeAdditive2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeAdditive(ctx context.Context, sel ast.SelectionSet, v gmodels.RecipeAdditive) graphql.Marshaler {
	return ec._RecipeAdditive(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeAdditive2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeAdditiveᚄ(ctx context.Context, sel ast.SelectionSet, v []*gmodels.RecipeAdditive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRecipeAdditive2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeAdditive(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNRecipeAdditive2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeAdditive(ctx context.Context, sel ast.SelectionSet, v *gmodels.RecipeAdditive) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeAdditive(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeAdditiveCreateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeAdditiveCreateInput(ctx context.Context, v interface{}) (gmodels.RecipeAdditiveCreateInput, error) {
	res, err := ec.unmarshalInputRecipeAdditiveCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRecipeAdditiveDeletePayload2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeAdditiveDeletePayload(ctx context.Context, sel ast.SelectionSet, v gmodels.RecipeAdditiveDeletePayload) graphql.Marshaler {
	return ec._RecipeAdditiveDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeAdditiveDeletePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeAdditiveDeletePayload(ctx context.Context, sel ast.SelectionSet, v *gmodels.RecipeAdditiveDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeAdditiveDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeAdditivePayload2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeAdditivePayload(ctx context.Context, sel ast.SelectionSet, v gmodels.RecipeAdditivePayload) graphql.Marshaler {
	return ec._RecipeAdditivePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeAdditivePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeAdditivePayload(ctx context.Context, sel ast.SelectionSet, v *gmodels.RecipeAdditivePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeAdditivePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeAdditiveUpdateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeAdditiveUpdateInput(ctx context.Context, v interface{}) (gmodels.RecipeAdditiveUpdateInput, error) {
	res, err := ec.unmarshalInputRecipeAdditiveUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRecipeBatch2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatch(ctx context.Context, sel ast.SelectionSet, v gmodels.RecipeBatch) graphql.Marshaler {
	return ec._RecipeBatch(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatch2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchᚄ(ctx context.Context, sel ast.SelectionSet, v []*gmodels.RecipeBatch) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRecipeBatch2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatch(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNRecipeBatch2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatch(ctx context.Context, sel ast.SelectionSet, v *gmodels.RecipeBatch) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatch(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeBatchAdditive2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchAdditive(ctx context.Context, sel ast.SelectionSet, v gmodels.RecipeBatchAdditive) graphql.Marshaler {
	return ec._RecipeBatchAdditive(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchAdditive2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchAdditiveᚄ(ctx context.Context, sel ast.SelectionSet, v []*gmodels.RecipeBatchAdditive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRecipeBatchAdditive2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchAdditive(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNRecipeBatchAdditive2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchAdditive(ctx context.Context, sel ast.SelectionSet, v *gmodels.RecipeBatchAdditive) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchAdditive(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeBatchAdditiveCreateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchAdditiveCreateInput(ctx context.Context, v interface{}) (gmodels.RecipeBatchAdditiveCreateInput, error) {
	res, err := ec.unmarshalInputRecipeBatchAdditiveCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRecipeBatchAdditiveDeletePayload2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchAdditiveDeletePayload(ctx context.Context, sel ast.SelectionSet, v gmodels.RecipeBatchAdditiveDeletePayload) graphql.Marshaler {
	return ec._RecipeBatchAdditiveDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchAdditiveDeletePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchAdditiveDeletePayload(ctx context.Context, sel ast.SelectionSet, v *gmodels.RecipeBatchAdditiveDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchAdditiveDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeBatchAdditivePayload2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchAdditivePayload(ctx context.Context, sel ast.SelectionSet, v gmodels.RecipeBatchAdditivePayload) graphql.Marshaler {
	return ec._RecipeBatchAdditivePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchAdditivePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchAdditivePayload(ctx context.Context, sel ast.SelectionSet, v *gmodels.RecipeBatchAdditivePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchAdditivePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeBatchAdditiveUpdateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchAdditiveUpdateInput(ctx context.Context, v interface{}) (gmodels.RecipeBatchAdditiveUpdateInput, error) {
	res, err := ec.unmarshalInputRecipeBatchAdditiveUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRecipeBatchCreateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchCreateInput(ctx context.Context, v interface{}) (gmodels.RecipeBatchCreateInput, error) {
	res, err := ec.unmarshalInputRecipeBatchCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRecipeBatchDeletePayload2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchDeletePayload(ctx context.Context, sel ast.SelectionSet, v gmodels.RecipeBatchDeletePayload) graphql.Marshaler {
	return ec._RecipeBatchDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchDeletePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchDeletePayload(ctx context.Context, sel ast.SelectionSet, v *gmodels.RecipeBatchDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeBatchFragrance2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchFragrance(ctx context.Context, sel ast.SelectionSet, v gmodels.RecipeBatchFragrance) graphql.Marshaler {
	return ec._RecipeBatchFragrance(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchFragrance2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchFragranceᚄ(ctx context.Context, sel ast.SelectionSet, v []*gmodels.RecipeBatchFragrance) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRecipeBatchFragrance2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchFragrance(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNRecipeBatchFragrance2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchFragrance(ctx context.Context, sel ast.SelectionSet, v *gmodels.RecipeBatchFragrance) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchFragrance(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeBatchFragranceCreateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchFragranceCreateInput(ctx context.Context, v interface{}) (gmodels.RecipeBatchFragranceCreateInput, error) {
	res, err := ec.unmarshalInputRecipeBatchFragranceCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRecipeBatchFragranceDeletePayload2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchFragranceDeletePayload(ctx context.Context, sel ast.SelectionSet, v gmodels.RecipeBatchFragranceDeletePayload) graphql.Marshaler {
	return ec._RecipeBatchFragranceDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchFragranceDeletePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchFragranceDeletePayload(ctx context.Context, sel ast.SelectionSet, v *gmodels.RecipeBatchFragranceDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchFragranceDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeBatchFragrancePayload2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchFragrancePayload(ctx context.Context, sel ast.SelectionSet, v gmodels.RecipeBatchFragrancePayload) graphql.Marshaler {
	return ec._RecipeBatchFragrancePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchFragrancePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchFragrancePayload(ctx context.Context, sel ast.SelectionSet, v *gmodels.RecipeBatchFragrancePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchFragrancePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeBatchFragranceUpdateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchFragranceUpdateInput(ctx context.Context, v interface{}) (gmodels.RecipeBatchFragranceUpdateInput, error) {
	res, err := ec.unmarshalInputRecipeBatchFragranceUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRecipeBatchLipid2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLipid(ctx context.Context, sel ast.SelectionSet, v gmodels.RecipeBatchLipid) graphql.Marshaler {
	return ec._RecipeBatchLipid(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchLipid2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLipidᚄ(ctx context.Context, sel ast.SelectionSet, v []*gmodels.RecipeBatchLipid) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRecipeBatchLipid2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLipid(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNRecipeBatchLipid2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLipid(ctx context.Context, sel ast.SelectionSet, v *gmodels.RecipeBatchLipid) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchLipid(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeBatchLipidCreateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLipidCreateInput(ctx context.Context, v interface{}) (gmodels.RecipeBatchLipidCreateInput, error) {
	res, err := ec.unmarshalInputRecipeBatchLipidCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRecipeBatchLipidDeletePayload2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLipidDeletePayload(ctx context.Context, sel ast.SelectionSet, v gmodels.RecipeBatchLipidDeletePayload) graphql.Marshaler {
	return ec._RecipeBatchLipidDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchLipidDeletePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLipidDeletePayload(ctx context.Context, sel ast.SelectionSet, v *gmodels.RecipeBatchLipidDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchLipidDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeBatchLipidPayload2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLipidPayload(ctx context.Context, sel ast.SelectionSet, v gmodels.RecipeBatchLipidPayload) graphql.Marshaler {
	return ec._RecipeBatchLipidPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchLipidPayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLipidPayload(ctx context.Context, sel ast.SelectionSet, v *gmodels.RecipeBatchLipidPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchLipidPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeBatchLipidUpdateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLipidUpdateInput(ctx context.Context, v interface{}) (gmodels.RecipeBatchLipidUpdateInput, error) {
	res, err := ec.unmarshalInputRecipeBatchLipidUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRecipeBatchLye2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLye(ctx context.Context, sel ast.SelectionSet, v gmodels.RecipeBatchLye) graphql.Marshaler {
	return ec._RecipeBatchLye(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchLye2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLyeᚄ(ctx context.Context, sel ast.SelectionSet, v []*gmodels.RecipeBatchLye) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRecipeBatchLye2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLye(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNRecipeBatchLye2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLye(ctx context.Context, sel ast.SelectionSet, v *gmodels.RecipeBatchLye) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchLye(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeBatchLyeCreateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLyeCreateInput(ctx context.Context, v interface{}) (gmodels.RecipeBatchLyeCreateInput, error) {
	res, err := ec.unmarshalInputRecipeBatchLyeCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRecipeBatchLyeDeletePayload2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLyeDeletePayload(ctx context.Context, sel ast.SelectionSet, v gmodels.RecipeBatchLyeDeletePayload) graphql.Marshaler {
	return ec._RecipeBatchLyeDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchLyeDeletePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLyeDeletePayload(ctx context.Context, sel ast.SelectionSet, v *gmodels.RecipeBatchLyeDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchLyeDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeBatchLyePayload2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLyePayload(ctx context.Context, sel ast.SelectionSet, v gmodels.RecipeBatchLyePayload) graphql.Marshaler {
	return ec._RecipeBatchLyePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchLyePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLyePayload(ctx context.Context, sel ast.SelectionSet, v *gmodels.RecipeBatchLyePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchLyePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeBatchLyeUpdateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLyeUpdateInput(ctx context.Context, v interface{}) (gmodels.RecipeBatchLyeUpdateInput, error) {
	res, err := ec.unmarshalInputRecipeBatchLyeUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRecipeBatchNote2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchNote(ctx context.Context, sel ast.SelectionSet, v gmodels.RecipeBatchNote) graphql.Marshaler {
	return ec._RecipeBatchNote(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchNote2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchNoteᚄ(ctx context.Context, sel ast.SelectionSet, v []*gmodels.RecipeBatchNote) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRecipeBatchNote2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchNote(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNRecipeBatchNote2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchNote(ctx context.Context, sel ast.SelectionSet, v *gmodels.RecipeBatchNote) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchNote(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeBatchNoteCreateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchNoteCreateInput(ctx context.Context, v interface{}) (gmodels.RecipeBatchNoteCreateInput, error) {
	res, err := ec.unmarshalInputRecipeBatchNoteCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRecipeBatchNoteDeletePayload2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchNoteDeletePayload(ctx context.Context, sel ast.SelectionSet, v gmodels.RecipeBatchNoteDeletePayload) graphql.Marshaler {
	return ec._RecipeBatchNoteDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchNoteDeletePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchNoteDeletePayload(ctx context.Context, sel ast.SelectionSet, v *gmodels.RecipeBatchNoteDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchNoteDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeBatchNotePayload2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchNotePayload(ctx context.Context, sel ast.SelectionSet, v gmodels.RecipeBatchNotePayload) graphql.Marshaler {
	return ec._RecipeBatchNotePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchNotePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchNotePayload(ctx context.Context, sel ast.SelectionSet, v *gmodels.RecipeBatchNotePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchNotePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeBatchNoteUpdateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchNoteUpdateInput(ctx context.Context, v interface{}) (gmodels.RecipeBatchNoteUpdateInput, error) {
	res, err := ec.unmarshalInputRecipeBatchNoteUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRecipeBatchPayload2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchPayload(ctx context.Context, sel ast.SelectionSet, v gmodels.RecipeBatchPayload) graphql.Marshaler {
	return ec._RecipeBatchPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeBatchPayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchPayload(ctx context.Context, sel ast.SelectionSet, v *gmodels.RecipeBatchPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeBatchPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeBatchUpdateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchUpdateInput(ctx context.Context, v interface{}) (gmodels.RecipeBatchUpdateInput, error) {
	res, err := ec.unmarshalInputRecipeBatchUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRecipeCreateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeCreateInput(ctx context.Context, v interface{}) (gmodels.RecipeCreateInput, error) {
	res, err := ec.unmarshalInputRecipeCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRecipeDeletePayload2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeDeletePayload(ctx context.Context, sel ast.SelectionSet, v gmodels.RecipeDeletePayload) graphql.Marshaler {
	return ec._RecipeDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeDeletePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeDeletePayload(ctx context.Context, sel ast.SelectionSet, v *gmodels.RecipeDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeFragrance2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeFragrance(ctx context.Context, sel ast.SelectionSet, v gmodels.RecipeFragrance) graphql.Marshaler {
	return ec._RecipeFragrance(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeFragrance2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeFragranceᚄ(ctx context.Context, sel ast.SelectionSet, v []*gmodels.RecipeFragrance) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRecipeFragrance2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeFragrance(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNRecipeFragrance2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeFragrance(ctx context.Context, sel ast.SelectionSet, v *gmodels.RecipeFragrance) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeFragrance(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeFragranceCreateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeFragranceCreateInput(ctx context.Context, v interface{}) (gmodels.RecipeFragranceCreateInput, error) {
	res, err := ec.unmarshalInputRecipeFragranceCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRecipeFragranceDeletePayload2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeFragranceDeletePayload(ctx context.Context, sel ast.SelectionSet, v gmodels.RecipeFragranceDeletePayload) graphql.Marshaler {
	return ec._RecipeFragranceDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeFragranceDeletePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeFragranceDeletePayload(ctx context.Context, sel ast.SelectionSet, v *gmodels.RecipeFragranceDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeFragranceDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeFragrancePayload2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeFragrancePayload(ctx context.Context, sel ast.SelectionSet, v gmodels.RecipeFragrancePayload) graphql.Marshaler {
	return ec._RecipeFragrancePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeFragrancePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeFragrancePayload(ctx context.Context, sel ast.SelectionSet, v *gmodels.RecipeFragrancePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeFragrancePayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeFragranceUpdateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeFragranceUpdateInput(ctx context.Context, v interface{}) (gmodels.RecipeFragranceUpdateInput, error) {
	res, err := ec.unmarshalInputRecipeFragranceUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRecipeLipid2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeLipid(ctx context.Context, sel ast.SelectionSet, v gmodels.RecipeLipid) graphql.Marshaler {
	return ec._RecipeLipid(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeLipid2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeLipidᚄ(ctx context.Context, sel ast.SelectionSet, v []*gmodels.RecipeLipid) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRecipeLipid2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeLipid(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNRecipeLipid2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeLipid(ctx context.Context, sel ast.SelectionSet, v *gmodels.RecipeLipid) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeLipid(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeLipidCreateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeLipidCreateInput(ctx context.Context, v interface{}) (gmodels.RecipeLipidCreateInput, error) {
	res, err := ec.unmarshalInputRecipeLipidCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRecipeLipidDeletePayload2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeLipidDeletePayload(ctx context.Context, sel ast.SelectionSet, v gmodels.RecipeLipidDeletePayload) graphql.Marshaler {
	return ec._RecipeLipidDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeLipidDeletePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeLipidDeletePayload(ctx context.Context, sel ast.SelectionSet, v *gmodels.RecipeLipidDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeLipidDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeLipidPayload2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeLipidPayload(ctx context.Context, sel ast.SelectionSet, v gmodels.RecipeLipidPayload) graphql.Marshaler {
	return ec._RecipeLipidPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeLipidPayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeLipidPayload(ctx context.Context, sel ast.SelectionSet, v *gmodels.RecipeLipidPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeLipidPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeLipidUpdateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeLipidUpdateInput(ctx context.Context, v interface{}) (gmodels.RecipeLipidUpdateInput, error) {
	res, err := ec.unmarshalInputRecipeLipidUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRecipePayload2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipePayload(ctx context.Context, sel ast.SelectionSet, v gmodels.RecipePayload) graphql.Marshaler {
	return ec._RecipePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipePayload(ctx context.Context, sel ast.SelectionSet, v *gmodels.RecipePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeStep2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeStep(ctx context.Context, sel ast.SelectionSet, v gmodels.RecipeStep) graphql.Marshaler {
	return ec._RecipeStep(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeStep2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeStepᚄ(ctx context.Context, sel ast.SelectionSet, v []*gmodels.RecipeStep) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRecipeStep2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeStep(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNRecipeStep2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeStep(ctx context.Context, sel ast.SelectionSet, v *gmodels.RecipeStep) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeStep(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeStepCreateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeStepCreateInput(ctx context.Context, v interface{}) (gmodels.RecipeStepCreateInput, error) {
	res, err := ec.unmarshalInputRecipeStepCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRecipeStepDeletePayload2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeStepDeletePayload(ctx context.Context, sel ast.SelectionSet, v gmodels.RecipeStepDeletePayload) graphql.Marshaler {
	return ec._RecipeStepDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeStepDeletePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeStepDeletePayload(ctx context.Context, sel ast.SelectionSet, v *gmodels.RecipeStepDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeStepDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNRecipeStepPayload2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeStepPayload(ctx context.Context, sel ast.SelectionSet, v gmodels.RecipeStepPayload) graphql.Marshaler {
	return ec._RecipeStepPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipeStepPayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeStepPayload(ctx context.Context, sel ast.SelectionSet, v *gmodels.RecipeStepPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RecipeStepPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRecipeStepUpdateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeStepUpdateInput(ctx context.Context, v interface{}) (gmodels.RecipeStepUpdateInput, error) {
	res, err := ec.unmarshalInputRecipeStepUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRecipeUpdateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeUpdateInput(ctx context.Context, v interface{}) (gmodels.RecipeUpdateInput, error) {
	res, err := ec.unmarshalInputRecipeUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNSupplier2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐSupplier(ctx context.Context, sel ast.SelectionSet, v gmodels.Supplier) graphql.Marshaler {
	return ec._Supplier(ctx, sel, &v)
}

func (ec *executionContext) marshalNSupplier2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐSupplierᚄ(ctx context.Context, sel ast.SelectionSet, v []*gmodels.Supplier) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSupplier2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐSupplier(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNSupplier2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐSupplier(ctx context.Context, sel ast.SelectionSet, v *gmodels.Supplier) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Supplier(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSupplierCreateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐSupplierCreateInput(ctx context.Context, v interface{}) (gmodels.SupplierCreateInput, error) {
	res, err := ec.unmarshalInputSupplierCreateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSupplierDeletePayload2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐSupplierDeletePayload(ctx context.Context, sel ast.SelectionSet, v gmodels.SupplierDeletePayload) graphql.Marshaler {
	return ec._SupplierDeletePayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNSupplierDeletePayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐSupplierDeletePayload(ctx context.Context, sel ast.SelectionSet, v *gmodels.SupplierDeletePayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SupplierDeletePayload(ctx, sel, v)
}

func (ec *executionContext) marshalNSupplierPayload2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐSupplierPayload(ctx context.Context, sel ast.SelectionSet, v gmodels.SupplierPayload) graphql.Marshaler {
	return ec._SupplierPayload(ctx, sel, &v)
}

func (ec *executionContext) marshalNSupplierPayload2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐSupplierPayload(ctx context.Context, sel ast.SelectionSet, v *gmodels.SupplierPayload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SupplierPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSupplierUpdateInput2githubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐSupplierUpdateInput(ctx context.Context, v interface{}) (gmodels.SupplierUpdateInput, error) {
	res, err := ec.unmarshalInputSupplierUpdateInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOAdditiveFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditiveFilter(ctx context.Context, v interface{}) (*gmodels.AdditiveFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAdditiveFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAdditiveInventory2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditiveInventory(ctx context.Context, sel ast.SelectionSet, v []*gmodels.AdditiveInventory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAdditiveInventory2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditiveInventory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOAdditiveInventory2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditiveInventory(ctx context.Context, sel ast.SelectionSet, v *gmodels.AdditiveInventory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AdditiveInventory(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAdditiveInventoryWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditiveInventoryWhere(ctx context.Context, v interface{}) (*gmodels.AdditiveInventoryWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAdditiveInventoryWhere(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOAdditiveWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐAdditiveWhere(ctx context.Context, v interface{}) (*gmodels.AdditiveWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAdditiveWhere(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOFloat2ᚕfloat64ᚄ(ctx context.Context, v interface{}) ([]float64, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]float64, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNFloat2float64(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOFloat2ᚕfloat64ᚄ(ctx context.Context, sel ast.SelectionSet, v []float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNFloat2float64(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) unmarshalOFloatFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFloatFilter(ctx context.Context, v interface{}) (*gmodels.FloatFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFloatFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFragranceFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragranceFilter(ctx context.Context, v interface{}) (*gmodels.FragranceFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFragranceFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFragranceInventory2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragranceInventory(ctx context.Context, sel ast.SelectionSet, v []*gmodels.FragranceInventory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFragranceInventory2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragranceInventory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOFragranceInventory2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragranceInventory(ctx context.Context, sel ast.SelectionSet, v *gmodels.FragranceInventory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FragranceInventory(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFragranceInventoryWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragranceInventoryWhere(ctx context.Context, v interface{}) (*gmodels.FragranceInventoryWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFragranceInventoryWhere(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFragranceWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐFragranceWhere(ctx context.Context, v interface{}) (*gmodels.FragranceWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFragranceWhere(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalID(*v)
}

func (ec *executionContext) unmarshalOIDFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIDFilter(ctx context.Context, v interface{}) (*gmodels.IDFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputIDFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOInt2ᚕintᚄ(ctx context.Context, v interface{}) ([]int, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]int, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNInt2int(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOInt2ᚕintᚄ(ctx context.Context, sel ast.SelectionSet, v []int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNInt2int(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOIntFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐIntFilter(ctx context.Context, v interface{}) (*gmodels.IntFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputIntFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOLipidFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidFilter(ctx context.Context, v interface{}) (*gmodels.LipidFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLipidFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLipidInventory2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidInventory(ctx context.Context, sel ast.SelectionSet, v []*gmodels.LipidInventory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOLipidInventory2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidInventory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOLipidInventory2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidInventory(ctx context.Context, sel ast.SelectionSet, v *gmodels.LipidInventory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LipidInventory(ctx, sel, v)
}

func (ec *executionContext) unmarshalOLipidInventoryWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidInventoryWhere(ctx context.Context, v interface{}) (*gmodels.LipidInventoryWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLipidInventoryWhere(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOLipidWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLipidWhere(ctx context.Context, v interface{}) (*gmodels.LipidWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLipidWhere(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOLyeFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyeFilter(ctx context.Context, v interface{}) (*gmodels.LyeFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLyeFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOLyeInventory2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyeInventory(ctx context.Context, sel ast.SelectionSet, v []*gmodels.LyeInventory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOLyeInventory2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyeInventory(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOLyeInventory2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyeInventory(ctx context.Context, sel ast.SelectionSet, v *gmodels.LyeInventory) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LyeInventory(ctx, sel, v)
}

func (ec *executionContext) unmarshalOLyeInventoryWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyeInventoryWhere(ctx context.Context, v interface{}) (*gmodels.LyeInventoryWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLyeInventoryWhere(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOLyeWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐLyeWhere(ctx context.Context, v interface{}) (*gmodels.LyeWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLyeWhere(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORecipeAdditive2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeAdditive(ctx context.Context, sel ast.SelectionSet, v []*gmodels.RecipeAdditive) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORecipeAdditive2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeAdditive(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORecipeAdditive2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeAdditive(ctx context.Context, sel ast.SelectionSet, v *gmodels.RecipeAdditive) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RecipeAdditive(ctx, sel, v)
}

func (ec *executionContext) unmarshalORecipeAdditiveFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeAdditiveFilter(ctx context.Context, v interface{}) (*gmodels.RecipeAdditiveFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRecipeAdditiveFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalORecipeAdditiveWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeAdditiveWhere(ctx context.Context, v interface{}) (*gmodels.RecipeAdditiveWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRecipeAdditiveWhere(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORecipeBatch2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatch(ctx context.Context, sel ast.SelectionSet, v []*gmodels.RecipeBatch) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORecipeBatch2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatch(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORecipeBatch2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatch(ctx context.Context, sel ast.SelectionSet, v *gmodels.RecipeBatch) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RecipeBatch(ctx, sel, v)
}

func (ec *executionContext) marshalORecipeBatchAdditive2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchAdditive(ctx context.Context, sel ast.SelectionSet, v []*gmodels.RecipeBatchAdditive) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORecipeBatchAdditive2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchAdditive(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORecipeBatchAdditive2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchAdditive(ctx context.Context, sel ast.SelectionSet, v *gmodels.RecipeBatchAdditive) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RecipeBatchAdditive(ctx, sel, v)
}

func (ec *executionContext) unmarshalORecipeBatchAdditiveFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchAdditiveFilter(ctx context.Context, v interface{}) (*gmodels.RecipeBatchAdditiveFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRecipeBatchAdditiveFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalORecipeBatchAdditiveWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchAdditiveWhere(ctx context.Context, v interface{}) (*gmodels.RecipeBatchAdditiveWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRecipeBatchAdditiveWhere(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalORecipeBatchFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchFilter(ctx context.Context, v interface{}) (*gmodels.RecipeBatchFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRecipeBatchFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORecipeBatchFragrance2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchFragrance(ctx context.Context, sel ast.SelectionSet, v []*gmodels.RecipeBatchFragrance) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORecipeBatchFragrance2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchFragrance(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORecipeBatchFragrance2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchFragrance(ctx context.Context, sel ast.SelectionSet, v *gmodels.RecipeBatchFragrance) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RecipeBatchFragrance(ctx, sel, v)
}

func (ec *executionContext) unmarshalORecipeBatchFragranceFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchFragranceFilter(ctx context.Context, v interface{}) (*gmodels.RecipeBatchFragranceFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRecipeBatchFragranceFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalORecipeBatchFragranceWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchFragranceWhere(ctx context.Context, v interface{}) (*gmodels.RecipeBatchFragranceWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRecipeBatchFragranceWhere(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORecipeBatchLipid2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLipid(ctx context.Context, sel ast.SelectionSet, v []*gmodels.RecipeBatchLipid) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORecipeBatchLipid2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLipid(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORecipeBatchLipid2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLipid(ctx context.Context, sel ast.SelectionSet, v *gmodels.RecipeBatchLipid) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RecipeBatchLipid(ctx, sel, v)
}

func (ec *executionContext) unmarshalORecipeBatchLipidFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLipidFilter(ctx context.Context, v interface{}) (*gmodels.RecipeBatchLipidFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRecipeBatchLipidFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalORecipeBatchLipidWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLipidWhere(ctx context.Context, v interface{}) (*gmodels.RecipeBatchLipidWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRecipeBatchLipidWhere(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORecipeBatchLye2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLye(ctx context.Context, sel ast.SelectionSet, v []*gmodels.RecipeBatchLye) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORecipeBatchLye2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLye(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORecipeBatchLye2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLye(ctx context.Context, sel ast.SelectionSet, v *gmodels.RecipeBatchLye) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RecipeBatchLye(ctx, sel, v)
}

func (ec *executionContext) unmarshalORecipeBatchLyeFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLyeFilter(ctx context.Context, v interface{}) (*gmodels.RecipeBatchLyeFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRecipeBatchLyeFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalORecipeBatchLyeWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchLyeWhere(ctx context.Context, v interface{}) (*gmodels.RecipeBatchLyeWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRecipeBatchLyeWhere(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORecipeBatchNote2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchNote(ctx context.Context, sel ast.SelectionSet, v []*gmodels.RecipeBatchNote) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORecipeBatchNote2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchNote(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORecipeBatchNote2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchNote(ctx context.Context, sel ast.SelectionSet, v *gmodels.RecipeBatchNote) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RecipeBatchNote(ctx, sel, v)
}

func (ec *executionContext) unmarshalORecipeBatchNoteFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchNoteFilter(ctx context.Context, v interface{}) (*gmodels.RecipeBatchNoteFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRecipeBatchNoteFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalORecipeBatchNoteWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchNoteWhere(ctx context.Context, v interface{}) (*gmodels.RecipeBatchNoteWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRecipeBatchNoteWhere(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalORecipeBatchWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeBatchWhere(ctx context.Context, v interface{}) (*gmodels.RecipeBatchWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRecipeBatchWhere(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalORecipeFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeFilter(ctx context.Context, v interface{}) (*gmodels.RecipeFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRecipeFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORecipeFragrance2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeFragrance(ctx context.Context, sel ast.SelectionSet, v []*gmodels.RecipeFragrance) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORecipeFragrance2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeFragrance(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORecipeFragrance2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeFragrance(ctx context.Context, sel ast.SelectionSet, v *gmodels.RecipeFragrance) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RecipeFragrance(ctx, sel, v)
}

func (ec *executionContext) unmarshalORecipeFragranceFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeFragranceFilter(ctx context.Context, v interface{}) (*gmodels.RecipeFragranceFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRecipeFragranceFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalORecipeFragranceWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeFragranceWhere(ctx context.Context, v interface{}) (*gmodels.RecipeFragranceWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRecipeFragranceWhere(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORecipeLipid2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeLipid(ctx context.Context, sel ast.SelectionSet, v []*gmodels.RecipeLipid) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORecipeLipid2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeLipid(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORecipeLipid2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeLipid(ctx context.Context, sel ast.SelectionSet, v *gmodels.RecipeLipid) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RecipeLipid(ctx, sel, v)
}

func (ec *executionContext) unmarshalORecipeLipidFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeLipidFilter(ctx context.Context, v interface{}) (*gmodels.RecipeLipidFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRecipeLipidFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalORecipeLipidWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeLipidWhere(ctx context.Context, v interface{}) (*gmodels.RecipeLipidWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRecipeLipidWhere(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORecipeStep2ᚕᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeStep(ctx context.Context, sel ast.SelectionSet, v []*gmodels.RecipeStep) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORecipeStep2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeStep(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORecipeStep2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeStep(ctx context.Context, sel ast.SelectionSet, v *gmodels.RecipeStep) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RecipeStep(ctx, sel, v)
}

func (ec *executionContext) unmarshalORecipeStepFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeStepFilter(ctx context.Context, v interface{}) (*gmodels.RecipeStepFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRecipeStepFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalORecipeStepWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeStepWhere(ctx context.Context, v interface{}) (*gmodels.RecipeStepWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRecipeStepWhere(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalORecipeWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐRecipeWhere(ctx context.Context, v interface{}) (*gmodels.RecipeWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRecipeWhere(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOStringFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐStringFilter(ctx context.Context, v interface{}) (*gmodels.StringFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStringFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSupplierFilter2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐSupplierFilter(ctx context.Context, v interface{}) (*gmodels.SupplierFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSupplierFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSupplierWhere2ᚖgithubᚗcomᚋsjhitchnerᚋsoapcalcᚋbackendᚋgeneratedᚋgraphqlᚋmodelsᚐSupplierWhere(ctx context.Context, v interface{}) (*gmodels.SupplierWhere, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSupplierWhere(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
